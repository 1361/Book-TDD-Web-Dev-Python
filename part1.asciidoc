[[part1]]
The basics of TDD and Django
============================

[partintro]
--
In this first part, I'm going to introduce the basics of Test-Driven
Development (TDD), by starting from scratch with building a real web
application, writing tests first at every stage.

We'll cover Functional testing with Selenium, as well as unit testing, and
see the difference between the two.  I'll introduce the TDD workflow, what
I call the unit test / code cycle. We'll also do some refactoring, and see how
that fits with TDD.  Since it's absolutely essential to serious software 
engineering, I'll also be using a version control system (Git), and showing
how and when to do commits, to integrate with the TDD and web development 
workflow.

We'll be using Django, the Python world's most popular web framework
(probably).  I've tried to introduce the Django concepts slowly and one at
a time, and provide lots of links to further reading.  If you're a total
beginner to Django, I thoroughly recommend taking the time to read them. If
you find yourself feeling a bit lost, take a couple of hours to go through
the official Django tutorial, and then come back to the book.

You'll also get to meet the Testing Goat...

.Be careful with copy & paste
[TIP]
====
If you're working from a digital version of the book, it's natural to want to
copy & paste code listings from the book as you're working through it.  It's
much better if you don't: typing things in by hand gets them into your muscle
memory, and just feels much more real. You also inevitably make the occasional
typo, and debugging them is an important thing to learn.

Quite apart from that, you'll find that the quirks of the PDF format mean
that weird stuff often happens when you try and copy/paste from it...
====

--
