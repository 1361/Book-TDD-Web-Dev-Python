Token social bit: list sharing
------------------------------

Are jokes about how "everything has to be social now" slightly old hat?
Everything has to be all A/B tested big data lists of 10 Things This Inspiring
Teacher Said Will Make You Change Your Mind About Bla Bla now. Anyway. Lists,
be they Inspirational or otherwise, are often better shared. Let's allow our
users to share their lists with other users.



An FT with multiple users, and addCleanup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here we go!  Ft:

[role="sourcecode"]
.functional_tests/test_sharing.py
[source,python]
----
from selenium import webdriver
from .base import FunctionalTest

def quit_if_possible(browser):
    try: browser.quit()
    except: pass


class SharingTest(FunctionalTest):

    def test_logged_in_users_lists_are_saved_as_my_lists(self):
        # Edith is a logged-in user
        self.create_pre_authenticated_session('edith@email.com')
        edith_browser = self.browser
        self.addCleanup(lambda: quit_if_possible(edith_browser))

        # Her friend Oniciferous is also hanging out on the lists site
        oni_browser = webdriver.Firefox()
        self.addCleanup(lambda: quit_if_possible(oni_browser))
        self.browser = oni_browser
        self.create_pre_authenticated_session('oniciferous@email.com')

        # Edith goes to the home page and starts a list
        self.browser = edith_browser
        self.browser.get(self.server_url)
        self.get_item_input_box().send_keys('Get help\n')

        # She notices a "Share this list" option
        share_box = self.browser.find_element_by_css_selector('input[name=email]')
        self.assertEqual(
            share_box.get_attribute('placeholder'),
            'your@friends-email.com'
        )
----
//TODO: rename Edith to Francis, as per ch. 6?

The interesting feature to note about this section is the `addCleanup`
function, whose documentation you can find 
http://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup[here].
It can be used as an alternative to the `tearDown` function as a way of
cleaning up resources used during the test.  It's most useful when the resource
is only allocated half-way through a test.

`addCleanup` is run after `tearDown`, which is why we need that try/except
formulation for `quit_if_possible` -- whichever of `edith_browser` and 
`oni_browser` is also assigned to `self.browser` at the point at which the 
test end will already have been quit by the tearDown function.

We also need to change the way our pre-authenticated session creator works,
so that it can take an arbirtray email address for the user to create an
account and session for.  We start by moving the helper function out of
`MyListsTest` and into 'base.py', and changing its signature:


[role="sourcecode"]
.functional_tests/base.py
[source,diff]
----
    def create_pre_authenticated_session(self, email):
        if self.against_staging:
            session_key = create_session_on_server(self.server_host, email)
        else:
            session_key = create_pre_authenticated_session(email)
        ## to set a cookie we need to first visit the domain.
        ## 404 pages load the quickest!
        self.browser.get(self.server_url + "/404_no_such_url/")
        self.browser.add_cookie(dict(
            name=settings.SESSION_COOKIE_NAME,
            value=session_key,
            path='/',
        ))
----

(I'm sure you're capable of deleting the old version of this function from
'test_my_lists.py' and fixing up all the required imports.)


Passing arguments to management commands and fabric commands
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

As you may remember, `create_pre_authenticated_session` is defined in
our management command file, so that it can be called both locally and
against the staging server.  Here's how we adjust them to take an
email as an argument:

 
[role="sourcecode"]
.functional_tests/management/commands/create_session.py 
[source,diff]
----
 class Command(BaseCommand):
+    args = '<email>'
 
-    def handle(self, *_, **__):
-        session_key = create_pre_authenticated_session()
+    def handle(self, email, **__):
+        session_key = create_pre_authenticated_session(email)
         self.stdout.write(session_key)
 
 
-def create_pre_authenticated_session():
-    user = User.objects.create(email='edith@email.com')
+def create_pre_authenticated_session(email):
+    user = User.objects.create(email=email)
     session = SessionStore()
     session[SESSION_KEY] = user.pk
     session[BACKEND_SESSION_KEY] = settings.AUTHENTICATION_BACKENDS[0]
----


And now we adjust our fabfile and fabfile-caller for the case where we
are running this against the server:

[role="sourcecode"]
.functional_tests/fabfile.py
[source,python]
----
def create_session_on_server(email):
    session_key = run('{manage_py} create_session {email}'.format(
        manage_py=_get_manage_dot_py(env.host),
        email=email
    ))
    print(session_key)
----

And the function that calls it in 'server_tools.py' also gets a slight tweak

[role="sourcecode"]
.functional_tests/server_tools.py
[source,diff]
----
-def create_session_on_server(host):
+def create_session_on_server(host, email):
     return subprocess.check_output(
         [
             'fab',
-            'create_session_on_server',
+            'create_session_on_server:email={}'.format(email),
             '--host={}'.format(host),
             '--hide=everything,status',
         ],
----

As you can see, the command-line syntax for arguments to fab functions is
quite simple, a colon and then a variable=argument syntax.

OK, let's just see if that all works:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests.test_sharing*]
[...]
Traceback (most recent call last):
  File "/workspace/superlists/functional_tests/test_sharing.py", line 29, in
test_logged_in_users_lists_are_saved_as_my_lists
    share_box = self.browser.find_element_by_css_selector('input[name=email]')
[...]
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate
element: {"method":"css selector","selector":"input[name=email]"}' ;
----

Great! It seems to have got through creating the two user sessions, and
it gets onto an expected failure -- there is no input for an email address
of a person to share a list with on the page.

Before we continue, let's spec out just a little more detail of what we want
our sharing user story to be.  Edith will see on her list page that the list
is now "shared with" Oniciferous, and then we can have Oni log in and see the
list on his "My Lists" page, maybe in a section called "lists shared with me".

[role="sourcecode"]
.functional_tests/test_sharing.py
[source,python]
----
        share_box.send_keys('oniciferous@email.com\n')

        # The page updates to say that it's shared with Oniciferous:
        body_text = self.browser.find_element_by_tag_name('body').text
        self.assertIn('Shared with', body_text)
        self.assertIn('oniciferous@email.com', body_text)

        # Oniciferous now goes to the lists page with his browser
        self.browser = oni_browser
        self.browser.get(self.server_url)
        self.browser.find_element_by_link_text('My lists').click()

        # He sees edith's list in there!
        self.browser.find_element_by_link_text('Get help').click()
----


And finally, Oniciferous can also add things to the list:

[role="sourcecode"]
.functional_tests/test_sharing.py
[source,python]
----
        # It says that it's edith's list
        self.wait_for(
            lambda: self.assertIn(
                'List owner: edith@email.com',
                self.browser.find_element_by_tag_name('body').text
            )
        )

        # He adds an item to the list
        self.get_item_input_box().send_keys('Hi Edith!\n')

        # When edith refreshes the page, she sees Oniciferous's addition
        self.browser = edith_browser
        self.browser.refresh()
        self.check_for_row_in_list_table('2: Hi Edith!')
----

At this point we might re-run the FT to check we haven't broken anything,
and then do a commit


[subs="specialcharacters,quotes"]
----
$ *git add functional_tests*
$ *git commit -m "New FT for sharing, adjust session creation code to take an email"
----




[role="sourcecode"]
.Full diff
[source,diff]
----
diff --git a/accounts/templates/my_lists.html b/accounts/templates/my_lists.html
index 1687d99..7c29940 100644
--- a/accounts/templates/my_lists.html
+++ b/accounts/templates/my_lists.html
@@ -13,4 +13,11 @@
     {% endfor %}
     </ul>
 
+    <h2>Shared lists:</h2>
+    <ul>
+        {% for shared_list in user.shared_lists.all %}
+            <li><a href="{{ shared_list.get_absolute_url }}">{{ shared_list.item_set.all.0.text }}</a></li>
+        {% endfor %}
+    </ul>
+
 {% endblock more_content %}
diff --git a/functional_tests/base.py b/functional_tests/base.py
index cf15e6a..b3710a7 100644

+++ b/lists/models.py
@@ -3,14 +3,15 @@ from django.shortcuts import resolve_url
 from django.conf import settings
 
 
+
 class List(models.Model):
     owner = models.ForeignKey(settings.AUTH_USER_MODEL, blank=True, null=True)
+    shared_with = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='shared_lists')
 
     def get_absolute_url(self):
         return resolve_url('view_list', self.id)
 
 
-
 class Item(models.Model):
     text = models.TextField()
     list = models.ForeignKey(List)
diff --git a/lists/templates/list.html b/lists/templates/list.html
index 87a6683..91646ed 100644
--- a/lists/templates/list.html
+++ b/lists/templates/list.html
@@ -10,4 +10,30 @@
             <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>
         {% endfor %}
     </table>
+    <p><em>List owner: {{ list.owner.email }}</em></p>
+
+{% endblock %}
+
+{% block more_content %}
+    <div class="row">
+
+        <div class="col-md-8">
+            <h3>Shared with:</h3>
+            <ul>
+                {% for sharee in list.shared_with.all %}
+                    <li>{{ sharee.email }}</li>
+                {% endfor %}
+            </ul>
+        </div>
+
+
+        <div class="col-md-4">
+            <form class="form-inline" method="POST" action="{% url 'share_list' list.id %}">
+                <label for="email">Share this list:</label>
+                <input name="email" placeholder="your@friends-email.com" />
+                {% csrf_token %}
+            </form>
+        </div>
+
+    </div>
 {% endblock %}
diff --git a/lists/tests/test_models.py b/lists/tests/test_models.py
index 78ed452..a21c09c 100644
--- a/lists/tests/test_models.py
+++ b/lists/tests/test_models.py
@@ -20,6 +20,14 @@ class ListModelTest(TestCase):
         list2.full_clean()
 
 
+    def test_shared_with(self):
+        user = User.objects.create(email='a@b.com')
+        list_ = List.objects.create()
+        list_.shared_with.add('a@b.com')
+        self.assertIn(user, list_.shared_with.all())
+
+
+
 class ListAndItemModelsTest(TestCase):
 
     def test_saving_and_retrieving_items(self):
@@ -87,3 +95,4 @@ class ListAndItemModelsTest(TestCase):
         item1 = Item.objects.create(list=list1, text='some text')
         self.assertEqual(str(item1), item1.text)
 
+
diff --git a/lists/tests/test_views.py b/lists/tests/test_views.py
index 466ca8f..fbc3247 100644
--- a/lists/tests/test_views.py
+++ b/lists/tests/test_views.py
@@ -157,3 +157,24 @@ class ListViewTest(TestCase):
         self.assertContains(response, expected_error)
         self.assertTemplateUsed(response, 'list.html')
         self.assertEqual(Item.objects.all().count(), 1)
+
+
+
+class ShareListTest(TestCase):
+
+    def test_redirects_back_to_list(self):
+        list1 = List.objects.create()
+        list2 = List.objects.create()
+        response = self.client.post(
+            '/lists/%d/share' % (list2.id,),
+            {'email': 'a@b.com'}
+        )
+        self.assertRedirects(response, list2.get_absolute_url())
+
+
+    def test_sharing_list(self):
+        list_ = List.objects.create()
+        user = User.objects.create(email='a@b.com')
+        self.client.post('/lists/%d/share' % (list_.id,), {'email': 'a@b.com'})
+        self.assertIn(user, list_.shared_with.all())
+
diff --git a/lists/urls.py b/lists/urls.py
index 83f384a..424c91e 100644
--- a/lists/urls.py
+++ b/lists/urls.py
@@ -3,4 +3,5 @@ from django.conf.urls import patterns, url
 urlpatterns = patterns('',
     url(r'^(\d+)/$', 'lists.views.view_list', name='view_list'),
     url(r'^new$', 'lists.views.new_list', name='new_list'),
+    url(r'^(\d+)/share$', 'lists.views.share', name='share_list'),
 )
diff --git a/lists/views.py b/lists/views.py
index da4b082..9ce8cf4 100644
--- a/lists/views.py
+++ b/lists/views.py
@@ -26,3 +26,9 @@ def view_list(request, list_id):
         form.save()
         return redirect(list_)
     return render(request, 'list.html', {'list': list_, "form": form})
+
+
+def share(request, list_id):
+    list_ = List.objects.get(id=list_id)
+    list_.shared_with.add(request.POST['email'])
+    return redirect(list_)
----




Possible things to include:
~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Introduce page pattern?
* Admin site?
* django notifications?
* email notifications?
* talk about security/perms testing -- checking negatives.
* error-handling, what if user doesn't exist


