Chapter 5 - Saving user form submissions
--------------------------------------

We want to take the todo item input from the user and send it to the server,
so that we can save it and display it back to them later.  Let's use a fairly
standard HTML form, and a POST request.  We can use all sorts of sexy HTML5 and
JavaScript later in the book.


Dealing with POST requests
~~~~~~~~~~~~~~~~~~~~~~~~~~

To get our browser to send a POST request, we can wrap the `<input>` element in
a `<form>` tag with `method="POST"`, and the browser will take care of sending
the POST request for us.  But it does mean we have to decide what URL the POST
request should go to, and what view should deal with it.

One option is to have the same view that rendered our home page also deal with 
POST requests.  I think it keeps things simpler and clearer to separate the job
out to a separate view, with a separate URL.  That would make our form (in
'polls/templates/home.html') look like this:


[source,html]
----
    <h1>Your To-Do list</h1>
    <form method="POST" action="/lists/new">
        <input id="id_new_item" placeholder="Enter a to-do item" />
    </form>

    <table id="id_list_table">
----

Now, running our FTs gives us a slightly cryptic, unexpected error:

----
Traceback (most recent call last):
  File "functional_tests.py", line 38, in test_can_start_a_list_and_retrieve_it_later
    table = self.browser.find_element_by_id('id_list_table')
[...]
NoSuchElementException: Message: u'Unable to locate element:
{"method":"id","selector":"id_list_table"}' ;
----

When a functional test fails with an unexpected failure, there are several
things we can do to debug them.  You can add some `print` statements, for
example to display what the page body text was at that point... But one of the
go-to techniques we often use is to just pause the FT for a second, so that we
can manually take a look at what's going on.  Let's add a `time.sleep` just
before the error occurs:


[source,python]
----
    # When she hits enter, the page updates, and now the page lists
    # "1: Buy peacock feathers" as an item in a to-do list table
    inputbox.send_keys(Keys.ENTER)

    import time
    time.sleep(10)
    table = self.browser.find_element_by_id('id_list_table')
----




<<404_screenshot>>

[[404_screenshot]]
.A 404 error with Django DEBUG=True
image::images/404_on_lists_new.png[A 404 error with Django DEBUG=True]

