Chapter 2 - A basic front page for our site
-------------------------------------------

Let's adapt our test, which currently checks for the default Django "it worked"
page, and check instead for some of the things we want to see on the front
page.

Oh, it's probably time to reveal what kind of web app we're building. Well, I
thought we'd go for... a "to-do" list site!  In doing so I'm very much
following fashion - a few years ago all web tutorials were about building a
blog.  Then it was forums and polls, nowadays it's to-do lists.

The reason is that a to-do list is a really nice example. At its most basic
it is very simple indeed -- just a list of text strings -- so it's easy to
get a "minimum viable" todo app up and running.  But it can be extended in all
sorts of ways -- different persistence models, adding deadlines, reminders,
sharing with other users, and improving the client-side UI. It should allow
me to demonstrate all of the main aspects of web programming^*^, and how you
apply TDD to them.

`*` 'With the possible exception of payments integration.  But that's a world
of pain whose discovery I prefer to leave you, dear readers, to enjoy on your
own.  Let's concentrate on phase 1, "collect underpants", first.'


Using the FT to scope out a minimum viable app
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Tests that use Selenium let us drive a real web browser, so they really let
us see how the application functions from the user's point of view. That's 
why they're called ``Functional tests'' -- although different people can get
a bit precious about terminology, and might prefer the terms 'Acceptance tests'
or 'Integration tests'.  The main point is that we're looking at how the
application functions from the outside.

This means that Functional can form a sort of specification for your
application -- they tend to track what you might call a 'User Story' -- and
follow how the user might work with a particular feature and how the app
should respond to them.

So FTs should have a human-readable story that we can follow, in the shape of
comments that accompany the test code.  When creating a new FT, we can write
the comments first, to capture the key points of the User Story.

Let's do that for our minimum viable to-do list -- all it needs to do is let
the user enter items, and remember them for them for their next visit.

Open up tests.py and write a story a bit like this one:


[source,python]
----

from selenium import webdriver

browser = webdriver.Firefox()

# Edith has heard about a cool new online to-do app. She goes
# to check out its homepage
browser.get('http://localhost:8000')

# She notices the page title and header mention to-do lists
assert 'To-Do' in browser.title

# She is invited to enter a to-do item straight away

# She types "Buy peacock feathers" into a text box (Edith's hobby
# is tying fly-fishing lures)

# When she hits enter, the page updates, and now the page lists
# "1: Buy peacock feathers" as an item in a to-do list

# There is still a text box inviting her to add another item. She
# enters "Use peacock feathers to make a fly" (Edith is very methodical)

# The page updates again, and now shows both items on her list

# Edith wonders whether the site will remember her list. Then she sees
# that the site has generate a unique URL for her -- there is some
# explanatory text to that effect.

# She visits that URL - her to-do list is still there.

browser.quit()
----

You'll notice that, apart from writing the test out as comments, I've
updated the `assert` to look for the word ``To-Do'' instead of ``Django''.
That means we expect the test to fail now.  Let's try running it

First, start up the server:

....
python manage.py runserver
....

And then, in another shell, run the tests:
....
$ python tests.py 
[09/Feb/2013 11:22:21] "GET / HTTP/1.1" 200 1957
Traceback (most recent call last):
  File "tests.py", line 10, in <module>
    assert 'To-Do' in browser.title
AssertionError
....

That's what we call an ``expected fail'', which is actually good news - not
quite as good as a test that passes, but at least it's failing for the right
reason; we can have some confidence we've at least written the test correctly.

The Python standard library's unittest module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

But there's a couple of little annoyances we should probably deal with.
Firstly, the message "AssertionError" isn't very helpful - it would be nice
if the test told us what it actually found as the browser title.  Also, it's
left a Firefox window hanging around the desktop, it would be nice if it would
clear them up for us automatically.

One option would be to use the second parameter to the `assert` keyword,
something like

[source,python]
----
assert 'To-Do' in browser.title, "To-Do not found in browser title, it was " + browser.title
----

And we could also use a `try/finally` to clean up the old Firefox window. But
these sorts of problems are quite common in testing, and there are some ready-
made solutions for us in the standard library's `unittest` module. Let's use
that!

[source,python]
----

import unittest
from selenium import webdriver

class NewVisitorTest(unittest.TestCase):

    def setUp(self):
        self.browser = webdriver.Firefox()

    def tearDown(self):
        self.browser.quit()

    def test_can_start_a_todo_list_and_get_a_url_for_it(self):

        # Edith has heard about a cool new online to-do app. She goes
        # to check out its homepage
        self.browser.get('http://localhost:8000')

        # She notices the page title and header mention to-do lists
        self.assertIn('To-Do', self.browser.title)
        self.fail('Finish the test!')

        # She is invited to enter a to-do item straight away
        [...rest of comments as before]
----

Things to note:

* Tests are organised into classes, which inherit from `unittest.TestCase`.

* The main body of the test is in a method called 
  `test_can_start_a_todo_list_and_get_a_url_for_it` -- any method
  whose name starts with `test_` is a test method, and will be run by the test
  runner

* The `setUp` and `tearDown` methods.  These are special methods which get run
  before and after each test.  I'm using them to start and stop our browser --
  note that they're a bit like a try/except, in that tearDown will get run even
  if there's an error during the test itself.  No more Firefox windows left
  lying around!

* We use `self.assertIn` instead of just `assert` to make our test assertions.
  `unittest` provides lots helper functions like this to make test assertions,
  like `assertEqual`, `assertTrue`, `assertFalse`, and so on.  `self.fail` just
  fails no matter what, producing the error message given. I'm using it as
  a reminder to finish the test

* Finally, in the `if __name__ == '__main__'` clause (if you've not seen it
  before, that's how a Python script checks if it's been executed from the
  command-line, rather than just imported by another script), we call 
  `unittest.main()`, which launches the unittest test runner, which will
  automatically find test classes and methods and run them

Let's try it!
....
$ python tests.py 
F
======================================================================
FAIL: test_can_start_a_todo_list_and_get_a_url_for_it (__main__.NewVisitorTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "tests.py", line 19, in test_can_start_a_todo_list_and_get_a_url_for_it
    self.assertIn('To-Do', self.browser.title)
AssertionError: 'To-Do' not found in u'Welcome to Django'

----------------------------------------------------------------------
Ran 1 test in 4.747s

FAILED (failures=1)
....

That's a bit nicer isn't it? It tidied up our Firefox window, it gives us a
nicely formatted report of how many tests were run and how many failed, and
the `assertIn` has given us a helpful error message with useful debugging info.
Bonzer!

This is a nice point to do a commit - it's a nicely self-contained change. Do
a `git status` -- that should assure you that the only file that has changed is
'tests.py`.  Then do a `git diff`, which should tell you that 'test.py' has
changed quite substantially:
....
$ git diff
diff --git a/tests.py b/tests.py
index d333591..b0f22dc 100644
--- a/tests.py
+++ b/tests.py
@@ -1,5 +1,43 @@
+import unittest
 from selenium import webdriver
-browser = webdriver.Firefox()
-browser.get('http://localhost:8000')
-assert 'Django' in browser.title
-browser.quit()
+
+class NewVisitorTest(unittest.TestCase):
+
+    def setUp(self):
+        self.browser = webdriver.Firefox()
+
+    def tearDown(self):
+        self.browser.quit()
[...]
....

Now let's do a `git commit -a`, and add a sensible commit message, like 
``First FT specced out in comments, and now uses unittest''.


Our first web page
~~~~~~~~~~~~~~~~~~

Django is broadly structured along a classic 'Model-View-Controller (MVC)'
pattern.  Well, broadly.  It definitely has models, but its views are more like
a controller, and it's the templates that are actually the view part, but the
general idea is there.  But, irrespective of any of that, like any website,
Django's main job is to decide what to do when a user asks for a particular URL
on our site.  It does this with a file called 'urls.py' which basically maps
URLs to functions which will respond to them. 

The root 'urls.py' for the whole site is in the 'awesomelists/awesomelists' folder. Let's 
go take a look:


[source,python]
----
from django.conf.urls import patterns, include, url

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

urlpatterns = patterns('',
    # Examples:
    # url(r'^$', 'awesomelists.views.home', name='home'),
    # url(r'^awesomelists/', include('awesomelists.foo.urls')),

    # Uncomment the admin/doc line below to enable admin documentation:
    # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # url(r'^admin/', include(admin.site.urls)),
)
----


A `url` entry starts with a regular expression that defines which urls it
applies to, and goes on to say where it should send those request -- either to
a dot-notation encoded function like `awesomelists.views.home`, or maybe to another
`urls.py` file somewhere else using `include`.

Let's hijack the first entry, `'r^$'`, which basically means an empty URL,
AKA the root of the site. Instead of the dot-notation, let's define a real 
function to handle that request.  For now, all we want to do is return
some basic HTML, so let's do that:

[source,python]
----
from django.conf.urls import patterns, include, url
from django.http import HttpResponse

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

HOME_PAGE = '''
<html>
    <head><title>To-Do App</title></head>
</html>'''

def get_home_page(request):
    return HttpResponse(HOME_PAGE)

urlpatterns = patterns('',
    # Examples:
    url(r'^$', get_home_page),
    # url(r'^awesomelists/', include('awesomelists.foo.urls')),

    # Uncomment the admin/doc line below to enable admin documentation:
    # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # url(r'^admin/', include(admin.site.urls)),
)
----

That's a minimal homepage view function -- it takes a one argument called
request, and returns an `HttpResponse` containing some HTML text.  Some pretty
minimal HTML text in this case, but in TDD we only ever write enough code to
fix the current failing test, which in this case is about the browser `title`.

Let's see if it worked:

....
$ python tests.py 
F
======================================================================
FAIL: test_can_start_a_todo_list_and_get_a_url_for_it (__main__.NewVisitorTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "tests.py", line 20, in test_can_start_a_todo_list_and_get_a_url_for_it
    self.fail('Finish the test!')
AssertionError: Finish the test!

----------------------------------------------------------------------
Ran 1 test in 1.675s

FAILED (failures=1)
....

Looks like it, that's another 'expected fail'.

Not too bad! We converted our tests to using `unittest`, learnt about
`urls.py`, and we wrote a minimal view function to render some HTML for our
front page.  We can probably call that a Chapter -- as soon as we've done
a commit, of course.
....
git status # should show urls.py has changed
git diff # review the changed lines in urls.py
git commit -a # will automatically add those changes to your commit
....

