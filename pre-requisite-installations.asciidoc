[[pre-requisites]]
[preface]
Pre-requisites and assumptions
------------------------------

Here's an outline of what I'm assuming about you and what you already know,
as well as what software you'll need ready and installed on your computer.


Python 3 & programming
~~~~~~~~~~~~~~~~~~~~~~

I've written the book with beginners in mind, but if you're new to programming,
I'm assuming that you've already learned the basics of Python. So if you
haven't already, do run through a Python beginner's tutorial or get an
introductory book like <<dip,Dive Into Python>>  or <<lpthw,Learn Python The
Hard Way>>, or, just for fun, <<iwp,Invent Your Own Computer Games with
Python>>, all of which are excellent introductions.

If you're an experienced programmer but new to Python, you should get along
just fine.  Python is joyously simple to understand.

I'm using **Python 3** for this book. When I wrote it in 2013, Python 3 had
been around for several years, and the world was just about on the tipping
point at which it was the preferred choice.  You should be able to follow on
with this book on Mac, Windows or Linux. If you're on Windows, you can download
Python 3 from http://www.python.org[Python.org]. If you're on a mac, you should
already have Python 2 installed, but you'll need to install Python 3 manually.
Again, have a look at http://www.python.org[Python.org] If you're on Linux, I
trust you to figure out how to get it installed.  In the last two cases, be
clear that you know how to launch Python 3 as opposed to 2.

NOTE: This book was tested against Python 3.3. From what I can tell, everything
should work in 3.4, but do email me if you find any differences.

If for whatever reason you are stuck on Python 2, you should find that all of
the code examples can be made to work in Python 2.7, perhaps with a judiciously
placed `__future__ import` or two.

If you are thinking of using http://www.pythonanywhere.com[PythonAnywhere] (the
PaaS startup I work for), rather than a locally installed Python, you should go
and take a quick look at <<appendix1,Appendix I>> before you get started.

In any case, I expect you to have access to Python, and to know how to launch
it from a command-line (usually with the command *`python3`*), and how to
edit a Python file and run it.  Again, have a look at the 3 books I recommend
above if you're in any doubt.

NOTE: if you already have Python 2 installed, and you're worried that
installing Python 3 will break it in some way, don't!  Python 3 and 2 can
coexist peacefully on the same system, and they each store their packages in
totally different locations.  You just need to make sure that you have one
command to launch Python 3 (`python3`), and another to launch Python 2
(usually, just `python`).  Similarly, when we install pip for Python 3, 
we just make sure that its command (usually `pip3`) is identifiably
different from the Python 2 pip.


How HTML works
~~~~~~~~~~~~~~

I'm also assuming you have a basic grasp of how the web works - what HTML is,
what a POST request is.  If you're not sure about those, you'll need to find
a basic HTML tutorial -- there are a few at
http://www.webplatform.org/[www.webplatform.org/].  If you can figure out how
to create an HTML page on your PC and look at it in your browser, and what a
form is and how it might work, then you're probably OK.


//TODO: something about reading the django tutorial if you ever feel lost.

//TODO: mention need for knowledge of basic JavaScript


Required software installations:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aside from Python, you'll need:

* **Firefox** the web browser. A quick Google search will get you an installer
for whichever platform you're on.  Selenium can actually drive any of the 
major browsers, but Firefox is the easiest to use as an example because it's
reliably cross-platform and, as a bonus, is less sold out to corporate
interests.

* **Git** the version control system. This is available for any platform, 
at http://git-scm.com/[git-scm.com]. Make sure the `git` executable is
available from a command shell.

* **Pip** the Python package management tool.  On Linux, you can install
this as `python3-pip` under most package managers, or just Google for manual
download + installation instructions. On Windows and Mac, things are a touch
more complex, see boxes below.

To make sure we're using the Python3 version of pip, I'll always use `pip3`
as the executable in my command-line examples.  Depending on your platform, it 
may be `pip-3.3`.


.Windows Notes
*******************************************************************************
Windows users can sometimes feel a little neglected, since OS X and Linux make
it so easy to forget there's a world outside the Unix paradigm.  Backslashes
as directory separators?  Drive letters?  What?   Still, it is absolutely
possible to follow along with this book on Windows.  Here are a few tips:

1. When you install Git on Windows, make sure you choose **Run Git and included
Unix tools from the Windows command prompt**. You'll then get access to 
a program called "Git Bash". Use this as your main command prompt and you'll
get all the useful GNU command-line tools like `ls`, `touch` and `grep`, plus
forward-slashes directory separators.

2. After you install Python 3, you'll need to add two directories to your
system PATH: the main Python directory (eg 'c:\Python33') *and* its Scripts
subfolder, 'c:\Python33\Scripts'. You can do this via 'Control Panel' -->
'System' --> 'Advanced' --> 'Environment Variables'. There are some
instructions at http://docs.python.org/3/using/windows.html[Python.org]


3. On windows, Python 3's executable is called `python.exe`, which is exactly
the same as Python 2.  To avoid any confusion, create a symlink in the Git-Bash
binaries folder, like this:
+
----
ln -s /c/Python33/python.exe /bin/python3
----
+
That will only work in Git-Bash, not in the regular Dos command prompt.

4. To install pip, go to http://www.pip-installer.org/[www.pip-installer.org], 
and find the installation instructions. At the time of writing, it involved
downloading a file and then executing it with `python3 get-pip.py`. **Make sure
you use `python3` when you run the setup script**. When Python 3.4 comes out,
this should all get a little simpler. We all look forward to that day!

TIP: The test for all this is that you should be able to go to a command prompt
and just run `python3` from any folder.  Once you've installed pip and Django
(see below), you should also be able to just run `pip3` and `django-admin.py`
from any folder too.
*******************************************************************************


.MacOS Notes
*******************************************************************************
MacOS is a bit more sane than Windows, but can still be a little twitchy,
particularly as regards getting `pip3` installed.  

My recommendation is to **use Homebrew**; it seems to be a requirement to get 
a decent development setup on a Mac anyway.  Check out
http://brew.sh//[brew.sh] for installation instructions.  Once installed, it'll
prompt you to go through a few setup steps. You'll need to install XCode from
the app store, which means signing up for a Mac developer ID.
//TODO: look for a non-homebrew way...

Once that's all done, you'll be able to install Python 3 and Pip with one
simple command:

----
brew install python3
----

Similarly to windows, the test for all this is that you should be able to open
a terminal and just run `python3` from anywhere.  Once you've installed pip and
Django (see below), you should also be able to just run `pip3` and
`django-admin.py` from any folder too.
*******************************************************************************



[[git-default-editor]]
Git's default editor, and other basic Git config
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

I'll provide step-by-step instructions for Git, but it may be a good idea to
get a bit of configuration done now.  For example, when you do your first
commit, by default 'vi' will pop up, at which point you may have no idea what
to do with it. Well, much as 'vi' has two modes, you then have two choices. One
is to learn some minimal vi commands '(press `i` to go into insert mode,
type your text, presc `Esc` to go back to normal mode, then write the file and
quit with `:wq<Enter>`)'. You'll then have joined the great fraternity of
people who know this ancient, revered text editor.

Or you can point-blank refuse to be involved in such a ridiculous throwback to
the 1970s, and configure git to use an editor of your choice. Quit vi using
`<Esc>` followed by `:q!`, then change your git default editor. See the Git
documentation on 
http://git-scm.com/book/en/Customizing-Git-Git-Configuration[basic git
configuration]


NOTE: Did these instructions not work for you? Or have you got better ones? Get
in touch!  obeythetestinggoat@gmail.com


Required Python modules:
^^^^^^^^^^^^^^^^^^^^^^^^

Once you have 'pip' installed, it's trivial to install new Python modules.
We'll install some as we go, but there are a couple we'll need right from
the beginning, so you should install them right away:

* **Django 1.7** (`pip3 install django==1.7`). This is our web
framework. You should make sure you have version 1.7 installed and
that you can access the `django-admin.py` executable from a command-line.  The
https://docs.djangoproject.com/en/1.7/intro/install/[Django documentation] has
some installation instructions if you need help.

NOTE: As of March 2014, Django 1.7 was still in beta. If the above command
doesn't work, use 
`pip3 install https://www.djangoproject.com/download/1.7b1/tarball/`
//TODO: remove on proper release.  And add comment re future versions??


* **Selenium** (`pip3 install --upgrade selenium==2.39`), a browser 
automation tool which we'll use to drive what are called functional tests. 

// Make
// sure you have the absolute latest version installed.  Selenium is engaged in a
// permanent arms race with the major browsers, trying to keep up with the latest
// features. If you ever find Selenium misbehaving for some reason, the answer is
// often that it's a new version of Firefox and you need to upgrade to the latest
// Selenium...

WARNING: We're using version 2.39 because the latest version (2.41) has some
    https://code.google.com/p/selenium/issues/detail?id=7073[bugs], as of March
    2014. 
//TODO: check on this periodically.

Unless you know what you're doing, don't worry about using a `virtualenv`. 
We'll talk about them later in the book, in chapter 8.


.A note on IDEs
*******************************************************************************
If you've come from the world of Java or .NET, you may be keen to use an IDE
for your Python coding.  They have all sorts of useful tools, including VCS
integration, and there are some excellent ones out there for Python.  I used
one myself when I was starting out, and I found it very useful for my first 
couple of projects.

Can I suggest (and it's only a suggestion) that you 'don't' use an IDE, at
least for the duration of this tutorial? IDEs are much less necessary in the
Python world, and I've written this whole book with the assumption that you're
just using a basic text editor and a command-line.  Sometimes, that's all you
have -- when you're working on a server for example -- so it's always worth
learning how to use the basic tools first and understanding how they work.
It'll be something you always have, even if you decide to go back to your IDE
and all its helpful tools, after you've finished this book.
*******************************************************************************

