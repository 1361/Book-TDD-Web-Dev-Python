Continuous Integration (CI)
---------------------------


As our site grows, it takes longer and longer to run all of our Functional
tests.  If this continues, the danger is that we're going to stop bothering.

Rather than let that happen, we can automate the running of functional tests
by setting up a "Continuous Integration" or CI server.  That way, in day-to-day
development, we can just run the FT that we're working on at that time, and
rely on the CI server to run all the test automatically, and let us know if
we've broken anything accidentally.  The unit tests should stay fast enough
that we can keep running them every few seconds.

The CI server of choice these days is called Jenkins, so let's get it set up.


Installing Jenkins
~~~~~~~~~~~~~~~~~~

There are several hosted-CI services out there that essentially provide you
with a Jenkins server, ready to go.  I've come across Travis, Circle-CI,
ShiningPanda, and there are probably lots more.  I'm going to assume we're
going to install everything on a server we control.

NOTE: it's not a good idea to install Jenkins on the same server as our
staging or production servers.  Apart from anything else, we may want 
Jenkins to be able to reboot the staging server!

    sudo apt-get install jenkins

While we're at we'll install a few other dependencies:

    sudo apt-get install git firefox python3 python-virtualenv xvfb

By default, jenkins runs on port 8080, but it only listens on the local
network.  Here's how to set it up so that it's visible on the public 
internet:


.lists/tests.py
[source,bash]
----
    # Listen address for HTTP connector
    HTTP_HOST=jenkins.ottg.eu
----

And then restart it with a `sudo restart jenkins`.  You should then be
able to visit it at the URL for your server:

.A butler! How quaint...
image::images/jenkins_first_page.png["Jenkins' default welcome screen"]


Configuring Jenkins security
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The first thing we'll want to do is set up some authentication, so that
anyone can't just come and mess with our server:

.Locking it down...
image::images/jenkins_first_page.png["Jenkins' default welcome screen"]

* Manage Jenkins
* Configure Global Security
* Enable security
* Jenkins' own user database
* Matrix-based security
* Disable all permissions for Anonymous
* And add a user for yourself
* The next screen offers you the option to create an account that matches that
username, and set a password


Adding required plugins
^^^^^^^^^^^^^^^^^^^^^^^

* Manage Jenkins --> Manage Plugins --> Available
* We'll want the plugins for:
    * Git
    * ShiningPanda
    * Xvfb


.Installing plugins...
image::images/jenkins_installing_plugins.png["Jenkins installing plugins"]

Restart afterwards - either using the tick-box on that last screen, or
from the command-line with a `sudo restart jenkins`.


Telling jenkins where to find Python 3
++++++++++++++++++++++++++++++++++++++

* Manage Jenkins --> Configure System
* Python --> Python installations --> Add Python 

.Where did I leave that Python?
image::images/jenkins_adding_python3.png["Adding Python 3"]


Setting up our project
~~~~~~~~~~~~~~~~~~~~~~

Now we've got the basic jenkins configured, let's set up our project.

* New Job --> Build a free-style software project 

* Add the Git repo
* Set it to poll every hour (the help text here is helpful)
* Run the tests inside a Python 3 virtualenv
* Run the unit tests and functional tests separately


.Get it from git
image::images/jenkins_set_git_repo.png["Setting the git repo"]


.Poll Github for changes
image::images/jenkins_poll_scm.png["Config polling github"]


.Virtualenv build steps
image::images/jenkins_build_in_virtualenv.png["Adding Python 3"]



First build!
~~~~~~~~~~~~

Hit "Build Now!", then go and take a look at the "Console Output". You
should see something like this:

----
Started by user harry
Building in workspace /var/lib/jenkins/jobs/Superlists/workspace
Fetching changes from the remote Git repository
Fetching upstream changes from https://github.com/hjwp/book-example.git
Checking out Revision d515acebf7e173f165ce713b30295a4a6ee17c07 (origin/master)
[workspace] $ /bin/sh -xe /tmp/shiningpanda7260707941304155464.sh
+ pip install -r requirements.txt
Requirement already satisfied (use --upgrade to upgrade): Django==1.5.1 in /var/lib/jenkins/shiningpanda/jobs/ddc1aed1/virtualenvs/d41d8cd9/lib/python3.3/site-packages (from -r requirements.txt (line 1))
Downloading/unpacking South==0.8.2 (from -r requirements.txt (line 2))
  Running setup.py egg_info for package South
    
Requirement already satisfied (use --upgrade to upgrade): gunicorn==17.5 in /var/lib/jenkins/shiningpanda/jobs/ddc1aed1/virtualenvs/d41d8cd9/lib/python3.3/site-packages (from -r requirements.txt (line 3))
Downloading/unpacking requests==2.0.0 (from -r requirements.txt (line 4))
  Running setup.py egg_info for package requests
    
Installing collected packages: South, requests
  Running setup.py install for South
    
  Running setup.py install for requests
    
Successfully installed South requests
Cleaning up...
+ python manage.py test lists accounts
...................................................
 ---------------------------------------------------------------------
Ran 51 tests in 0.323s

OK
Creating test database for alias 'default'...
Destroying test database for alias 'default'...
+ python manage.py test functional_tests
ImportError: No module named 'selenium'
Build step 'Virtualenv Builder' marked build as failure
FATAL: hudson/tasks/Mailer$UserProperty
java.lang.NoClassDefFoundError: hudson/tasks/Mailer$UserProperty
	at hudson.plugins.git.GitChangeLogParser.parseCommit(GitChangeLogParser.java:71)
	at hudson.plugins.git.GitChangeLogParser.parse(GitChangeLogParser.java:55)
	at hudson.plugins.git.GitChangeLogParser.parse(GitChangeLogParser.java:45)
	at hudson.plugins.git.GitChangeLogParser.parse(GitChangeLogParser.java:26)
	at hudson.model.AbstractBuild.calcChangeSet(AbstractBuild.java:920)
	at hudson.model.AbstractBuild.getChangeSet(AbstractBuild.java:894)
	at hudson.model.AbstractBuild.getCulprits(AbstractBuild.java:418)
	at hudson.model.AbstractBuild.getCulprits(AbstractBuild.java:415)
	at hudson.model.AbstractBuild$AbstractBuildExecution.post(AbstractBuild.java:731)
	at hudson.model.Run.execute(Run.java:1600)
	at hudson.model.FreeStyleBuild.run(FreeStyleBuild.java:46)
	at hudson.model.ResourceController.execute(ResourceController.java:88)
	at hudson.model.Executor.run(Executor.java:237)
Caused by: java.lang.ClassNotFoundException: hudson.tasks.Mailer$UserProperty
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 13 more
----

Ah.  We need selenium in our virtualenv.

TIP: some people like to use a file called 'test-requirements.txt' to specify 
packages that are needed for the tests, but not the main app.

Let's add that to our build steps:

    pip install -r requirements.txt
    pip install selenium
    python manage.py test accounts lists
    python manage.py test functional_tests

Now what?

----
  File "/var/lib/jenkins/shiningpanda/jobs/ddc1aed1/virtualenvs/d41d8cd9/lib/python3.3/site-packages/selenium/webdriver/firefox/firefox_binary.py", line 100, in _wait_until_connectable
    self._get_firefox_output())
selenium.common.exceptions.WebDriverException: Message: 'The browser appears to have exited before we could connect. The output was: b"\\n(process:19757): GLib-CRITICAL **: g_slice_set_config: assertion \'sys_page_size == 0\' failed\\nError: no display specified\\n"' 
----


