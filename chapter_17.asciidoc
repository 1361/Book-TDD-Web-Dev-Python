Finishing "my lists": an exercise for the reader
------------------------------------------------

In this chapter, rather than showing you explicitly what to do, I'm 
going to let you write your tests and code by yourself.  Don't worry,
you won't be totally on your own!  I'll start by fleshing out an FT for you
to work against, and then give an outline of the steps to take, as well
as some hints and tips.


TODO: consider changing this into the "outside-in TDD" chapter, and then
making the sharing chapter into the exercise for the reader...


The FT for "My Lists"
~~~~~~~~~~~~~~~~~~~~~


[role="sourcecode"]
.functional_tests/test_my_lists.py
[source,python]
----
    def test_logged_in_users_lists_are_saved_as_my_lists(self):
        # Edith is a logged-in user
        self.create_pre_authenticated_session()

        # She goes to the home page and starts a list
        self.browser.get(self.server_url)
        self.get_item_input_box().send_keys('Reticulate splines\n')
        self.get_item_input_box().send_keys('Immanentize eschaton\n')
        first_list_url = self.browser.current_url

        # She notices a "My lists" link, for the first time.
        self.browser.find_element_by_link_text('My lists').click()

        # She sees that her list is in there, named according to its
        # first list item
        self.browser.find_element_by_link_text('Reticulate splines').click()
        self.assertEqual(self.browser.current_url, first_list_url)

        # She decides to start another list, just to see
        self.browser.get(self.server_url)
        self.get_item_input_box().send_keys('Click cows\n')
        second_list_url = self.browser.current_url

        # Under "my lists", her new list appears
        self.browser.find_element_by_link_text('My lists').click()
        self.browser.find_element_by_link_text('Click cows').click()
        self.assertEqual(self.browser.current_url, second_list_url)

        # She logs out.  The "My lists" option disappears
        self.browser.find_element_by_id('id_logout').click()
        self.assertEqual(
            self.browser.find_elements_by_link_text('My lists'),
            []
        )
----

If you run it, the first error should look like this:

----
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate
element: {"method":"link text","selector":"My lists"}' ; Stacktrace: 
----


Overview
~~~~~~~~

To implement this, we'll need:

* A new template 'my_lists.html', and some tweaks to 'base.html'
* An optional foreign key on the List model -- so that we can save the list's
  owner as an attribute on lists created by logged-in users.
* To change the `new_list` view, with optional addition of `list_.owner` from
  `request.user`. 
* And/or change `ItemForm.save` to take the `request.user` as an argument
* A new view + URL entry in 'accounts', `my_lists`.

There aren't really any new Django concepts here, or any new testing concepts,
so my hope is that you have all the tools to do it on your own.


Outline of steps to take
~~~~~~~~~~~~~~~~~~~~~~~~

Here's the broad outline of how thing should play out:

* The FT is failing because there is no "my lists" link on the home page
  for a logged-in user

* We'll want to adjust 'home.html' to include a link, but we don't
  have a URL or view to point it to yet.

* So, we write a first unit test for the new URL and view, checking
  that it uses a new template: 'my_lists.html'.

* We can also start fleshing out this template: it will need access to
  the user whose lists we want to list (maybe as a variable called `owner`).
  This will mean a second unit test, and it may also mean some tweaks to
  'base.html' so that the inheritance hierarchy works. I used a new 
  `{% block %}`, but you might find other ways...

* By now we can probably get a working page and URL, but it won't yet
  be able to display lists owned by a user.  For that we'll need to
  make a change at the model layer - we need to be able to assign an
  optional owner to a list.  This means a new unit test in
  `lists/test_models.py`.

* We can then add an extra test to the my lists view tests, to check
  that, if we set up a user who owns several lists, they are 
  displayed in the template.  We can also check that unrelated lists
  are not displayed. You could either pass the lists in as a template
  variable, or use the Django ORM with `{{ owner.list_set.all }}`.

* Finally, we need to make sure that new lists created by a logged-in
  user are saved with their `.owner` attribute set to the user.  That's
  a change to the `new_list` view.

* You could leave this code in the view function, but it might be neater
  to have it inside the form's save method.  That would mean a tweak to the 
  forms tests as well.


Some tests you might want to write
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Here are the new unit tests I had to write -- depending on the specific
choices you make, yours might be slightly different, but most of them
should be the same or similar:

[role="sourcecode"]
.unit test class and method names
[source,python]
----
class MyListsViewTest(TestCase):
    def test_uses_my_lists_template(self):
    def test_passes_user_in_context(self):
    def test_template_displays_lists_using_first_item_text(self):

class ItemFormTest(TestCase):
    def test_form_save_sets_owner_if_real_user(self):
    def test_form_save_ignores_anon_user(self):

class ListModelTest(TestCase):
    def test_get_absolute_url(self):
    def test_can_optionally_set_owner(self):

class NewListTest(TestCase):
    def test_POST_from_real_user_sets_owner_on_list(self):
----

Hints and tips
~~~~~~~~~~~~~~

Here's a couple more tips:

* You can't really use `self.client.login` in the view tests.  I called the 
  raw view function instead (like we did a couple of times in the last chapter)

* You'll probably find the `AnonymousUser` class useful for testing what should
  happen with non-logged-in users. It's in `django.contrib.auth.models`.

The FT should be your guide as to whether everything works OK.  Feel free to
compare your solution, against my implementation
https://github.com/hjwp/book-example/tree/chapter_15[on GitHub], and let me
know how you get on!

NOTE: I really need feedback about this section.  Did you find it too hard?
Are there any specific extra hints could I have given you that would have kept
you on the right track?  Did you find yourself doing things differently?  Let
me know!
//TODO: remove me



I'll tell you what though, those FTs are taking an annoyingly long time to 
run though.  I wonder if there's something we can do about that?


