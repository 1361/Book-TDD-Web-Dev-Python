Continuous Integration (CI)
---------------------------


As our site grows, it takes longer and longer to run all of our Functional
tests.  If this continues, the danger is that we're going to stop bothering.

Rather than let that happen, we can automate the running of functional tests
by setting up a "Continuous Integration" or CI server.  That way, in day-to-day
development, we can just run the FT that we're working on at that time, and
rely on the CI server to run all the test automatically, and let us know if
we've broken anything accidentally.  The unit tests should stay fast enough
that we can keep running them every few seconds.

The CI server of choice these days is called Jenkins. It's a bit Java, a bit
crashy, a bit ugly, but it's what everyone uses, and it has a great plugin
ecosystem, so let's get it up and running.


Installing Jenkins
~~~~~~~~~~~~~~~~~~

There are several hosted-CI services out there that essentially provide you
with a Jenkins server, ready to go.  I've come across Travis, Circle-CI,
ShiningPanda, and there are probably lots more.  I'm going to assume we're
going to install everything on a server we control.

NOTE: It's not a good idea to install Jenkins on the same server as our
staging or production servers.  Apart from anything else, we may want 
Jenkins to be able to reboot the staging server!

We'll install latest version from official jenkins apt repo, because the 
Ubuntu default still has a few annoying bugs with locale/unicode support,
and it also doesn't set itself up to listen on the public internet by default.

    wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
    sudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
    sudo apt-get update
    sudo apt-get install jenkins

While we're at we'll install a few other dependencies:

    sudo apt-get install git firefox python3 python-virtualenv xvfb

You should then be able to visit it at the URL for your server on port `8080`:

.A butler! How quaint...
image::images/jenkins_first_page.png["Jenkins' default welcome screen"]


Configuring Jenkins security
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The first thing we'll want to do is set up some authentication, so that
anyone can't just come and mess with our server:

.Locking it down...
image::images/jenkins_security_config.png["Jenkins' default welcome screen"]

* Manage Jenkins
* Configure Global Security
* Enable security
* Jenkins' own user database
* Matrix-based security
* Disable all permissions for Anonymous
* And add a user for yourself
* The next screen offers you the option to create an account that matches that
username, and set a password


Adding required plugins
^^^^^^^^^^^^^^^^^^^^^^^

* Manage Jenkins --> Manage Plugins --> Available
* We'll want the plugins for:
    * Git
    * ShiningPanda
    * Xvfb


.Installing plugins...
image::images/jenkins_installing_plugins.png["Jenkins installing plugins"]

Restart afterwards - either using the tick-box on that last screen, or
from the command-line with a `sudo restart jenkins`.


Telling jenkins where to find Python 3
++++++++++++++++++++++++++++++++++++++

* Manage Jenkins --> Configure System
* Python --> Python installations --> Add Python 

.Where did I leave that Python?
image::images/jenkins_adding_python3.png["Adding Python 3"]


Setting up our project
~~~~~~~~~~~~~~~~~~~~~~

Now we've got the basic jenkins configured, let's set up our project.

* New Job --> Build a free-style software project 

* Add the Git repo
* Set it to poll every hour (the help text here is helpful)
* Run the tests inside a Python 3 virtualenv
* Run the unit tests and functional tests separately


.Get it from git
image::images/jenkins_set_git_repo.png["Setting the git repo"]


.Poll Github for changes
image::images/jenkins_poll_scm.png["Config polling github"]


.Virtualenv build steps
image::images/jenkins_build_in_virtualenv.png["Adding Python 3"]



First build!
~~~~~~~~~~~~

Hit "Build Now!", then go and take a look at the "Console Output". You
should see something like this:

----
Started by user harry
Building in workspace /var/lib/jenkins/jobs/Superlists/workspace
Fetching changes from the remote Git repository
Fetching upstream changes from https://github.com/hjwp/book-example.git
Checking out Revision d515acebf7e173f165ce713b30295a4a6ee17c07 (origin/master)
[workspace] $ /bin/sh -xe /tmp/shiningpanda7260707941304155464.sh
+ pip install -r requirements.txt
Requirement already satisfied (use --upgrade to upgrade): Django==1.5.1 in
/var/lib/jenkins/shiningpanda/jobs/ddc1aed1/virtualenvs/d41d8cd9/lib/python3.3/site-packages
(from -r requirements.txt (line 1))
Downloading/unpacking South==0.8.2 (from -r requirements.txt (line 2))
  Running setup.py egg_info for package South
    
Requirement already satisfied (use --upgrade to upgrade): gunicorn==17.5 in
/var/lib/jenkins/shiningpanda/jobs/ddc1aed1/virtualenvs/d41d8cd9/lib/python3.3/site-packages
(from -r requirements.txt (line 3))
Downloading/unpacking requests==2.0.0 (from -r requirements.txt (line 4))
  Running setup.py egg_info for package requests
    
Installing collected packages: South, requests
  Running setup.py install for South
    
  Running setup.py install for requests
    
Successfully installed South requests
Cleaning up...
+ python manage.py test lists accounts
...................................................
 ---------------------------------------------------------------------
Ran 51 tests in 0.323s

OK
Creating test database for alias 'default'...
Destroying test database for alias 'default'...
+ python manage.py test functional_tests
ImportError: No module named 'selenium'
Build step 'Virtualenv Builder' marked build as failure
FATAL: hudson/tasks/Mailer$UserProperty
java.lang.NoClassDefFoundError: hudson/tasks/Mailer$UserProperty
    at hudson.plugins.git.GitChangeLogParser.parseCommit(GitChangeLogParser.java:71)
    at hudson.plugins.git.GitChangeLogParser.parse(GitChangeLogParser.java:55)
    at hudson.plugins.git.GitChangeLogParser.parse(GitChangeLogParser.java:45)
    at hudson.plugins.git.GitChangeLogParser.parse(GitChangeLogParser.java:26)
    at hudson.model.AbstractBuild.calcChangeSet(AbstractBuild.java:920)
    at hudson.model.AbstractBuild.getChangeSet(AbstractBuild.java:894)
    at hudson.model.AbstractBuild.getCulprits(AbstractBuild.java:418)
    at hudson.model.AbstractBuild.getCulprits(AbstractBuild.java:415)
    [...]
----

Ah.  We need selenium in our virtualenv.

TIP: some people like to use a file called 'test-requirements.txt' to specify 
packages that are needed for the tests, but not the main app.

Let's add that to our build steps:

    pip install -r requirements.txt
    pip install selenium
    python manage.py test accounts lists
    python manage.py test functional_tests

Now what?

----
  File
  "/var/lib/jenkins/shiningpanda/jobs/ddc1aed1/virtualenvs/d41d8cd9/lib/python3.3/site-packages/selenium/webdriver/firefox/firefox_binary.py",
  line 100, in _wait_until_connectable
    self._get_firefox_output())
selenium.common.exceptions.WebDriverException: Message: 'The browser appears to
have exited before we could connect. The output was: b"\\n(process:19757):
GLib-CRITICAL **: g_slice_set_config: assertion \'sys_page_size == 0\'
failed\\nError: no display specified\\n"' 
----


Setting up a virtual display so the FTs can run headless
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As you can see from the traceback, Firefox is unable to start because the
server doesn't have a display.

There are two ways to deal with this problem. The first is to switch to using
a headless browser, like PhantomJS or SlimerJS.  Those tools definitely have
their place -- they're faster, for one thing -- but they also have
disadvantages.  The first is that they're not "real" web browsers, so you can't
be sure you're going to catch all the strange quirks and behaviours of the
actual browsers your users use.  The second is that they behave quite
differently inside Selenium, and will require substantial amounts of re-writing
of FT code.

TIP: I would look into using headless browsers as a "dev-only" tool, to speed
up the running of FTs on the developer's machine, while the tests on the CI
server use actual browsers.

The alternative is to set up a virtual display:  we get the server to pretend
it has a screen attached to it, so Firefox runs happily. There's a few tools
out there to do this, we'll use one called "Xvfb" (X Virtual Framebuffer) 
because it's easy to install and use, and because it has a convenient Jenkins
plug-in

TIP: check out https://pypi.python.org/pypi/PyVirtualDisplay[pyvirtualdisplay]
as a way of controlling virtual displays from Python.

We go back to our project and hit "Configure" again, then find the section
called "Build Environment".  Using the virtual display is as simple as
ticking the box marked "Start Xvfb before the build, and shut it down after.":

.Sometimes config is easy
image::images/jenkins_start_xvfb.png["Tickbox saying we want Xvfb"]


The build does much better now,

----
[...]
Xvfb starting$ /usr/bin/Xvfb :2 -screen 0 1024x768x24 -fbdir
/var/lib/jenkins/2013-11-04_03-27-221510012427739470928xvfb
[...]
+ python manage.py test lists accounts
...................................................
 ---------------------------------------------------------------------
Ran 51 tests in 0.410s

OK
Creating test database for alias 'default'...
Destroying test database for alias 'default'...
+ pip install selenium
Requirement already satisfied (use --upgrade to upgrade): selenium in
/var/lib/jenkins/shiningpanda/jobs/ddc1aed1/virtualenvs/d41d8cd9/lib/python3.3/site-packages
Cleaning up...

+ python manage.py test functional_tests
.....E.
======================================================================
ERROR: test_logged_in_users_lists_are_saved_as_my_lists (functional_tests.tests.test_my_lists.MyListsTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File
"/var/lib/jenkins/jobs/superlists/workspace/functional_tests/tests/test_my_lists.py",
line 43, in test_logged_in_users_lists_are_saved_as_my_lists
    self.browser.find_element_by_link_text('Reticulate splines').click()
    [...]
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate element: {"method":"link text","selector":"Reticulate splines"}' ; Stacktrace: 
[...]
 ---------------------------------------------------------------------
Ran 7 tests in 89.275s

FAILED (errors=1)
Creating test database for alias 'default'...
[{'secure': False, 'domain': 'localhost', 'name': 'sessionid', 'expiry':
1920011311, 'path': '/', 'value': 'a8d8bbde33nreq6gihw8a7r1cc8bf02k'}]
Destroying test database for alias 'default'...
Build step 'Virtualenv Builder' marked build as failure
Xvfb stopping
Finished: FAILURE
----

Pretty close!  To debug that failure, we'll need screenshots though.


Taking screenshots
~~~~~~~~~~~~~~~~~~

To be able to debug unexpected failures that happen on a remote PC, it
would be good to see a picture of the screen at the moment of the failure,
and maybe also a dump of the HTML of the page.  We can do that using some
custom logic in our FT class teardown. We have to do a bit of introspection of
`unittest` internals, but his will work:

[role="sourcecode"]
.functional_tests/tests/base.py
[source,python]
----
    def tearDown(self):
        if not self._outcomeForDoCleanups.success:
            self.take_screenshot()
            self.dump_html()

        self.browser.quit()
        super().tearDown()
----

Then we use some selenium methods, `get_sreenshot_as_file` and
`browser.page_source` for our image and HTML dumps:

[role="sourcecode"]
.functional_tests/tests/base.py
[source,python]
----
    def take_screenshot(self):
        filename = 'seleniumscreenshot-{}.png'.format(self._get_filename())
        print('screenshotting to', filename)
        self.browser.get_screenshot_as_file(filename)


    def dump_html(self):
        filename = 'seleniumhtml-{}.html'.format(self._get_filename())
        print('dumping page HTML to', filename)
        with open(filename, 'w') as f:
            f.write(self.browser.page_source)
----

And finally here's a way of generating a filename, which includes the
name of the test and its class, as well as a timestamp:

[role="sourcecode"]
.functional_tests/tests/base.py
[source,python]
----
    def _get_filename(self):
        timestamp = datetime.now().isoformat().replace(':', '.')
        return '{}.{}-{}'.format(
            self.__class__.__name__, self._testMethodName, timestamp
        )
----



When we re-run the build on Jenkins, we see this:

screenshotting to /tmp/seleniumscreenshot-MyListsTest.test_logged_in_users_lists_are_saved_as_my_lists-2013-11-05T05.02.03.634488.png

dumping page HTML to /tmp/seleniumhtml-MyListsTest.test_logged_in_users_lists_are_saved_as_my_lists-2013-11-05T05.02.03.695734.html


We can go and visit these in the workspace:



TODO - add jenkins plugin to display them?

TODO: Appendix on switching to PhantomJS?  Discuss wider use of "wait-for", etc

