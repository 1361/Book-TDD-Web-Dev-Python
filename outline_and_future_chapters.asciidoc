Outline to date & future chapters plan
--------------------------------------

Thanks for reading this far!  I'd really like your input on this too:  What do
you think of the book so far, and what do you think about the topics I'm
proposing to cover in the list below?  Email me at
obeythetestinggoat@gmail.com!


Chapter 0 / Preface

BOOK 1: Building a minimum viable app with TDD
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Already done:

* Chapter 1 - Getting Django set up using a Functional Test
* Chapter 2 - Extending our FT using the unittest module
* Chapter 3 - Testing a simple home page with unit tests
* Chapter 4 - What are we doing with all these tests?
* Chapter 5 - Saving form submissions to the database
* Chapter 6 - Getting to the minimum viable site

TODO:

Chapter 7: Releasing the site (?)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* a bit of tidying up, CSS, making it pretty
* bootstrap or A.N. other?
* deploy script
* adapt FTs to test a staging site
* check: that old data is preserved, that static files work
* FT for 404 and 500 pages?
* email integration, other deployment issues

* repeatable process for staging and live
* virtualenv
* requirements.txt
* symlinks?



BOOK 2: Growing the site
~~~~~~~~~~~~~~~~~~~~~~~~

Chapter 8: User Authentication + the admin site (planned)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* users want to be able to view 'their' todos
* URLs would need to be less guessable
* related field on list for owner
* FT Sign up, login/logout
* Explain the admin site
* Fixtures?
* "claim" an existing list (?)


Chapter 9: A more complex model, forms and validation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* mark completed
* notes field
* validation: check that items aren't duplicates

Chapter 10: javascript
^^^^^^^^^^^^^^^^^^^^^^

* show / hide notes field
* choose JS testing framework (QUnit, YUI / other?)


Chapter 11: Ajax
^^^^^^^^^^^^^^^^

* use markdown for notes
* dynamic previews, like on SO

Chapter 12: sharing lists
^^^^^^^^^^^^^^^^^^^^^^^^^

* email notifications
* django notifications (?)

Chapter 13: oauth
^^^^^^^^^^^^^^^^^

* passwords suck!
* mocking external web service to check if broken



More/Other possible contents
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

*Django stuff:*

* pagination
* switch database to eg postgres
* South
* FT for 404 and 500 pages


*Testing topics to work in*

* how to read a traceback (prob. insert back into an earlier chapter)
* snapshot_on_error
* what to test in templates
* fixtures (factory boy?)
* mocking (python mock)
* selenium page pattern
* JS: mocking external web service to simulate errors


*External systems integration*

* gravatar
* Mozilla persona?



BOOK 3: Trendy stuff
~~~~~~~~~~~~~~~~~~~~

Chapter 14: CI
^^^^^^^^^^^^^^

Chapter 15 & 16: More Javascript
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* MVC tool (backbone / angular)
* single page website (?) or bottomless web page?
* switching to a full REST API
* HTML5, eg LocalStorage
* Encryption - client-side decrypt lists, for privacy?


Chapter 17: Async
^^^^^^^^^^^^^^^^^

* websockets
* tornado/gevent (or sthing based on Python 3 async??)


Chapter 18: NoSQL
^^^^^^^^^^^^^^^^^

* obligatory discussion of NoSQL and MongoDB
* describe installation, particularities of testing


Chapter 19: Caching
^^^^^^^^^^^^^^^^^^^

* unit testing `memcached`
* Functionally testing performance
* Apache `ab` testing

5/6 chapters?


Appendices
~~~~~~~~~~


Other possible appendix(?) topics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Deployment. Discuss a few options -- pythonanywhere, heroku, ec2
* BDD
* Mobile (use selenium, link to using bootstrap?)
* Payments... Some kind of shopping cart?


Existing appendix I: PythonAnywhere
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Running Firefox Selenium sessions with pyVirtualDisplay
* Setting up Django as a PythonAnywhere web app
* Cleaning up /tmp
* Screenshots

