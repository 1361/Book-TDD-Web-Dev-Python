Outline to date & future chapters plan
--------------------------------------

Thanks for reading this far!  I'd really like your input on this too:  What do
you think of the book so far, and what do you think about the topics I'm
proposing to cover in the list below?  Email me at
obeythetestinggoat@gmail.com!


Chapter 0 / Preface
~~~~~~~~~~~~~~~~~~~

* Why I wrote a book about Test-Driven Development
* Aims of this book
* Outline
* Some pre-requisites

BOOK 1 - Getting a minimum viable app with TDD
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Chapter 1 - Getting Django set up using a Functional Test
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Obey the testing goat: Do nothing until you have a test
* Getting Django up and running
* Starting a Git repository


Chapter 2 - Extending our FT using the unittest module
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Using the FT to scope out a minimum viable app
* The Python standard library's `unittest` module
* "We have a word for comments"...


Chapter 3 - Testing a simple home page with unit tests
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* Our first Django app, and our first unit test
* Unit tests, and how they differ from Functional tests
* Unit testing in Django
* Django's MVC, URLs and view functions
* At last!  We actually write some application code!
* urls.py
* Unit testing a view


Chapter 4 - What are we doing with all these tests?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* A moment's reflection - what are we up to?
* Using Selenium to test user interactions
* The "Don't test constants" rule, and templates to the rescue
* On refactoring
* A little more of our front page


Chapter 5 - Saving form submissions to the database
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* Wiring up form
* Django ORM, single model for items
* saving the post, redirecting afterwards
* rendering items in template


Chapter 6: Getting to the MVP
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* move to liveservertestcase
* fts becomes an app
* change FT to show a second user?
* specify each list should have its own url
* use Django test client


Chapter 7: User Authentication + the admin site (planned)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* users want to be able to view 'their' todos
* Sign up, login/logout
* Explain the admin site
* Fixtures


--> up to 6 is currently 50 pages, so shld be 60 with 7.

BOOK 2: Growing the site
~~~~~~~~~~~~~~~~~~~~~~~~

*More advanced Django stuff:*

* forms + validation  (duplicate list items?)
* pagination
* notifications
* support markdown for detail/notes field
* switch database to eg postgres
* Email integration + testing
* South


*More testing topics*

* fixtures (factory boy?)
* mocking (python mock)
* selenium page pattern
* JS: mocking external web service to simulate errors


*External systems integration*

* oauth
* gravatar
* Mozilla persona?


*Javascript*

* simple JS, eg some validation
* choose JS testing framework (QUnit, YUI / other?)
* Ajax (validation? or markdown preview?)


*Deployment & CI(?)*

* worth mentioning at this stage?
* building a staging site, switching to testing against that instead
of local copy. Stop using LiveServerTestCase
* automated deploys to staging from CI?


BOOK 3: Trendy stuff
~~~~~~~~~~~~~~~~~~~~

*More Javascript*

* MVC tool (backbone / angular)
* single page website (?) or bottomless web page?
* switching to a full REST API
* HTML5, eg LocalStorage


*Async*

* websockets
* tornado/gevent (or sthing based on Python 3 async??)


*NoSQL*

* obligatory discussion of NoSQL and MongoDB
* describe installation, particularities of testing


*Caching*

* unit testing `memcached`
* Functionally testing performance
* Apache `ab` testing



Appendices
~~~~~~~~~~

Apx I: PythonAnywhere
^^^^^^^^^^^^^^^^^^^^^^^^^^

* Running Firefox Selenium sessions with pyVirtualDisplay
* Setting up Django as a PythonAnywhere web app
* Cleaning up /tmp
* Screenshots


Other possible appendix(?) topics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Deployment. Discuss a few options -- pythonanywhere, heroku, ec2
* BDD
* Mobile (use selenium, link to using bootstrap?)
* Payments... Some kind of shopping cart?


