User authentication and the Admin site
--------------------------------------

So our beautiful lists site has been live for a few days, and our users are
starting to come back to us with feedback.  "We love the site", they say, "but
we keep losing our lists.  Manually remembering URLs is hard. It'd be great if
it could remember what lists we'd started"

Remember Henry Ford and faster horses. Whenever you hear a user requirement,
it's important to dig a little deeper and think -- what is the real requirement
here?  And how can I make it involve a cool new technology I've been wanting
to try out?

Clearly the requirement here is that people want to have some kind of user
account on the site.  So, without further ado, let's dive into authentication.

Naturally we're not going to mess about with remembering passwords ourselves
-- besides being *so* 90s, secure storage of user passwords is a security
nightmare we'd rather leave to someone else.  We'll use federated
authentication system instead.

NOTE: If you *insist* on storing your own passwords, Django has an auth module
ready and waiting for you. It's nice and straightforward, and I'll leave it to
you to discover on your own.

Mozilla Persona (Browser-ID)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

But which federated authentication system?  Oauth?  Openid?  "Login with
Facebook"?   Ugh.  In my book those all have unacceptable creepy overtones,
why should Google or Facebook know what sites you're logging into and when?
Thankfully there are still some techno-hippy-idealists out there, and the
lovely people at Mozilla have cooked up a privacy-friendly auth mechanism
they call "Persona", or sometimes "browser-id".  

The theory goes that your web browser acts as a third party between the
website that wants to check your ID, and the website that you will use
as a guarantor of your ID.  This latter may be Google or Facebook or whomever,
but a clever protocol means that they never need know which website you were
logging into.

Ultimately, Persona may never take off as an authentication platform, but
the main lessons from this chapter should be relevant no matter what 3rd
party auth system you want to integrate:

* Don't test other people's code or APIs
* But, test that you've integrated them correctly into your own code
* Check everything works from the point of view of the user
* Test that your system degrades gracefully if the third party is 
down


