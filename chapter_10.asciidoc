A simple form
-------------

That 'does' work, but we're really doing too much work in our view. Django
encourages us to use Form classes to do the work of validating user input, and
choosing what error messages to display.


Moving validation logic into a form
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TIP: in Django, a complex view is a code smell.  Could some of that logic
be pushed out to a form?  Or to some custom methods on the model class? Or
to a non-Django module that represents your business logic?

Forms have several powers in Django:
* they can process user input and validate it for errors
* they can be rendered used in templates to render HTML input elements,
and error messages too
* and, as we'll see later, some of them can even save data to the database
for you

Let's do a little experimenting with forms by using a unit test.  My plan
is to iterate towards a complete solution, and hopefully introduce forms gradually
enough that they'll make sense if you've never seen them before!

First we add a new file to hold our forms tests in:

[role="sourcecode"]
.lists/tests/__init__.py 
[source,python]
----
from .test_forms import *
from .test_models import *
from .test_views import *
----

Then we'll add a forms unit test that just looks at the form HTML:

[role="sourcecode"]
.lists/tests/test_forms.py 
[source,python]
----
from django.test import TestCase

from lists.forms import ItemForm


class ItemFormTest(TestCase):

    def test_form_renders_item_text_input(self):
        form = ItemForm()
        self.fail(form.as_p())
----

`form.as_p()` renders the form as HTML.  This unit test is using a self.fail
for some explanatory coding.  You could just as easily use a `manage.py shell`
session, although you'd need to keep reloading your code for each change.

For now it will just fail with an import error.

Let's make a minimal form.  It inherits from the base Form class, and has 
a single field called `item_text`:

[role="sourcecode"]
.lists/forms.py 
[source,python]
----
from django import forms

class ItemForm(forms.Form):
    item_text = forms.CharField()
----

We now see a failure message which tells us what the auto-generated form 
HTML will look like.

----
    self.fail(form.as_p())
AssertionError: <p><label for="id_item_text">Item text:</label> <input
id="id_item_text" name="item_text" type="text" /></p>
----

It's already pretty close to what we have in 'home.html' and 'list.html'.  One
thing we're missing is the placeholder attribute.  Let's make a unit test
for that:

[role="sourcecode"]
.lists/tests/test_forms.py 
[source,python]
----
def test_form_renders_item_text_input(self):
    form = ItemForm()
    self.assertIn('placeholder="Enter a to-do item"', form.as_p())
----

That gives us a fail which justifies some real coding.  How can we customise
the input for a form field?  Using a "widget":


[role="sourcecode"]
.lists/forms.py 
[source,python]
----
class ItemForm(forms.Form):
    item_text = forms.CharField(
        widget=forms.fields.TextInput(attrs={'placeholder': 'Enter a to-do item'})
    )
----

Switching to a Django ModelForm
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

What's next?  We want our form to re-use the validation code that we've already
defined on our model.  Django provides a special class which can auto-generate
a form for a model, called ModelForm.  Let's try that:

[role="sourcecode"]
.lists/forms.py 
[source,python]
----
from django import forms

from lists.models import Item

class ItemForm(forms.models.ModelForm):

    class Meta:
        model = Item
        fields = ('text',)
----

As you can see, `ModelForm` also uses the `class Meta` attribute for
configuration.  Here we specify which model the form is for, and 
which fields we want it to use.

ModelForms do all sorts of smart stuff, like assigning sensible HTML
form input types to different types of field, and applying default 
validation.  Check out the 
https://docs.djangoproject.com/en/1.5/topics/forms/modelforms/[docs] for more
info.

We now have some different-looking form HTML:

----
AssertionError: 'placeholder="Enter a to-do item"' not found in '<p><label
for="id_text">Text:</label> <textarea cols="40" id="id_text" name="text"
rows="10">\r\n</textarea></p>'
----

You can see that it's using `name="text"` instead of `name="item_text"`. We
can probably live with that. But it's using a `textarea` instead of a normal
input, and that's not the UI we want for our app. Thankfully, you can override
widgets for ModelForm fields, similarly to the way we did it with the normal
form:


[role="sourcecode"]
.lists/forms.py 
[source,python]
----
class ItemForm(forms.models.ModelForm):

    class Meta:
        model = Item
        fields = ('text',)
        widgets = {
            'text': forms.fields.TextInput(
                attrs={'placeholder': 'Enter a to-do item'}
            ),
        }
----

That gets the test passing. Now let's see if the ModelForm has picked up the
same validation rules which we defined on the model.  We'll also learn how to
pass data into the form, as if it came from the user:


[role="sourcecode"]
.lists/tests/test_forms.py (ch09l046)
[source,python]
----
    def test_form_validation_for_blank_items(self):
        form = ItemForm(data={'text': ''})
        form.save()
----

Great, that gives us:

----
ValueError: The Item could not be created because the data didn't validate.
----

Good, the form won't allow you to save if you give it an empty item text.

Now let's see if we can get it to use the specific error message that we 
want:

[role="sourcecode"]
.lists/tests/test_forms.py (ch09l047)
[source,python]
----
def test_form_validation_for_blank_items(self):
    form = ItemForm(data={'text': ''})
    self.assertFalse(form.is_valid())
    self.assertEqual(
        form.errors['text'],
        ["You can't have an empty list item"]
    )
----

Calling `form.is_valid()` returns True or False, but it also has the
side-effect of validating the input data, and populating the errors
attribute.  It's a dictionary mapping the names of fields to lists of
errors for those fields (it's possible for a field to have more than 
one error)

That gives us:

----
AssertionError: ['This field is required.'] != ["You can't have an empty list
item"]
----

Django already has a default error message which we could present to the
user -- you might use it if you were in a hurry to build your web app,
but we care enough to make our message special.  Customising it does
involve hacking the form's init though:


[role="sourcecode"]
.lists/forms.py (ch09l048)
[source,python]
----
from django import forms

from lists.models import Item

class ItemForm(forms.models.ModelForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        empty_error = "You can't have an empty list item"
        self.fields['text'].error_messages['required'] = empty_error


    class Meta:
        [...]
----

You know what we be even better than messing about with all these
error strings?  Having a constant:  

[role="sourcecode"]
.lists/forms.py (ch09l049)
[source,python]
----
EMPTY_LIST_ERROR = "You can't have an empty list item"

class ItemForm(forms.models.ModelForm):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['text'].error_messages['required'] = EMPTY_LIST_ERROR

    [...]
----

Re-run the tests to see they pass.... OK.  Now we change the test:

[role="sourcecode"]
.lists/tests/test_forms.py (ch09l050) 
[source,python]
----
from lists.forms import EMPTY_LIST_ERROR, ItemForm
[...]

    def test_form_validation_for_blank_items(self):
        form = ItemForm(data={'text': ''})
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['text'], [EMPTY_LIST_ERROR])
----

And the tests still pass. Great.  We are totes commitballs.

[subs="specialcharacters,quotes"]
----
$ *git status* # should show new file at lists/forms.py and its test_forms.py
$ *git add lists*
$ *git commit -m "new form for list items"*
----

Using the form in our home page
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There's a sort of corollary to the "deploy as early as possible" lean
methodology, which is "merge code as early as possible".  In other words: 
while building this bit of forms code, it would be easy to go on for ages,
adding more and more functionality to the form -- I should know, because that's
exactly what I did during the drafting of this chapter, and I ended up doing
all sorts of work making an all-singing, all-dancing form class before I
realised it wouldn't really work for our most basic use case.

So, instead, try and use your new bit of code as soon as possible.  This makes
sure you never have unused bits of code lying around, and that you start
checking your code against "the real world" as soon as possible.

We have a form class which can render some HTML and do validation of at
least one kind of error -- let's start using it!  We should be able to use
it in our 'home.html' template, and in our new list view.  

Let's start in our unit tests for the home view. Let's replace the old-style
`test_home_page_returns_correct_html` with a set of tests that use the Django
Test Client.  We leave the old test in at first, to check that our new test is
equivalent:

[role="sourcecode"]
.lists/tests/test_views.py (ch09l051)
[source,python]
----
from lists.forms import ItemForm
[...]


    def test_home_page_returns_correct_html(self):
        request = HttpRequest()
        [...]


    def test_home_page_renders_home_template_with_form(self):
        response = self.client.get('/')
        self.assertTemplateUsed(response, 'home.html')
        self.assertIsInstance(response.context['form'], ItemForm)
----

That gives us:

----
KeyError: 'form'
----

So we use the form in our home page view:

[role="sourcecode"]
.lists/views.py (ch09l052)
[source,python]
----
[...]
from lists.forms import ItemForm
from lists.models import Item, List

def home_page(request):
    return render(request, 'home.html', {'form': ItemForm()})
----

OK, now let's try using it in the template:


[role="sourcecode"]
.lists/templates/home.html (ch09l053)
[source,html]
----
    <form method="POST" action="{% url 'new_list' %}" >
        {{ form.text }}
        {% csrf_token %}
        {% if error %}
            <p class="error">{{ error }}</p>
        {% endif %}
    </form>
----

`{{form.text}}` renders just the HTML input for `text` field of the form.

Now our old test is out of date:


----
    self.assertEqual(response.content.decode(), expected_html)
AssertionError: '<!DOCTYPE html>\n<html>\n    <head>\n        <meta
[...]
----

Let's just clarify that error message a little:

[role="sourcecode"]
.lists/tests/test_views.py (ch09l054)
[source,python]
----
class HomePageTest(TestCase):
    maxDiff = None #<2>
    [...]
    def test_home_page_returns_correct_html(self):
        request = HttpRequest()
        response = home_page(request)
        expected_html = render_to_string('home.html')
        self.assertMultiLineEqual(response.content.decode(), expected_html) #<1>
----

<1> `assertMultiLineEqual` is useful for comparing long strings, it gives you a
diff-style output, but it truncates long diffs by default...

<2> so that's why we also need to set `maxDiff = None` on the test class.

Sure enough, it's because our `render_to_string` call doesn't know about the
form :

----
[...]
      <form method="POST" action="/lists/new" >
-         <input id="id_text" name="text" placeholder="Enter a to-do item"
type="text" />
+         
[...]
----

But we can fix that:

[role="sourcecode"]
.lists/tests/test_views.py
[source,python]
----
def test_home_page_returns_correct_html(self):
    request = HttpRequest()
    response = home_page(request)
    expected_html = render_to_string('home.html', {'form': ItemForm()})
    self.assertMultiLineEqual(response.content.decode(), expected_html)
----


And that gets us back to passing.  We've now reassured ourselves enough
that the behaviour has stayed the same, so it's now OK to delete
the old test. The `assertTemplateUsed` and `response.context` checks from
the new test are sufficient for testing a basic view with a GET request.


One thing we have done, though, is changed our form -- it no longer uses
the same `id` and `name` attributes.  You'll see if we run our functional
tests that they fail the first time they try and find the input box.


----
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate
element: {"method":"id","selector":"id_new_item"}' ; Stacktrace: 
----

TODO: commit first

Let's fix the functional tests.  A quick grep shows us there are several
places where we're using `id_new_item`

[subs="specialcharacters,quotes"]
----
$ @grep id_new_item functional_tests/tests/test*@
----

That's a good call for a refactor.  Let's make a new helper method
in 'base.py':

[role="sourcecode"]
.functional_tests/tests/base.py (ch09l057)
[source,python]
----
class FunctionalTest(LiveServerTestCase):
    [...]
    def get_item_input_box(self):
        return self.browser.find_element_by_id('id_text')
----

And then we use it throughout - I had to make 3 changes in 
'test_simple_list_creation.py', 2 in 'test_layout_and_styling.py' and 6
in 'test_list_item_validation.py', eg:


[role="skipme"]
[source,python]
----
    # She is invited to enter a to-do item straight away
    inputbox = self.get_item_input_box()
----

Or

[role="skipme"]
[source,python]
----
    # an empty list item. She hits Enter on the empty input box
    self.browser.get(self.server_url)
    self.get_item_input_box().send_keys('\n')
----

I won't show you every single one, I'm sure you can manage this for 
yourself!  You can re-do the `grep` to check you've caught them all..

That gets us past the first step, but now we have to bring the rest
of the application code in line with the change.  We need to find any occurrences
of the old id (`id_new_item`) and name (`item_text`) and replace them too, with
`id_text` and `text`, respectively.

[role="dofirst-ch09l058"] 
[subs="specialcharacters,quotes"]
----
$ *grep -r id_new_item lists/*

lists/static/base.css:#id_new_item {
lists/templates/list.html:        <input name="item_text" id="id_new_item"
placeholder="Enter a to-do item" />
----

That's two changes, and similarly for the `name`:

[role="dofirst-ch09l059-1"] 
[subs="specialcharacters,macros"]
----
$ pass:quotes[*grep -Ir item_text lists*]
lists/views.py:        Item.objects.create(text=request.POST['item_text'],
list=list)
lists/views.py:            Item.objects.create(text=request.POST['item_text'],
list=list)
lists/tests/test_forms.py:    def test_form_renders_item_text_input(self):
lists/tests/test_views.py:            data={'item_text': 'A new list item'}
lists/tests/test_views.py:            data={'item_text': 'A new list item'}
lists/tests/test_views.py:        response = self.client.post('/lists/new',
data={'item_text': ''})
[...]
----

Once we're done, we re-run the unit tests to check everything still works:

[role="dofirst-ch09l059-2"] 
[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test lists*] 
Creating test database for alias 'default'...
...................
 ---------------------------------------------------------------------
Ran 19 tests in 0.126s

OK
Destroying test database for alias 'default'...
----

And the functional tests too:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests*] 
[...]
======================================================================
ERROR: test_cannot_add_empty_list_items
 ---------------------------------------------------------------------
(functional_tests.tests.test_list_item_validation.ItemValidationTest)
  File "/workspace/superlists/functional_tests/tests/base.py", line 30, in
get_item_input_box
    return self.browser.find_element_by_id('id_text')
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate
element: {"method":"id","selector":"id_text"}' ; Stacktrace: 
[...]
----


So close!  Let's look at where this is happening -- we check the line number
from the validation FT, and see it's happening after we've submitted a blank
list item.  We see the error text on the next page, but the form has
disappeared!

Now, looking in 'views.py', we see that we're not passing the form to the
'home.html' template inside the `new_list` view:


[role="skipme"]
[source,python]
----
except ValidationError:
    error_text = "You can't have an empty list item"
    return render(request, 'home.html', {"error": error_text})
----

This is a job our form should be doing!  Before we make any more changes
though, let's do a commit

[subs="specialcharacters,quotes"]
----
$ *git status*
$ *git commit -am"rename all item input ids and names"*
----


Now we adjust the unit tests for the `new_list` view. Instead of manually
checking for a hard-coded error string, we check for the `EMPTY_LIST_ERROR`
from 'forms.py', and we can also check that a form of the right class
was passed to the template:

[role="sourcecode"]
.lists/tests/test_views.py (ch09l066)
[source,python]
----
from lists.forms import ItemForm, EMPTY_LIST_ERROR
[...]

class NewListTest(TestCase):
[...]

    def test_validation_errors_sent_back_to_home_page_template(self):
        response = self.client.post('/lists/new', data={'text': ''})
        self.assertEqual(Item.objects.all().count(), 0)
        self.assertTemplateUsed(response, 'home.html')
        self.assertContains(response, escape(EMPTY_LIST_ERROR))
        self.assertIsInstance(response.context['form'], ItemForm)
----


Sure enough, the form isn't being passed to the template:

----
KeyError: 'form'
----

And here's how we use the form in the view:  


[role="sourcecode"]
.lists/views.py
[source,python]
----
def new_list(request):
    form = ItemForm(data=request.POST) #<1>
    if form.is_valid(): #<2>
        list = List.objects.create()
        Item.objects.create(text=request.POST['text'], list=list)
        return redirect(list)
    else:
        return render(request, 'home.html', {"form": form}) #<3>
----

<1> We pass the `request.POST` data into the form's constructor, 
<2> We use `form.is_valid()` to determine whether this is a good or a
bad submission
<3> In the bad case, we pass the form down to the template, instead of
our hard-coded error string.

Incidentally, did you notice that we've also fixed a small bug?  In the
previous code, we were saving a superfluous List object, even for invalid
inputs.  They would have been left lying around our database.  We should add an
extra assert in our unit tests once this refactor is done.

* [strikethrough line-through]#remove hard-coded URLs from 'views.py'#
* [strikethrough line-through]#remove hard-coded URLs from form in 'home.html'#
* [strikethrough line-through]#remove hard-coded URLs from form in 'list.html'#
* remove duplication of validation logic in views.
* add test that we don't save superfluous lists

At this point the tests will fail, because we're not yet using the form
to display errors in the template:

[role="sourcecode"]
.lists/templates/home.html (ch09l068)
[source,html]
----
    <form method="POST" action="{% url 'new_list' %}" >
        {{ form.text }}
        {% csrf_token %}
        {% if form.errors %} #<1>
            <div class="error">{{ form.text.errors }}</div> #<2>
        {% endif %}
    </form>
----

<1> `form.errors` contains a list of all the errors for the form
<2> `form.text.errors` is a list of just the errors for the `text` field.

//TODO div vs p, either mention it or change the earlier one.

That gets the unit tests passing.  How about the FTs?


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests*]
Creating test database for alias 'default'...
....
 ---------------------------------------------------------------------
Ran 4 tests in 16.154s

OK
Destroying test database for alias 'default'...
----

Woohoo!  Can you feel that feeling of relief wash over you?  We've just made
a fairly major change to our small app -- that input field, its name and ID,
is absolutely critical to making everything work.  We've touched 7 or 8
different files, doing a refactor that's quite involved... This is the kind of
thing that, without tests, would seriously worry me.  In fact, I might well
have decided that it wasn't worth messing with code that works...  But, because
we have a full tests suite, we can delve around in it, tidying things up, safe
in the knowledge that the tests are there to spot any mistakes we make.  It
just makes it that much likelier that you're going to keep refactoring, keep
tidying up, keep gardening, keep everything neat and tidy and clean and smooth
and concise and functional.

Definitely time for a commit.

[subs="specialcharacters,quotes"]
----
$ *git diff* 
$ *git commit -am"use form in home page, rename item_text and id_new_item attrs"*
----


Before we forget, let's add our check that invalid new list forms don't create
a pointless list object:

[role="sourcecode"]
.lists/tests/test_views.py (ch09l069)
[source,python]
----
    def test_validation_errors_sent_back_to_home_page_template(self):
        response = self.client.post('/lists/new', data={'text': ''})
        self.assertEqual(List.objects.all().count(), 0)
        self.assertEqual(Item.objects.all().count(), 0)
        self.assertTemplateUsed(response, 'home.html')
        expected_error =  escape("You can't have an empty list item")
        self.assertContains(response, expected_error)
----

That should pass. Time for another self-contained little commit, before we
move onto the next task.

[subs="specialcharacters,quotes"]
----
$ *git commit -am"extra test for not saving List on invalid input"*
----

* [strikethrough line-through]#remove hard-coded URLs from 'views.py'#
* [strikethrough line-through]#remove hard-coded URLs from form in 'home.html'#
* [strikethrough line-through]#remove hard-coded URLs from form in 'list.html'#
* remove duplication of validation logic in views.
* [strikethrough line-through]#add test that we don't save superfluous lists#


Hooray! Time for a final commit, and a wrap-up.


.Move logic out of your views as soon as you can
*******************************************************************************
A generally accepted best practice in Django is to have "thin" views.  If you
find yourself writing a lot of tests for your views, it's time to start
thinking about whether that logic could be moved elsewhere: possibly to a form,
like we've done here.  Another likely spot would be a custom method on the
model class.  And -- once the complexity of the app demands it -- out of
Django-specific files and into your own classes and functions, that capture
your core business logic.
*******************************************************************************


TODO: prettier bootstrap formatting

TODO: a general philosophical discussion on design in TDD, "don't forget the
refactor step"

