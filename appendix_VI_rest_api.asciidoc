[[appendix-rest-api-backend]]
[appendix]
Building a REST API: JSON, Ajax, and mocking with JavaScript
------------------------------------------------------------

(((REST)))
(((API)))
WARNING: Chapter under construction.  Apologies, it's in pretty telegraphic style for now.


Plan:

* All assumes an existing list
* new URL structure /api/lists/{id}/
* GET gives you details of a list (including all its items)
* POST lets you add an item


Code example start from chapter 21.


Basic piping
~~~~~~~~~~~~


Start with a unit test that we can return a JSON response, status 200, from a URL

[role="sourcecode"]
.lists/tests.py
[source,python]
----
import json
from django.test import TestCase

from lists.models import List, Item


class APIGetListItemsTest(TestCase):
    base_url = '/api/lists/{}/'  #<1>

    def test_get_returns_json_200(self):
        list_ = List.objects.create()
        response = self.client.get(self.base_url.format(list_.id))
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response['content-type'], 'application/json')
----


<1> This is a new pattern we'll introduce for this chapter, it'll help
    us to remove duplication of hard-coded urls in this test.  We could
    even have used a call to `reverse`


And we can get that together in 3 lines


[role="sourcecode"]
.lists/tests.py
[source,python]
----
from django.http import HttpResponse

def list(request, list_id):
    return HttpResponse(content_type='application/json')
----

And wire up a couple of urls files:

[role="sourcecode"]
.lists/tests.py
[source,python]
----
[...]
from lists import api_urls
from lists import urls as list_urls

urlpatterns = [
    url(r'^$', list_views.home_page, name='home'),
    url(r'^lists/', include(list_urls)),
    url(r'^accounts/', include(accounts_urls)),
    url(r'^api/', include(api_urls)),
]
----


[role="sourcecode"]
.lists/api_urls.py
[source,python]
----
from django.conf.urls import url
from lists import api

urlpatterns = [
    url(r'^lists/(\d+)/$', api.list, name='api_list'),
]
----

The tests should pass, and we have the basic piping together.

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test lists*]
Creating test database for alias 'default'...
..................................................
 ---------------------------------------------------------------------
Ran 50 tests in 0.177s

OK
----


Actually responding something
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


[role="sourcecode"]
.lists/tests.py
[source,python]
----
    def test_get_returns_items_for_correct_list(self):
        other_list = List.objects.create()
        Item.objects.create(list=other_list, text='item 1')
        our_list = List.objects.create()
        item1 = Item.objects.create(list=our_list, text='item 1')
        item2 = Item.objects.create(list=our_list, text='item 2')
        response = self.client.get(self.base_url.format(our_list.id))
        self.assertEqual(
            json.loads(response.content.decode('utf8')),  #<1>
            [
                {'id': item1.id, 'text': item1.text},
                {'id': item2.id, 'text': item2.text},
            ]
        )
----

<1> This is the main thing to notice about this test -- we expect our
    response to be in JSON format.  We use `json.loads()` because testing
    python objects is easier than messing about with raw JSON strings.


And the implementation, conversely, uses `json.dumps()`

[role="sourcecode"]
.lists/tests.py
[source,python]
----
import json
from django.http import HttpResponse
from lists.models import List


def list(request, list_id):
    list_ = List.objects.get(id=list_id)
    item_dicts = [
        {'id': item.id, 'text': item.text}
        for item in list_.item_set.all()
    ]
    return HttpResponse(
        json.dumps(item_dicts),
        content_type='application/json'
    )
----


Adding POST
~~~~~~~~~~~

We'll start with the "happy path":


[role="sourcecode"]
.lists/tests.py
[source,python]
----
    def test_POSTing_a_new_item(self):
        list_ = List.objects.create()
        response = self.client.post(
            self.base_url.format(list_.id),
            {'text': 'new item'},
        )
        self.assertEqual(response.status_code, 201)
        new_item = list_.item_set.get()
        self.assertEqual(new_item.text, 'new item')
----


And the implementation is similarly simple -- basically
the same was what we do in our normal view, but we return
a 201 rather than a redirect:


[role="sourcecode"]
.lists/tests.py
[source,python]
----
def list(request, list_id):
    list_ = List.objects.get(id=list_id)
    if request.method == 'POST':
        Item.objects.create(list=list_, text=request.POST['text'])
        return HttpResponse(status=201)
    [...]
----


And that should get us started.


Testing the client-side with sinon.js
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Don't even 'think' of doing Ajax testing without a mocking library.  Different test frameworks
and tools have their own, sinon is generic.  It also provides JavaScript mocks, as we'll see...

http://sinonjs.org/


[role="sourcecode"]
.lists/static/tests/tests.html
[source,html]
----
  <div id="qunit-fixture">
    <form>
      <input name="text" />
      <div class="has-error">Error text</div>
    </form>
    <table id="id_list_table">  <!--<1>-->
    </table>
  </div>

  <script src="../jquery-3.1.1.min.js"></script>
  <script src="../list.js"></script>
  <script src="qunit-2.0.1.js"></script>
  <script src="sinon-1.17.6.js"></script>  <!--<2>-->

  <script>
/* global sinon */
var server;
QUnit.testStart(function () {
  server = sinon.fakeServer.create();  //<3>
});
QUnit.testDone(function () {
  server.restore();  //<3>
});

QUnit.test("errors should be hidden on keypress", function (assert) {
[...]


QUnit.test("should get items by ajax on initialize", function (assert) {
  var url = '/getitems/';
  window.Superlists.initialize(url);

  assert.equal(server.requests.length, 1); //<4>
  var request = server.requests[0];
  assert.equal(request.url, url);
  assert.equal(request.method, 'GET');
});

  </script>
----

<1> We add a new item to the fixture div to represent our list table

<2> We import 'sinon.js'

<3> `testStart` and `testDone` are the QUnit equivalents of `setUp` and
    `tearDown`.  We use them to tell sinon to start up its ajax testing
    tool, the `fakeServer`.

<4> That lets us make assertions about any ajax requests that were made
    by our code.


And we can get that passing with this

[role="sourcecode"]
.lists/static/lists.js
[source,diff]
----
@@ -1,6 +1,10 @@
 window.Superlists = {};
-window.Superlists.initialize = function () {
+window.Superlists.initialize = function (url) {
   $('input[name="text"]').on('keypress', function () {
     $('.has-error').hide();
   });
+
+  $.get(url);
+
 };
----


----
Took 35ms to run 5 tests. 5 passed, 0 failed.
----

But what about the async part, where we deal with the response?


Sinon and testing the async part of Ajax
++++++++++++++++++++++++++++++++++++++++


This is a major reason to love sinon.  `server.respond()` allows us to exactly
control the flow of the async code.


[role="sourcecode"]
.lists/static/tests/tests.html
[source,html]
----
QUnit.test("should fill in lists table from ajax response", function (assert) {
  var url = '/getitems/';
  var responseData = [
    {'id': 101, 'text': 'item 1 text'},
    {'id': 102, 'text': 'item 2 text'},
  ];
  server.respondWith('GET', url, [
    200, {"Content-Type": "application/json"}, JSON.stringify(responseData) //<1>
  ]);
  window.Superlists.initialize(url); //<2>

  server.respond(); //<3>

  var rows = $('#id_list_table tr');
  assert.equal(rows.length, 2);
  var row1 = $('#id_list_table tr:first-child td');
  console.log(row1);
  assert.equal(row1.text(), '1: item 1 text');
  var row2 = $('#id_list_table tr:last-child td');
  assert.equal(row2.text(), '2: item 2 text');
});
----

<1> We set up some response data for sinon to use, telling it what status code, headers,
    and importantly what kind of response JSON we want to simulate coming from the
    server.

<2> Then we call the function under test

<3> Here's the magic.  'Then' we can call `server.respond()`, whenever we like, and that
    will kick off all the async part of the Ajax loop -- all the callbacks we'd assigned
    to deal with the response.

And then we can quietly check whether our Ajax callback has actually populated our table
with the new list rows...

TIP: We're lucky because of the way jQuery registers its callbacks for Ajax when we use
    the `.done()` function.  If you want to switch to the more standard JavaScript Promise
    `.then()` callback, we get one more level of async.  QUnit does have a way of dealing with
    that.  Check out the docs for the http://api.qunitjs.com/async/[async] function.  Other test
    frameworks have something similar.



Wiring it all up in the template to check it all works so far
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We break it first, by removing the list table `{% for %}` loop from the 
lists.html template.

[role="sourcecode"]
.lists/templates/list.html
[source,diff]
----
@@ -6,9 +6,6 @@
 
 {% block table %}
     <table id="id_list_table" class="table">
-        {% for item in list.item_set.all %}
-            <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>
-        {% endfor %}
     </table>
 
     {% if list.owner %}
----

Yep, that breaks the FT

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_simple_list_creation*]
[...]
  File "/workspace/functional_tests/test_simple_list_creation.py", line 35, in
test_can_start_a_list_and_retrieve_it_later
    self.check_for_row_in_list_table('1: Buy peacock feathers')
  File "/workspace/functional_tests/base.py", line 109, in
check_for_row_in_list_table
    self.assertIn(row_text, [row.text for row in rows])
AssertionError: '1: Buy peacock feathers' not found in []

FAILED (failures=1)
----

We then add a block called `{% scripts %}` to the base template to allow us
to override it selectively in 'list.html':

[role="sourcecode"]
.lists/templates/base.html
[source,html]
----
    <script src="/static/list.js"></script>

    {% block scripts %}
      <script>
$(document).ready(function () {
  window.Superlists.initialize();
});
      </script>
    {% endblock scripts %}

  </body>
----

And now in 'list.html' we add a slightly different call to `initialize`, with
the correct url:


[role="sourcecode"]
.lists/templates/list.html
[source,html]
----
{% block scripts %}
  <script>
$(document).ready(function () {
  var url = "{% url 'api_list' list.id %}";
  window.Superlists.initialize(url);
});
  </script>
{% endblock scripts %}
----

And guess what? The test passes!

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_simple_list_creation*]
[...]
.
 ---------------------------------------------------------------------
Ran 1 test in 11.730s

OK
Destroying test database for alias 'default'...
----

That's a pretty good start!

Now if you run all the FTs you'll see we've got some failures in 
other FTs, so we'll have to deal with them. Also, we're using an old-fashioned
POST from the form, with page refresh, so we're not at our trendy hipster
single-page app yet.  But we'll get there!


//TODO: which FTs fail exactly?



Implementing Ajax POST
~~~~~~~~~~~~~~~~~~~~~~

First we give our list form an `id` so we can pick it up
in our JS:

[role="sourcecode"]
.lists/templates/base.html
[source,diff]
----
@@ -56,7 +56,7 @@
           <div class="text-center">
             <h1>{% block header_text %}{% endblock %}</h1>
             {% block list_form %}
-              <form method="POST" action="{% block form_action %}{% endblock %}">
+              <form id="id_item_form" method="POST" action="{% block form_action %}{% endblock %}">
                 {{ form.text }}
                 {% csrf_token %}
                 {% if form.errors %}
----


Next tweak the fixture in our js test:

[role="sourcecode"]
.lists/static/tests/tests.html
[source,diff]
----
@@ -9,8 +9,9 @@
 <body>
   <div id="qunit"></div>
   <div id="qunit-fixture">
-    <form>
+    <form id="id_item_form">
       <input name="text" />
+      <input type="hidden" name="csrfmiddlewaretoken" value="tokey" />
       <div class="has-error">Error text</div>
     </form>
----


And here's our test:


[role="sourcecode"]
.lists/static/tests/tests.html
[source,javascript]
----
QUnit.test("should intercept form submit and do ajax post", function (assert) {
  var url = '/listitemsapi/';
  window.Superlists.initialize(url);

  $('#id_item_form input[name="text"]').val('user input');  //<1>
  $('#id_item_form input[name="csrfmiddlewaretoken"]').val('tokeney');  //<1>
  $('#id_item_form').submit();  //<1>

  assert.equal(server.requests.length, 2);  //<2>
  var request = server.requests[1];
  assert.equal(request.url, url);
  assert.equal(request.method, "POST");
  assert.equal(
    request.requestBody,
    'text=user+input&csrfmiddlewaretoken=tokeney'  //<3>
  );
});
----

<1> We simulate the user filling in the form and hitting submit.

<2> We now expect that there should be a second Ajax request (the
    first one is the GET for the list items table).

<3> We check our POST `requestBody`.  As you can see, it's
    URL-encoded, which isn't the most value to test, but it's still just about
    readable.

And here's how we implement it:

[role="sourcecode"]
.lists/static/list.js
[source,javascript]
----
    [...]
      $('#id_list_table').html(rows);
    });

    var form = $('#id_item_form');
    form.on('submit', function(event) {
      event.preventDefault();
      $.post(url, {
        'text': form.find('input[name="text"]').val(),
        'csrfmiddlewaretoken': form.find('input[name="csrfmiddlewaretoken"]').val(),
      });
    });
----

That get our JS tests passing but it breaks our FTs, because, although we're
doing our POST ok, we're not updating the page after the POST to show the new
list item:

----
  File "/workspace/superlists/functional_tests/base.py", line 109, in check_for_row_in_list_table
    self.assertIn(row_text, [row.text for row in rows])
AssertionError: '2: Use peacock feathers to make a fly' not found in ['1: Buy peacock feathers']
----



Mocking in JavaScript
~~~~~~~~~~~~~~~~~~~~~

We want our client-side to update the table of items after the Ajax POST completes.
Essentially it'll do the same work as we do as soon as the page loads, retrieving
the current list of items from the server, and filling in the item table.

Sounds like a helper function is in order!

[role="sourcecode"]
.lists/static/list.js
[source,javascript]
----
window.Superlists = {};

window.Superlists.updateItems = function (url) {
  $.get(url).done(function (response) {
    var rows = '';
    for (var i=0; i<response.length; i++) {
      var item = response[i];
      rows += '\n<tr><td>' + (i+1) + ': ' + item.text + '</td></tr>';
    }
    $('#id_list_table').html(rows);
  });
};

window.Superlists.initialize = function (url) {
  $('input[name="text"]').on('keypress', function () {
    $('.has-error').hide();
  });

  if (url) {
    window.Superlists.updateItems(url);

    var form = $('#id_item_form');
----

That was just a refactor, we check the JS tests all still pass:


    Took 46ms to run 11 tests. 11 passed, 0 failed.

Now how to test that our Ajax POST calls `updateItems` on POST success?  We
don't want to dumbly duplicate the code that simulates a server response
and checks the items table manually...   How about a Mock?


First we set up a thing called a "sandbox".  It will keep track of all
the mocks we create, and make sure to un-monkeypatch all the things that
have been mocked after each test.

[role="sourcecode"]
.lists/static/tests/tests.html
[source,html]
----
var server, sandbox;
QUnit.testStart(function () {
  server = sinon.fakeServer.create();
  sandbox = sinon.sandbox.create();
});
QUnit.testDone(function () {
  server.restore();
  sandbox.restore(); //<1>
});
----


<1> This `.restore()` is the important part, that undoes all the
    mocking we've done in each test.


[role="sourcecode"]
.lists/static/tests/tests.html
[source,html]
----
QUnit.test("should call updateItems after successful post", function (assert) {
  var url = '/listitemsapi/';
  window.Superlists.initialize(url); //<1>
  var response = [
    201,
    {"Content-Type": "application/json"},
    JSON.stringify({}),
  ];
  server.respondWith('POST', url, response); //<1>
  $('#id_item_form input[name="text"]').val('user input');
  $('#id_item_form input[name="csrfmiddlewaretoken"]').val('tokeney');
  $('#id_item_form').submit();

  sandbox.spy(window.Superlists, 'updateItems');  //<2>
  server.respond();  //<2>

  assert.equal(
    window.Superlists.updateItems.lastCall.args,  //<3>
    url
  );
});
----

<1> First important thing to notice:  We only set up our server response
    'after' we do the initialize.  We want this to be the response to the
    POST request that happens on form submit, not the response to the
    initial GET request (remember our lesson from chapter 13?  On of the most
    challenging things about JS testing is controlling the order of execution)

<2> Similarly, we only start mocking our helper function 'after' we know the
    first call for the initial GET has already happened.  The `sandbox.spy` call
    is what does the job that `patch` does in Python tests.  It replaces the given
    object with a mock version.

<3> our `updateItems` function has now grown some mocky extra attributes, like
    `lastCall` and `lastCall.args`, which are like the Python mock's `call_args`.


To get it passing, we first make a deliberate mistake, to check our tests really
do test what we think they do:


[role="sourcecode"]
.lists/static/lists.js
[source,javascript]
----
      $.post(url, {
        'text': form.find('input[name="text"]').val(),
        'csrfmiddlewaretoken': form.find('input[name="csrfmiddlewaretoken"]').val(),
      }).done(function () {
        window.Superlists.updateItems();
      });
----

Yep, we're almost there but not quite:

----
Test failed: should call updateItems after successful post
    Failed assertion: expected: /listitemsapi/, but was: 
file:///workspace/superlists/lists/static/tests/tests.html:120:15
----

And we fix it thusly:

[role="sourcecode"]
.lists/static/lists.js
[source,javascript]
----
      }).done(function () {
        window.Superlists.updateItems(url);
      });
----


And our FT passes!  or at least one of them does, the others have problems,
we'll come back to them later


First, I'm not happy until we've seen through this refactor, and made
our unit tests match the code a little more:


[role="sourcecode"]
.lists/static/tests/tests.html
[source,diff]
----
@@ -50,9 +50,19 @@ QUnit.testDone(function () {
 });
 
 
-QUnit.test("should get items by ajax on initialize", function (assert) {
+QUnit.test("should call updateItems on initialize", function (assert) {
   var url = '/getitems/';
+  sandbox.spy(window.Superlists, 'updateItems');
   window.Superlists.initialize(url);
+  assert.equal(
+    window.Superlists.updateItems.lastCall.args,
+    url
+  );
+});
+
+QUnit.test("updateItems should get correct url by ajax", function (assert) {
+  var url = '/getitems/';
+  window.Superlists.updateItems(url);
 
   assert.equal(server.requests.length, 1);
   var request = server.requests[0];
@@ -60,7 +70,7 @@ QUnit.test("should get items by ajax on initialize", function (assert) {
   assert.equal(request.method, 'GET');
 });
 
-QUnit.test("should fill in lists table from ajax response", function (assert) {
+QUnit.test("updateItems should fill in lists table from ajax response", function (assert) {
   var url = '/getitems/';
   var responseData = [
     {'id': 101, 'text': 'item 1 text'},
@@ -69,7 +79,7 @@ QUnit.test("should fill in lists table from ajax response", function (assert) {
   server.respondWith('GET', url, [
     200, {"Content-Type": "application/json"}, JSON.stringify(responseData)
   ]);
-  window.Superlists.initialize(url);
+  window.Superlists.updateItems(url);
 
   server.respond();
----


Data validation.  An exercise for the reader?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


IF you do a full test run, you should find two FTs are failing:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test *]
[...]
ERROR: test_cannot_add_empty_list_items
(functional_tests.test_list_item_validation.ItemValidationTest)
[...]
ERROR: test_cannot_add_duplicate_items
(functional_tests.test_list_item_validation.ItemValidationTest)
----

I won't spell this all out for you, but here's at least the unit
tests you'll need:

[role="sourcecode"]
.lists/tests/test_api.py
[source,python]
----
    def post_empty_input(self):
        list_ = List.objects.create()
        return self.client.post(
            self.base_url.format(list_.id),
            data={'text': ''}
        )


    def test_for_invalid_input_nothing_saved_to_db(self):
        self.post_empty_input()
        self.assertEqual(Item.objects.count(), 0)


    def test_for_invalid_input_returns_error_code(self):
        response = self.post_empty_input()
        self.assertEqual(response.status_code, 400)
        self.assertEqual(
            json.loads(response.content.decode('utf8')),
            {'error': EMPTY_ITEM_ERROR}
        )


    def test_duplicate_items_error(self):
        list_ = List.objects.create()
        self.client.post(self.base_url.format(list_.id), data={'text': 'thing'})
        response = self.client.post(self.base_url.format(list_.id), data={'text': 'thing'})
        self.assertEqual(response.status_code, 400)
        self.assertEqual(
            json.loads(response.content.decode('utf8')),
            {'error': DUPLICATE_ITEM_ERROR}
        )
----


[role="sourcecode"]
.lists/static/tests/tests.html
[source,python]
----
QUnit.test("should display errors on post failure", function (assert) {
  var url = '/listitemsapi/';
  window.Superlists.initialize(url);
  server.respondWith('POST', url, [
    400,
    {"Content-Type": "application/json"},
    JSON.stringify({'error': 'something is amiss'})
  ]);
  $('.has-error').hide();

  $('#id_item_form').submit();
  server.respond();

  assert.equal($('.has-error').is(':visible'), true);
  assert.equal($('.has-error .help-block').text(), 'something is amiss');
});

QUnit.test("should hide errors on post success", function (assert) {
    [...]
----


And you'll want some modifications to 'base.html' to make it compatible with
both displaying Django errors (which the home page still uses for now) and
errors from JavaScript:

[role="sourcecode"]
.lists/templates/base.html
[source,diff]
----
@@ -12,6 +12,7 @@
 
   <body>
     <div class="container">
+
       <nav class="navbar navbar-default" role="navigation">
         <div class="container-fluid">
           <a class="navbar-brand" href="/">Superlists</a>
@@ -55,17 +56,21 @@
         <div class="col-md-6 col-md-offset-3 jumbotron">
           <div class="text-center">
             <h1>{% block header_text %}{% endblock %}</h1>
+
             {% block list_form %}
             <form id="id_item_form" method="POST" action="{% block form_action %}{% endblock %}">
               {{ form.text }}
               {% csrf_token %}
-                {% if form.errors %}
               <div class="form-group has-error">
-                    <div class="help-block">{{ form.text.errors }}</div>
-                  </div>
+                <div class="help-block">
+                  {% if form.errors %}
+                    {{ form.text.errors }}
                   {% endif %}
+                </div>
+              </div>
             </form>
             {% endblock %}
+
           </div>
----


If you need a hint, check out the repo

But I would never suggest building a REST API in Django without checking out
Django-Rest-Framework.  Which is the topix of the next appendix!  Read on,
Macduff.


.REST API tips
*******************************************************************************

Dedupe ursl::
    in test

Don't work with raw json strings::
    json.loads and json.dumps are your friend.

Always use an ajax mocking library for your js tests::
    sinon is fine.  Jasmine has its own, as does Angular.


*******************************************************************************

