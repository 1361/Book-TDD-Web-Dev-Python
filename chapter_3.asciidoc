Chapter 3 - Something
-------------------------------------------

We ended the last Chapter with an expected failure saying

....
AssertionError: Finish the test!
....

One of the great things about TDD is that you never have to worry about
forgetting what to do next - just re-run your tests and they will tell
you what you need to work on.

So we should finish writing the test:




[source,python]
----
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', 
        'NAME': '',                      # Or path to database file if using sqlite3.
----

And let's try running the tests again:
.... 
$ python manage.py test
Creating test database for alias 'default'...
..........................................................................................................................................................................................................................................................................................................................................................s........................................................................
----------------------------------------------------------------------
Ran 419 tests in 17.679s

OK (skipped=1)
Destroying test database for alias 'default'...
(book)51:mysite harry$ 
....

419 tests!  We didn't write that many!  Well, with the generic `manage.py test`
command, Django runs all the test for every app you have installed, including
all of its core modules.  Let's get it to run just the test that we've put in
our new `fts` app:

....
$ python manage.py test fts
Traceback (most recent call last):
  File "manage.py", line 10, in <module>
    execute_from_command_line(sys.argv)

    [...lots more traceback]

    raise ImproperlyConfigured("App with label %s could not be found" % app_label)
django.core.exceptions.ImproperlyConfigured: App with label fts could not be found
....

BUT IT'S RIGHT THERE! Unfortunately, just running the `startapp` command and putting
what is obviously an app into your project folder isn't quite enough for Django to
automatically recognise your app.  You have to tell it that you really mean it,
and add it to `settings.py`. Open it up and look for a variable called
`INSTALLED_APPS`:


[source,python]
----
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'fts',
)
----

We'll add `fts` to the bottom of the list.  Don't forget the trailing comma - it may
not be required, but one day you'll be really annoyed when you forget it and Python
concatenates two strings on different lines...

[source,python]
----
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'fts',
)
----

oh balls. undebuggable 'problem loading page' crap
