Testing a simple home page with unit tests
------------------------------------------

We finished the last chapter with a functional test failing, telling us that it
wanted the home page for our site to have ``To-Do'' in its title. It's time to
start working on our application.


Our first Django app, and our first unit test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Django encourages you to structure your code into ``apps'': the theory is that
one project can have many apps, you might re-use the same app in different
projects, and you can use third-party apps developed by other people... Well,
that doesn't happen for every project, but apps can still be a good way of
trying to structure your code.

Let's start an app for our lists:

[subs="specialcharacters,quotes"]
----
$ *python manage.py startapp lists*
----

That will create a folder at 'superlists/lists', next to
'superlists/superlists', and within it a number of placeholder files for
models, views and, of immediate interest to us, tests.

----
.
├── superlists
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── lists
│   ├── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── manage.py
└── functional_tests.py
----


Unit tests, and how they differ from Functional tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As with so many of the labels we put on things, the line between unit tests and
functional tests can become a little blurry at times. The basic distinction,
though, is that functional tests test the application from the outside, from
the point of view of the user, whereas unit tests test the application from the
inside, from the point of view of the programmer.

The TDD approach I'm following wants our application to be covered by
both types of test. Our workflow will look a bit like this:

1.  We start by writing a **functional test**, describing the new functionality
    from the point of view of the user

2.  Once we have a functional test that fails, we start to think about how
    to write code that can get it to pass (or at least to get past its current
    failure). We now use one or more **unit tests** to define how we want our
    code to behave -- the idea is that each line of production code we write
    should be tested by (at least) one of our unit tests

3.  Once we have a failing unit test, we write the smallest amount of
    **application code** we can, just enough to get the unit test to pass.
    We may iterate between steps 2 and 3 a few times, until we think the
    functional test will get a little further.

4.  Now we can re-run our functional tests and see if they pass, or get a
    little further.  That may prompt us to write some new unit tests, and
    some new code, and so on.

I would draw you a flowchart, but I spent a few years working in management
consulting, and I'm afraid I now have a serious aversion to them.  Thankfully
I now have the possibility of explaining by doing.

You can see that, all the way through, the functional tests are driving what 
development we do from a high level, while the unit tests drive what we do
at a low level.

Does that seem slightly redundant? Sometimes it can feel that way, but
functional tests and unit tests do really have very different objectives, and
they will usually end up looking quite different.  Functional tests should help
you build an application with the right functionality, and guarantee you never
accidentally break it.  Unit tests should help you to write code that's clean
and bug free.

Enough theory for now, let's see how it looks in practice.


Unit testing in Django
~~~~~~~~~~~~~~~~~~~~~~

Let's see how to write a unit test for our homepage view then. Open up the new
file at 'lists/tests.py', and you'll see something like this:

[source,python]
----
"""
This file demonstrates writing tests using the unittest module. These will pass
when you run "manage.py test".

Replace this with more appropriate tests for your application.
"""

from django.test import TestCase


class SimpleTest(TestCase):
    def test_basic_addition(self):
        """
        Tests that 1 + 1 always equals 2.
        """
        self.assertEqual(1 + 1, 2)
----
[role="caption"]
lists/tests.py

Django has helpfully put a little placeholder in there for us to write tests
with.  You can see its tests are laid out in a similar pattern to our
functional test, although if you look closely you'll see it's using a special
version of `TestCase` imported from inside Django.  We'll find out more about
why that's useful later.

Let's use this as a starting point to work from.  You've already seen that the
TDD cycle involves starting with a test that fails, then writing code to get it
to pass. Well, before we can even get that far, we want to know that whatever
unit test we're writing will definitely be run by our automated test runner,
whatever it is.  In the case of 'functional_tests.py', we're running it
directly, but this file made by Django is a bit more like magic. So, just to
make sure, let's deliberately break the test and see if we can see it fail.

[source,python]
----
    self.assertEqual(1 + 1, 3)
----
[role="caption"]
lists/tests.py

Now let's invoke this mysterious Django test runner. As usual, it's a
'manage.py' command:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test*]
Creating test database for alias 'default'...
Traceback (most recent call last):
  File "manage.py", line 10, in <module>
    execute_from_command_line(sys.argv)
  File "/usr/local/lib/python2.7/dist-packages/django/core/management/__init__.py",
     line 443, in execute_from_command_line
    utility.execute()
  File "/usr/local/lib/python2.7/dist-packages/django/core/management/__init__.py",
     line 382, in execute
    [...] (lots more traceback hidden)
    self.fetch_command(subcommand).run_from_argv(self.argv)
     line 321, in _create_test_db
    cursor = self.connection.cursor()
  File "/usr/local/lib/python2.7/dist-packages/django/db/backends/dummy/base.py",
     line 15, in complain
    raise ImproperlyConfigured("settings.DATABASES is improperly configured. "
django.core.exceptions.ImproperlyConfigured: settings.DATABASES is improperly
configured. Please supply the ENGINE value. Check settings documentation for
more details.
----

Yuck, that's some pretty ugly traceback! The failure message at the bottom is
actually quite helpful though: the test runner is complaining that the database
settings are improperly configured.  The reason it cares is that the first
thing the Django test runner tries to do is create a test database -- the
assumption is that all Django websites have some kind of database, and you need
a version of that database to run unit tests against. We'll see that in action
in the next chapter.

For now, a test failure means we're allowed to change production code, so
let's open up the 'superlists/settings.py' file. You'll find a whole bunch of
customisable settings in here. Scroll down until you find the line which
defines `DATABASES` and `ENGINE`:


[source,python]
----
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.', # Add 'postgresql_psycopg2', 'mysql', 
                                         #     'sqlite3' or 'oracle'.
        'NAME': '',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. 
                                         #     Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. 
                                         #     Not used with sqlite3.
    }
}
----
[role="caption"]
superlists/settings.py

Helpful comments!  Let's use `sqlite3`, which is the quickest to set up.  We
can always change it later.

[source,python]
----
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', 
        'NAME': '',                      # Or path to database file if using sqlite3.
----
[role="caption"]
superlists/settings.py

Is that enough? Let's try running the test again:



[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test*]
Creating test database for alias 'default'...
...............................................................................
...............................................................................
...............................................................................
...............................................................................
..............................s................................................
........................
 ----------------------------------------------------------------------
Ran 419 tests in 17.679s

OK (skipped=1)
Destroying test database for alias 'default'...
----


419 tests!  We didn't write that many!  Well, with the generic `manage.py test`
command, Django runs all its own unit tests, as well as any tests for your
apps.

More worryingly though, we didn't see a test failure.  Assuming there have been
no changes in the fundamental properties of mathematics, 1 + 1 should not equal 3.
Where is our failing test?

Django will let you run tests for an individual app, by specifying it as a
command-line parameter. Let's try running just the tests for our app, `lists`:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
Traceback (most recent call last):
  File "source/chapter_3/superlists/manage.py", line 10, in <module>
    execute_from_command_line(sys.argv)
    [...] (lots of traceback)
    raise ImproperlyConfigured("App with label %s could not be found" % app_label)
django.core.exceptions.ImproperlyConfigured: App with label lists could not be found
----


'BUT IT'S RIGHT THERE!' Unfortunately, just running the `startapp` command and
having what is obviously an app in your project folder isn't quite enough.  You
have to tell it that you 'really' mean it, and add it to 'settings.py' as well.
Belt and braces. Let's open it up then, and look for a variable called
`INSTALLED_APPS`, to which we'll add `lists`:


[source,python]
----
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Uncomment the next line to enable the admin:
    # 'django.contrib.admin',
    # Uncomment the next line to enable admin documentation:
    # 'django.contrib.admindocs',
    'lists',
)
----
[role="caption"]
superlists/settings.py


You can see there's lots of apps already in there by default (they're some of
the apps that caused all those 419 tests earlier).  We just need to add ours,
`lists`, to the bottom of the list.  Don't forget the trailing comma - it may
not be required, but one day you'll be really annoyed when you forget it and
Python concatenates two strings on different lines...

Now we can try running the tests for `lists` again:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
Creating test database for alias 'default'...
F
======================================================================
FAIL: test_basic_addition (lists.tests.SimpleTest)
 ----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/harry/Dropbox/book/source/chapter_3/superlists/lists/tests.py", line 16, in test_basic_addition
    self.assertEqual(1 + 1, 3)
AssertionError: 2 != 3

 ---------------------------------------------------------------------
Ran 1 test in 0.000s

FAILED (failures=1)
Destroying test database for alias 'default'...
----

That's more like it!  If you like, you can reassure yourself that it gets run
as part of the general command, `manage.py test` as well, and you should see it
now runs 420 tests instead of 419.

This is a good point for a commit:


[subs="specialcharacters,quotes"]
----
$ *git status*
# should show you superlists/settings.py has changed and lists/ is untracked

$ *git add superlists/settings.py*
$ *git add lists*
$ *git diff --staged* # will show you the diff that you're about to commit
$ *git commit -m"Add app for lists, with deliberately failing unit test"*
----

As no doubt you've guessed, the `-m` flag lets you pass in a commit message
at the command-line, so you don't need to go via an editor. It's up to you
to pick the way you like to use the git command-line, I'll just show you 
the main ones I've seen used.


Django's MVC, URLs and view functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Django is broadly structured along a classic 'Model-View-Controller
(MVC)' pattern.  Well, 'broadly'.  It definitely does have models, but its
views are more like a controller, and it's the templates that are actually the
view part, but the general idea is there.  If you're interested, you can
look up the finer points of the discussion
https://docs.djangoproject.com/en/1.4/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names[in
the Django documentation].

But, irrespective of any of that, like any website, Django's main job is to
decide what to do when a user asks for a particular URL on our site.
Django's workflow goes something like this:

* An HTTP **request** comes in for a particular **URL**
* Django uses some rules to decide which **view** function should deal with
  the request (this is referred to as 'resolving' the URL)
* The view function processes the request and returns an HTTP **response**

So we want to test two things:

1.  Can we resolve the URL for the root of the site (``/'') to a particular
    view function we've made?
2.  Can we make this view function return some HTML which will get the 
    functional test to pass?

Let's start with the first. Open up 'lists/tests.py', and change the default
addition test to something like this:


[source,python]
----
from django.core.urlresolvers import resolve
from django.test import TestCase
from lists.views import home_page

class HomePageTest(TestCase):

    def test_root_url_resolves_to_home_page_view(self):
        found = resolve('/')
        self.assertEqual(found.func, home_page)
----
[role="caption"]
lists/tests.py

What's going on here? 

*   `resolve` is the actual function Django uses internally to resolve
    URLs, and find what view function they should map to.  We're checking that
    `resolve`, when called with ``/'', the root of the site, finds a function
    called `home_page`.  
*   What function is that?  It's the view function we're going to
    write next, which will actually return the HTML we want.  You can see from
    the `import` that we're planning to store it in 'lists/views.py'.

So, what do you think will happen when we run the tests?



[subs="specialcharacters,quotes"]
----
$ *python manage.py test lists*
Traceback (most recent call last):
  File "source/chapter_3/superlists/manage.py", line 10, in <module>
    execute_from_command_line(sys.argv)
    [...] (lots of traceback)
    from lists.views import home_page
ImportError: cannot import name home_page
----


It's a very predictable and uninteresting failure: we tried to import something
we haven't even written yet, but it's still good news. We have both a
failing functional test and a failing unit test, we have the testing goat's
full blessing to code away.


At last!  We actually write some application code!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is exciting isn't it?  Well, be warned: TDD means that long periods of
anticipation are only defused very gradually, and by tiny increments.
Especially since we're learning and only just starting out, we only allow
ourselves to change (or add) one line of code at a time -- and each time, we
make just the minimal change required to address the current test failure.

I'm being deliberately extreme here, but what's our current test failure? 
We can't import `home_page` from `lists.views`?  OK, let's fix that -- and only
that.  In 'lists/views.py':

[source,python]
----
# Create your views here.
home_page = None
----
[role="caption"]
lists/views.py

``YOU MUST BE JOKING!'', I can hear you say.  I can hear you because it's what
I used to say (with considerable emotion) when my colleagues first demonstrated
TDD to me.  Well, bear with me, we'll talk about whether or not this is all
taking it too far in a little while.  For now, let yourself follow along, even
if it's with some exasperation, and see where it takes us.

Let's run the tests again:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
Creating test database for alias 'default'...
E
======================================================================
ERROR: test_root_url_resolves_to_home_page_view (lists.tests.HomePageTest)
 ----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/harry/Dropbox/book/source/chapter_3/superlists/lists/tests.py", line 10,
        in test_root_url_resolves_to_home_page_view
    found = resolve('/')
  File "/usr/local/lib/python2.7/dist-packages/django/core/urlresolvers.py", line 420,
        in resolve
    return get_resolver(urlconf).resolve(path)
  File "/usr/local/lib/python2.7/dist-packages/django/core/urlresolvers.py", line 315,
        in resolve
    raise Resolver404({'tried': tried, 'path': new_path})
Resolver404: {'path': '', 'tried': []}

 ----------------------------------------------------------------------
Ran 1 test in 0.002s

FAILED (errors=1)
----

OK, a different error - now we find that trying to resolve ``/'' raises a 404
error -- in other words, Django can't find a mapping for ``/''.  Let's help
it out.

urls.py
~~~~~~~

Django uses a file called 'urls.py' to define how URLs map to view functions. 
There's a main 'urls.py' for the whole site is in the
'superlists/superlists' folder. Let's go take a look:


[source,python]
----
from django.conf.urls import patterns, include, url

# Uncomment the next two lines to enable the admin:
# from django.contrib import admin
# admin.autodiscover()

urlpatterns = patterns('',
    # Examples:
    # url(r'^$', 'superlists.views.home', name='home'),
    # url(r'^superlists/', include('superlists.foo.urls')),

    # Uncomment the admin/doc line below to enable admin documentation:
    # url(r'^admin/doc/', include('django.contrib.admindocs.urls')),

    # Uncomment the next line to enable the admin:
    # url(r'^admin/', include(admin.site.urls)),
)
----
[role="caption"]
superlists/urls.py

As usual, lots of helpful comments and default suggestions from Django.

A `url` entry starts with a regular expression that defines which URLs it
applies to, and goes on to say where it should send those request -- either to
a dot-notation encoded function like `superlists.views.home`, or maybe to
another 'urls.py' file somewhere else using `include`.

The first commented-out entry in `urlpatterns` has the regular expression `^$`,
which means an empty string -- could this be the same as the root of our site,
which we've been testing with ``/''?  Let's find out -- what happens if we
uncomment that line?

NOTE: If you've never come across regular expressions, you can get away with
just taking my word for it, for now -- but you should make a mental note to
go learn about them!

[source,python]
----
urlpatterns = patterns('',
    # Examples:
    url(r'^$', 'superlists.views.home', name='home'),
----
[role="caption"]
superlists/urls.py

And run the unit tests again, *`python manage.py test lists`*:

----
ViewDoesNotExist: Could not import superlists.views.home. Parent module
superlists.views does not exist.
----

That's progress!  We're no longer getting a 404, instead Django is complaining
that the dot-notation `superlists.views.home` doesn't point to a real view.
Let's fix that, by pointing it towards our placeholder `home_page` object,
which is inside 'lists', not 'superlists':


[source,python]
----
urlpatterns = patterns('',
    # Examples:
    url(r'^$', 'lists.views.home_page', name='home'),
----
[role="caption"]
superlists/urls.py

And the run the tests again:

----
ViewDoesNotExist: Could not import lists.views.home_page. View is not callable.
----

The unit tests have made the link between the url '/' and the `home_page = None` in 'lists/views.py', and are now complaining that `home_page` isn't a callable,
ie it's not a function. Now we've got a justification for changing it from
being `None` to being an actual function.  Every single code change is driven
by the tests. So, back in 'lists/views.py':


[source,python]
----
# Create your views here.

def home_page():
    pass
----
[role="caption"]
lists/views.py


And now?


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
Creating test database for alias 'default'...
.
 ----------------------------------------------------------------------
Ran 1 test in 0.003s

OK
----

Hooray! Our first ever unit test pass!  You know what, that's so momentous that
I think it's worthy of a commit:


[subs="specialcharacters,quotes"]
----
$ *git diff* # should show changes to urls.py, tests.py, and views.py
$ *git commit -am"First unit test and url mapping, dummy view"*
----

That's the last variation on `git commit` I'll show, the `a` and `m` flags
together, which adds all changes to tracked files and uses the commit message
from the command-line. It's the quickest, but also gives you the least feedback
about what's being committed, so make sure you've done a `git status` and a
`git diff` beforehand, and are clear on what changes are about to go in.


Unit testing a view
~~~~~~~~~~~~~~~~~~~

Onto writing a test for our view, so that it can be something more than a 
do-nothing function, and instead be a function that return a real response
with HTML to the browser. Open up 'lists/tests.py', and add a new
'test method'. I'll explain each bit:


[source,python]
----
from django.core.urlresolvers import resolve
from django.test import TestCase
from django.http import HttpRequest
from lists.views import home_page

class HomePageTest(TestCase):

    def test_root_url_resolves_to_home_page_view(self):
        found = resolve('/')
        self.assertEqual(found.func, home_page)


    def test_home_page_returns_correct_html(self):
        request = HttpRequest() <1>
        response = home_page(request) <2>
        self.assertTrue(response.content.startswith('<html>')) <3>
        self.assertIn('<title>To-Do lists</title>', response.content) <4>
        self.assertTrue(response.content.endswith('</html>')) <5>
----
[role="caption"]
lists/tests.py

What's going on in this new test?  

* We create an `HttpRequest` object, which is what Django will see when
a user's browser asks for a page. <1>
* We pass it to our `home_page` view. <2>
* We get a response from the view. You won't be surprised to hear that this
object is of a class called `HttpResponse`. <2>
* Then, we assert that the `.content` of the response -- which is the HTML that
we send to the user -- has certain properties:
    - We want it to start with an `<html>` tag <3> which gets closed at the end
      <5>
    - And we want a `<title>` tag somewhere in the middle, with the word
    ``To-Do'' in <4> -- because that's what we specified in our functional
    test.

Once again, the unit test is driven by the functional test, but it's also
much closer to the actual code -- we're thinking like programmers now.

Let's run the unit tests now and see how we get on:

----
TypeError: home_page() takes no arguments (1 given)
----

The unit test / code cycle
^^^^^^^^^^^^^^^^^^^^^^^^^^

We can start to settle into the TDD 'unit test / code cycle' now:

* in the terminal, run the unit tests and see how they fail
* in the editor, make a minimal code change to address the current test failure

And repeat! 

The more nervous we are about getting our code right, the smaller and more
minimal we make each code change -- the idea is to be absolutely sure that each
bit of code is justified by a test. It may seem laborious, but once you get 
into the swing of things, it really moves quite fast -- so much so that,
at work, we usually keep our code changes microscopic even when we're
confident we could skip ahead.

Let's see how fast we can get this cycle going:

* Minimal code change:

[source,python]
----
def home_page(request):
    pass
----
[role="caption"]
lists/views.py

* Tests:

----
    self.assertTrue(response.content.startswith('<html>'))
AttributeError: 'NoneType' object has no attribute 'content'
----

* Code - we use `django.http.HttpResponse`, as predicted:

[source,python]
----
from django.http import HttpResponse

def home_page(request):
    return HttpResponse()
----
[role="caption"]
lists/views.py

* Tests again:

----
    self.assertTrue(response.content.startswith('<html>'))
AssertionError: False is not true
----

* Code again:

[source,python]
----
def home_page(request):
    return HttpResponse('<html>')
----
[role="caption"]
lists/views.py

* Tests:

----
AssertionError: '<title>To-Do lists</title>' not found in '<html>'
----

* Code:


[source,python]
----
def home_page(request):
    return HttpResponse('<html><title>To-Do lists</title>')
----
[role="caption"]
lists/views.py

* Tests -- almost there?

----
    self.assertTrue(response.content.endswith('</html>'))
AssertionError: False is not true
----

* Come on, one last effort:


[source,python]
----
def home_page(request):
    return HttpResponse('<html><title>To-Do lists</title></html>')
----
[role="caption"]
lists/views.py


* Surely?

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
Creating test database for alias 'default'...
..
 ---------------------------------------------------------------------
Ran 2 tests in 0.001s

OK
----

YES!  Now, let's run our functional tests (it feels like the final heat
of the race here, surely this is it... could it be...?)

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python functional_tests.py*]
[13/Feb/2013 18:44:05] "GET / HTTP/1.1" 200 39
F
======================================================================
FAIL: test_can_start_a_list_and_retrieve_it_later (__main__.NewVisitorTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "functional_tests.py", line 20, in test_can_start_a_list_and_retrieve_it_later
    self.fail('Finish the test!')
AssertionError: Finish the test!

 ---------------------------------------------------------------------
Ran 1 test in 1.609s

FAILED (failures=1)
----

FAILED? What? Oh, it's an expected fail? Yes? Yes! We have a web page!

Ahem.  Well,  'I' thought it was a thrilling end to the chapter. You may still
be a little baffled, perhaps keen to hear a justification for all these tests,
but I hope you felt just a tinge of the excitement near the end there.

Just a little commit to calm down, and reflect on what we've covered

[subs="specialcharacters,quotes"]
----
$ *git diff* # should show our new test in tests.py, and the view in views.py
$ *git commit -am"Basic view now returns minimal HTML"*
----


That was quite a chapter! Why not try typing `git log`, possibly using the
`--oneline` flag, for a reminder of what we got up to:



[subs="specialcharacters,quotes"]
----
$ *git log --oneline*
a6e6cc9 Basic view now returns minimal HTML
450c0f3 First unit test and url mapping, dummy view 
ea2b037 Add app for lists, with deliberately failing unit test
[...]
----

Not bad -- we covered:

* Starting a Django app
* The Django unit test runner
* The difference between FTs and unit tests
* Django url resolving and urls.py
* Django view functions, request and response objects
* And returning basic HTML

.Useful commands and concepts
*******************************************************************************
Running the Django dev server::
    *`python manage.py runserver`*

Running the functional tests::
    *`python functional_tests.py`*

Running the unit tests::
    *`python manage.py test lists`*

The unit test / code cycle::
    * run the unit tests in the terminal
    * make a minmal code change in the editor
    * repeat!

*******************************************************************************

