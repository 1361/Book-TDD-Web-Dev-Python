User authentication, the admin site and integrating 3rd party plugins
---------------------------------------------------------------------

So our beautiful lists site has been live for a few days, and our users are
starting to come back to us with feedback.  "We love the site", they say, "but
we keep losing our lists.  Manually remembering URLs is hard. It'd be great if
it could remember what lists we'd started"

Remember Henry Ford and faster horses. Whenever you hear a user requirement,
it's important to dig a little deeper and think -- what is the real requirement
here?  And how can I make it involve a cool new technology I've been wanting
to try out?

Clearly the requirement here is that people want to have some kind of user
account on the site.  So, without further ado, let's dive into authentication.

Naturally we're not going to mess about with remembering passwords ourselves
-- besides being 'so' 90s, secure storage of user passwords is a security
nightmare we'd rather leave to someone else.  We'll use federated
authentication system instead.

NOTE: If you 'insist' on storing your own passwords, Django's default auth module
ready and waiting for you. It's nice and straightforward, and I'll leave it to
you to discover on your own.


Mozilla Persona (Browser-ID)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

But which federated authentication system?  Oauth?  Openid?  "Login with
Facebook"?   Ugh.  In my book those all have unacceptable creepy overtones,
why should Google or Facebook know what sites you're logging into and when?
Thankfully there are still some techno-hippy-idealists out there, and the
lovely people at Mozilla have cooked up a privacy-friendly auth mechanism
they call "Persona", or sometimes "browser-id".  

The theory goes that your web browser acts as a third party between the
website that wants to check your ID, and the website that you will use
as a guarantor of your ID.  This latter may be Google or Facebook or whomever,
but a clever protocol means that they never need know which website you were
logging into or when.

Ultimately, Persona may never take off as an authentication platform, but
the main lessons from this chapter should be relevant no matter what 3rd
party auth system you want to integrate:

* Don't test other people's code or APIs
* But, test that you've integrated them correctly into your own code
* Check everything works from the point of view of the user
* Test that your system degrades gracefully if the third party is 
down


Exploratory coding, aka "spiking"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Before I wrote this chapter all I'd seen of Persona was a talk at PyCon by Dan
Callahan, in which he promised it could be implemented in 30 lines of code, and
magic'd his way through a demo -- in other words, I knew it not at all.

In the last chapter we saw that you can use a unit test as a way of
exploring a new API, but sometimes you just want to hack something together
without any tests at all, just to see if it works, to learn it or get a feel for
it.  That's absolutely fine.  When learning a new tool or exploring a new
possible solution, it's often appropriate to leave the rigorous TDD process to
one side, and build a little prototype without tests, or perhaps with very few
tests.  The goat doesn't mind looking the other way for a bit.

This kind of prototyping activity is often called a "spike", for 
http://stackoverflow.com/questions/249969/why-are-tdd-spikes-called-spikes[reasons
best known]

The first thing I did was take a look at an existing  django-persona integration
called https://github.com/mozilla/django-browserid[Django-BrowserID], but
unfortunately it didn't really support Python 3.  I'm sure it will by the time
you read this, but I was quietly relieved since I was rather looking forward
to writing my own code for this! 

It took me about 3 hours of hacking about, using a combination of code stolen
from Dan's talk and the example code on the
https://developer.mozilla.org/en-US/docs/Mozilla/Persona[Persona site], but by
the end I had something which just about works.  I'll take you on a tour,
and then we'll go through and "de-spike" the implementation.  Don't worry
about adding any of this code to your own source tree yet.

Let's start with the front-end -- oh noes, JavaScript!  Thankfully I was able
to cut & paste code from the Persona site and Dan's slides with essentially
no modification:

NOTE: 


[source,html]
.lists/templates/base.html
----
        <script src="/static/bootstrap/js/bootstrap.min.js"></script>
        <script src="https://login.persona.org/include.js"></script>
        <script>
            $(document).ready(function() {

var loginLink = document.getElementById('login');
if (loginLink) {
  loginLink.onclick = function() { navigator.id.request(); };
}

var logoutLink = document.getElementById('logout');
if (logoutLink) {
  logoutLink.onclick = function() { navigator.id.logout(); };
}

var currentUser = '{{ user.email }}' || null;
var csrf_token = '{{ csrf_token }}';
console.log(currentUser);

navigator.id.watch({
  loggedInUser: currentUser,
  onlogin: function(assertion) {
    $.post('/accounts/login', {assertion: assertion, csrfmiddlewaretoken: csrf_token})
    .done(function() { window.location.reload(); })
    .fail(function() { navigator.id.logout();});
  },
  onlogout: function() {
    $.post('/accounts/logout')
    .always(function() { window.location.reload(); });
  }
});

            });
        </script>
----

The Persona JavaScript library gives us a special `navigator.id` object.
We bind its `request` method to our a link called "login" (which I've put
in any old where at the top of the page), and similarly a "logout" link 
gets bound to a `logout` function.

Persona will now pop up its authentication dialog box if users
click the log in link. What happens next is the clever part of the Persona
protocol:  the user enters an email address, and the browser takes care
of validating that email address, by taking the user to the email provider
(Google, Yahoo or whoever), and validating it with them. 

Let's say it's Google: Google asks the user to confirm their username and
password, and maybe even does some two-factor auth wizardry, and is then
prepared to confirm to your browser that you are who you say you are.  Google
then passes a certificate back to the browser, which is cryptographically
signed to prove it's from Google, and which contains the user's email address.

At this point the browser can trust that you do own that email address, and
it can incidentally re-use that certificate for any other websites that use
Persona.

For now, it combines the certificate with the domain name of the website
you want to log into into a blob called an "assertion", and sends them on
to our site for validation.

This is the point between the `navigator.id.request` and the
`navigator.id.watch` callback for `onlogin` - we send the assertion via
POST to the login URL on our site, which I've put at 'accounts/login'.

On the server, we now have the job of verifying the assertion: is it really
proof that the user owns that email address?  Our server can check, because
Google has signed part of the assertion with its public key.  We can either
write code to do the crypto for this step ourselves, or we can use a public
service from Mozilla to do it for us?

NOTE: yes, letting Mozilla do it for us totally defeats the whole privacy
point, but it's the 'principle'. We could do it ourselves if we wanted to.
It's left as an exercise for the reader!  There's more details on the 
https://developer.mozilla.org/en-US/docs/Mozilla/Persona/Protocol_Overview[Mozilla
site], including all the clever public key crypto that keeps Google from 
knowing what site you want to log into, but also stops replay attacks and
so on. Smart.


Here's the view that handles the POST to 'accounts/login':

[source,python]
.accounts/views.py
----
from django.contrib.auth import authenticate
from django.contrib.auth import login as auth_login
from django.shortcuts import redirect

def login(request):
    print('login view', file=sys.stderr)
    #user = PersonaAuthenticationBackend().authenticate(request.POST['assertion'])
    user = authenticate(assertion=request.POST['assertion'])
    if user is not None:
        auth_login(request, user)
    return redirect('/')
----

And here's the `authenticate` function, which is implemented as a custom
Django authentication backend (we could have done it inline in the view,
but using an authentication backend will let us re-use the authentication
system in the admin site, for example.

//TODO: check, is this actually true?

[source,python]
.accounts/authentication.py
----
from accounts.models import ListUser

class PersonaAuthenticationBackend(object):

    def authenticate(self, assertion):
        # Send the assertion to Mozilla's verifier service.
        data = {'assertion': assertion, 'audience': 'localhost'}
        print('sending to mozilla', data, file=sys.stderr)
        resp = requests.post('https://verifier.login.persona.org/verify', data=data)
        print('got', resp, file=sys.stderr)

        # Did the verifier respond?
        if resp.ok:
            # Parse the response
            verification_data = resp.json()

            # Check if the assertion was valid
            if verification_data['status'] == 'okay':
                email = verification_data['email']
                try:
                    return self.get_user(email)
                except ListUser.DoesNotExist:
                    return ListUser.objects.create(email=email)


    def get_user(self, email):
        return ListUser.objects.get(email=email)
----

This code is copy-pasted directly from the Mozilla site, as you can see from 
the explanatory comments.  To finish off the job of customising authentication
in Django, we just need a custom user model:

[source,python]
.accounts/models.py
----
class ListUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(primary_key=True)
    USERNAME_FIELD = 'email'
    #REQUIRED_FIELDS = ['email', 'height']

    objects = ListUserManager()

    @property
    def is_staff(self):
        return self.email == 'harry.percival@gmail.com'

    @property
    def is_active(self):
        return True
----

That's what I call a minimal user model!  One field, none of this
firstname/lastname/username nonsense, and, pointedly, no password! 
Somebody else's problem!   But you can see that this code isn't ready
for production, from the commented-out lines to the hard-coded harry
email address.

NOTE: At this point I'd recommend a little browse through the 
https://docs.djangoproject.com/en/1.5/topics/auth/customizing/[Django 
auth documentation]

Aside from that, all you need is a model manager for the user:

[source,python]
.accounts/models.py
----
class ListUserManager(BaseUserManager):

    def create_user(self, email):
        ListUser.objects.create(email=email)

    def create_superuser(self, email, password):
        self.create_user(email)
----

And a logout view:


[role="sourcecode"]
.lists/tests.py
[source,python]
----
def logout(request):
    auth_logout(request)
    return redirect('/')
----

Why not spin up a dev server with `runserver` and see how it all looks?

TODO: screenshot

That's pretty much it! Along the way, I had to fight pretty hard, including
debugging ajax requests by hand in the Firefox console, catching infinite
page-refresh loops, stumbling over several missing attributes on my custom user
model (because I didn't read the docs properly), and finally discovering that
we have to upgrade to the dev version of Django to actually get it to work in
the admin site.  But we now have a working solution!  Time to de-spike

//TODO screenshot ajax debug



BUG - if want to use admin site, will need to upgrade to 1.6 beta!

http://stackoverflow.com/questions/16983547/django-problems-with-id-in-custom-usermodel/18458659#18458659



De-Spiking
~~~~~~~~~~

bla


Javascript tests
~~~~~~~~~~~~~~~~

topic for next chapter!


Deploy
~~~~~~

south etc

