More advanced Forms 
-------------------

Now let's look at some more advanced forms usage.  We've helped our users
to avoid blank list items, let's help them avoid duplicate items.

NOTE: If any chapter is going to get the chop, this is a likely one. So,
please do let me know what you think:  is it valuable?  Which are your
favourite and least favourite bits?  What would you try and preserve
from it, if it were to disappear?


Another FT for duplicate items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We add a second test method to `ItemValidationTest`:

[role="sourcecode"]
.functional_tests/tests/test_list_item_validation.py (ch09l027)
[source,python]
----
def test_cannot_add_duplicate_items(self):
    # Edith goes to the home page and starts a new list
    self.browser.get(self.server_url)
    self.get_item_input_box().send_keys('Buy wellies\n')
    self.check_for_row_in_list_table('1: Buy wellies')

    # She accidentally tries to enter a duplicate item
    self.get_item_input_box().send_keys('Buy wellies\n')

    # She sees a helpful error message
    self.check_for_row_in_list_table('1: Buy wellies')
    error = self.browser.find_element_by_css_selector('.error')
    self.assertEqual(error.text, "You've already got this in your list")
----

Why have two test methods rather than extending one, or having a new file
and class?  It's a judgement call.  These two feel closely related, they're
both about validation on the same input field, so it feels right to
keep them in the same file.  On the other hand, they're logically separate
enough that it's practical to keep them in different methods.


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests.ItemValidationTest*] 
[...]
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate
element: {"method":"css selector","selector":".error"}' ; Stacktrace: 

Ran 2 tests in 9.613s
----

OK, so we know the first of the two tests passes now, is there a way to run
just the failing one, I hear you ask!  Why yes indeed:

//TODO: unskip
[role="skipme"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test \
functional_tests.ItemValidationTest.test_cannot_add_duplicate_items*] 
[...]
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate
element: {"method":"css selector","selector":".error"}' ; Stacktrace: 
----


Preventing duplicates at the model layer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We add another test to our model unit tests to check that duplicate items
in the same list raise an error

[role="sourcecode"]
.lists/tests/test_models.py (ch09l028)
[source,python]
----
def test_cannot_save_duplicate_items(self):
    list1 = List.objects.create()
    Item.objects.create(list=list1, text='bla')
    with self.assertRaises(ValidationError):
        Item.objects.create(list=list1, text='bla')
----

And, while it occurs to us, we add another test to make sure we don't 
overdo it on our integrity constraints:


[role="sourcecode"]
.lists/tests/test_models.py (ch09l029)
[source,python]
----
def test_CAN_save_same_item_to_different_lists(self):
    list1 = List.objects.create()
    list2 = List.objects.create()
    Item.objects.create(list=list1, text='bla')
    Item.objects.create(list=list2, text='bla') # should not raise
----

I always like to put a little comment for tests which are checking 
that a particular use case should 'not' raise an error, otherwise
it can be hard to see what's being tested.

----
AssertionError: ValidationError not raised
----

If we want to get it deliberately wrong, we can do this:


[role="sourcecode"]
.lists/models.py (ch09l030)
[source,python]
----
class Item(models.Model):
    text = models.TextField(unique=True)
    list = models.ForeignKey(List)
----

That lets us check that our second test really does pick up on this
problem:

----
Traceback (most recent call last):
  File "/workspace/superlists/lists/tests/test_models.py", line 60, in
test_CAN_save_same_item_to_different_lists
    Item.objects.create(list=list2, text='bla') # should not raise
    [...]
django.core.exceptions.ValidationError: {'text': ['Item with this Text already
exists.']}
----

.An aside on when to test for developer stupidity
*******************************************************************************
One of the judgement calls in testing is when you should write tests that sound
like "check we haven't done something stupid".  In general, you should be wary
of these.

In this case, we've written a test to check that you can't save duplicate items
to the same list.  Now, the simplest way to get that test to pass, the way in
which you'd write the least lines of code, would be to make it impossible to
save 'any' duplicate items.  That justifies writing another test, despite the
fact that it would be a "stupid" or "wrong" thing for us to code.

But you can't be writing tests for every possible way we could have coded
something wrong.  If you have a function that adds two numbers, you can write
a couple of tests:

[role="skipme"]
[source,python]
----
assert adder(1, 1) == 2
assert adder(2, 1) == 3
----

But you have the right to assume that the implementation isn't deliberately
screwey or perverse:

[role="skipme"]
[source,python]
----
def adder(a, b):
    # unlikely code!
    if a = 3:
        return 666
    else:
        return a + b
----

One way of putting it is that you should trust yourself not to do something
'deliberately' stupid, but not to do something 'accidentally' stupid.
*******************************************************************************

Just like ModelForms, models have a `class Meta`, and that's where we can
implement a constraint which says that that an item must be unique for a
particular list, or in other words, that text and list must be unique together:

[role="sourcecode"]
.lists/models.py (ch09l031)
[source,python]
----
class Item(models.Model):
    text = models.TextField()
    list = models.ForeignKey(List)

    class Meta:
        unique_together = ('list', 'text')


    def save(self, *args, **kwargs):
        [...]
----

You might want to take a quick peek at the 
https://docs.djangoproject.com/en/1.5/ref/models/options/[Django docs on model
meta attributes] at this point.


A little digression on Queryset ordering and string representations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


When we run the tests they reveal an unexpected failure:

----
======================================================================
FAIL: test_saving_and_retrieving_items
(lists.tests.test_models.ListAndItemModelsTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "/workspace/superlists/lists/tests/test_models.py", line 31, in
test_saving_and_retrieving_items
    self.assertEqual(first_saved_item.text, 'The first (ever) list item')
AssertionError: 'Item the second' != 'The first (ever) list item'
- Item the second
[...]
----

That's a bit of a puzzler. A bit of print-based debugging:

[role="skipme"]
[role="sourcecode"]
.lists/tests/test_models.py
[source,python]
----
    first_saved_item = saved_items[0]
    print(first_saved_item.text)
    second_saved_item = saved_items[1]
    print(second_saved_item.text)
    self.assertEqual(first_saved_item.text, 'The first (ever) list item')
----

Will show us...

[role="skipme"]
----
.....Item the second
The first (ever) list item
F.....
----

It looks like our uniqueness constraint has messed with the default ordering
of queries like `Item.objects.all()`.  Although we already have a failing test,
it's best to add a new test that explicitly tests for ordering:


[role="sourcecode"]
.lists/tests/test_models.py (ch09l032)
[source,python]
----
    def test_list_ordering(self):
        list1 = List.objects.create()
        item1 = Item.objects.create(list=list1, text='i1')
        item2 = Item.objects.create(list=list1, text='item 2')
        item3 = Item.objects.create(list=list1, text='3')
        self.assertEqual(
            Item.objects.all(),
            [item1, item2, item3]
        )
----


That gives us a new failure, but it's not a very readable one:

----
AssertionError: [<Item: Item object>, <Item: Item object>, <Item: Item object>]
!= [<Item: Item object>, <Item: Item object>, <Item: Item object>]
----

We need a better string representation for our objects.  Let's add another
unit tests:


NOTE: Ordinarily you would be wary of adding more failing tests when you
already have some -- it makes reading test output that much more complicated,
and just generally makes you nervous. Will we ever get back to a working
state? In this case, they're all quite simple tests, so I'm not worried.

[role="sourcecode"]
.lists/tests/test_models.py (ch09l033)
[source,python]
----
def test_string_representation(self):
    list1 = List.objects.create() 
    item1 = Item.objects.create(list=list1, text='some text')
    self.assertEqual(str(item1), item1.text)
----

That gives us:

----
AssertionError: 'Item object' != 'some text'
----

As well as the other two failures.  Let's start fixing them all now:


[role="sourcecode"]
.lists/models.py (ch09l034)
[source,python]
----
class Item(models.Model):
    [...]

    def __str__(self):
        return self.text
----

NOTE: in Python 2.x versions of Django, the string representation method used
to be __unicode__. Like much string handling, this is simplified in Python 3.
See the
https://docs.djangoproject.com/en/1.5/topics/python3/#str-and-unicode-methods[docs].


Now we're down to 2 failures, and the ordering test has a more readable failure
message:

----
AssertionError: [<Item: 3>, <Item: i1>, <Item: item 2>] != [<Item: i1>, <Item:
item 2>, <Item: 3>]
----

We can fix that in the class Meta:

[role="sourcecode"]
.lists/models.py (ch09l035)
[source,python]
----
    class Meta:
        ordering = ('id',)
        unique_together = ('list', 'text')
----

Does that work?

----
AssertionError: [<Item: i1>, <Item: item 2>, <Item: 3>] != [<Item: i1>, <Item:
item 2>, <Item: 3>]
----

Urp?  It has worked, you can see the items 'are' in the same order, but the
tests are confused.  I keep running into this problem actually -- Django
querysets don't compare well with lists.  We can fix it by converting the
queryset to a list in our test:

TODO: investigate new Django test helper, "assertQuerySetEqual"?

[role="sourcecode"]
.lists/tests/test_models.py (ch09l036)
[source,python]
----
    self.assertEqual(
        list(Item.objects.all()),
        [item1, item2, item3]
    )
----

That works, we get a fully passing test suite:

----
OK
----

Time for a commit!


[subs="specialcharacters,quotes"]
----
$ *git diff*
$ *git commit -am "Implement duplicate item validation at model layer"*
----

The next task is to handle the validation error in the view. Before we do that,
a quick aside, for the curious. Do you remember I mentioned earlier that some
data integrity errors 'are' picked up on save?  Try temporarily disabling our
`.full_clean` in the model save:

[role="sourcecode"]
.lists/models.py
[source,python]
----
    def save(self, *args, **kwargs):
        #self.full_clean()
        super().save(*args, **kwargs)
----

That gives

----
ERROR: test_cannot_save_duplicate_items
(lists.tests.test_models.ListAndItemModelsTest)
    return Database.Cursor.execute(self, query, params)
django.db.utils.IntegrityError: columns list_id, text are not unique

[... and a bunch of other failures due to validation not working any more]
----

Note that it's a different error to the one we want, an `IntegrityError` 
instead of a `ValidationError`.  


Handling validation at the views layer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Let's put our `full_clean` back, and try running our FT, just to see where we
are:

[role="dofirst-ch09l035"] 
----
selenium.common.exceptions.NoSuchElementException: Message: 'Unable to locate
element: {"method":"id","selector":"id_list_table"}' ; Stacktrace: 
----

In case you didn't see it as it flew past, the site is 500ing.  A
quick unit test at the view level ought to clear this up:


Returning different error messages for different validation errors
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

[role="sourcecode"]
.lists/tests/test_views.py (ch11l014)
[source,python]
----
    def test_invalid_input_renders_form_with_errors(self):
        [...]


    def test_duplicate_item_validation_errors_end_up_on_lists_page(self):
        list1 = List.objects.create()
        item1 = Item.objects.create(list=list1, text='textey')
        response = self.client.post(
            '/lists/%d/' % (list1.id,),
            data={'text': 'textey'}
        )

        expected_error =  escape("You've already got this in your list")
        self.assertContains(response, expected_error)
        self.assertTemplateUsed(response, 'list.html')
        self.assertEqual(Item.objects.all().count(), 1)
----

Gives

----
django.core.exceptions.ValidationError: {'__all__': ['Item with this List and
Text already exists.']}
----

Here's one possible solution:

[role="sourcecode"]
.lists/views.py (ch11l015)
[source,python]
----
if form.is_valid():
    try:
        Item.objects.create(text=request.POST['text'], list=list_)
        return redirect(list_)
    except ValidationError:
        form.errors.update({'text': "You've already got this in your list"})
return render(request, 'list.html', {'list': list_, "form": form})
----

OK, we know that's an ugly hack, we need to use a form, just like
we did for new lists, but -- it will probably work. 

----
Ran 23 tests in 0.104s

OK
----

----
Ran 4 tests in 19.048s

OK
----

What matters is that it gets us to 'Green'. We'll definitely do the 'Refactor'
part very soon. First, a commit.

[subs="specialcharacters,quotes"]
----
$ *git diff*
$ *git commit -am"duplicate item validation hacked in at views level"*
----


A more complex form to handle uniqueness validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The form to create a new list only needs to know one thing, the new item text.
A form which validates that list items are unique needs to know both.  

We duplicate up our tests for the previous form, tweaking them slightly:

[role="sourcecode"]
[source,python]
.lists/tests/test_forms.py (ch09l070)
----
from lists.forms import (
    DUPLICATE_ITEM_ERROR, EMPTY_LIST_ERROR,
    ExistingListItemForm, ItemForm
)
from lists.models import Item, List
[...]

class ExistingListItemFormTest(TestCase):

    def test_form_renders_item_text_input(self):
        form = ExistingListItemForm()
        self.assertIn('placeholder="Enter a to-do item"', form.as_p())


    def test_form_validation_for_blank_items(self):
        listey = List.objects.create()
        form = ExistingListItemForm(data={'list': listey.id, 'text': ''})
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['text'], [EMPTY_LIST_ERROR])


    def test_form_validation_for_duplicate_items(self):
        listey = List.objects.create()
        Item.objects.create(list=listey, text='no twins!')
        form = ExistingListItemForm(data={'list': listey.id, 'text': 'no twins!'})
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors['text'], [DUPLICATE_ITEM_ERROR])
----

NOTE: I've decided to go for an approach where we pass the list in
as part of the data argument. An alternative would be to pass it in
as a custom argument to the constructor.  I've found that made validation
uglier rather than more attractive, but I'm very open to suggestions!  I 
may have missed something.  Please do submit pull requests!  The repo for
the project is on Github, just find the branch for the chapter we're working
on... https://github.com/hjwp/book-example/


Let's start with a minimal class:

[role="sourcecode"]
.lists/forms.py (ch09l071)
[source,python]
----
DUPLICATE_ITEM_ERROR = "You've already got this in your list"
[...]
class ExistingListItemForm(forms.Form):
    pass
----

Gives

----
AssertionError: 'placeholder="Enter a to-do item"' not found in ''
AssertionError: True is not false
AssertionError: True is not false
----


Now let's see if making it inherit from our existing form helps:

[role="sourcecode"]
.lists/forms.py (ch09l072)
[source,python]
----
class ExistingListItemForm(ItemForm):
    pass
----

That takes us down to just one failure:

----
FAIL: test_form_validation_for_duplicate_items
(lists.tests.test_forms.ExistingListItemFormTest)
    self.assertFalse(form.is_valid())
AssertionError: True is not false
----

We'll need to override the fields list from our parent form class.  We 
can do this by inheriting the class `Meta` (you know, I didn't know this
would work before I set off writing this chapter.  It's pretty cool):

[role="sourcecode"]
.lists/forms.py
[source,python]
----
class ExistingListItemForm(ItemForm):

    class Meta(ItemForm.Meta):
        fields = ('list', 'text')
----

We now get a little further:

----
KeyError: 'text'
----

Hm, a little debugging required.  Let's try this in our test:

[role="sourcecode"]
.lists/tests/test_forms.py (ch09l074)
[source,python]
----
    self.assertFalse(form.is_valid())
    self.fail(dict(form.errors))
    self.assertEqual(form.errors['text'], [DUPLICATE_ITEM_ERROR])
----

Gives us:

----
AssertionError: {'__all__': ['Item with this List and Text already exists.']}
----

Right,  Django puts uniqueness validation errors into a special `__all__` key,
because it's not clear which field it should apply to -- list or item.  We
want it to be in the `text` field though.


.Development-driven tests: using unit tests for exploratory coding.
*******************************************************************************
Does this feel a bit like development-driven-tests?  That's OK, now 
and again.  

When you're exploring a new API, you're absolutely allowed to mess about with
it for a while before you get back to rigorous TDD.  You might use the 
interactive console, or write some exploratory code (but you have to promise
the testing goat that you'll throw it away and re-write it properly later)

Here we're actually using a unit test as a way of experimenting with the
forms API. It's actually a pretty good way of learning how it works!
*******************************************************************************


One more little customisation should do it:  Django uses a method called
`validate_unique` for this check, which we can customise:

[role="sourcecode"]
.lists/forms.py
[source,python]
----
class ExistingListItemForm(ItemForm):
    [...]


    def validate_unique(self):
        super().validate_unique()
        if self.non_field_errors(): #<1>
            self._update_errors({'text': [DUPLICATE_ITEM_ERROR]}) #<2>
----

We use a couple of special Django methods here:

<1> `self.non_field_errors()`, which is just the same as
+self.errors['__all__']+, but more readable, and
<2> `self._update_errors`, a Django helper method which takes care of the fact
that dictionary keys may not exist, and fields may already have errors in their
list which we want to append to (see the Django source if you're curious).

Our little debug `self.fail` tells us things are working:

----
AssertionError: {'text': ["You've already got this in your list"], '__all__':
['Item with this List and Text already exists.']}
----

Just to stay neat and tidy, let's say we want to remove that `__all__`
non-field error.  Adjust the unit test, removing the `self.fail` while we're at
it:

[role="sourcecode"]
.lists/tests/test_forms.py (ch09l076)
[source,python]
----
    self.assertFalse(form.is_valid())
    self.assertEqual(form.errors['text'], [DUPLICATE_ITEM_ERROR])
    self.assertFalse(form.non_field_errors())
----

Almost there:

----
AssertionError: ['Item with this List and Text already exists.'] is not false
----

Final step:

[role="sourcecode"]
.lists/forms.py
[source,python]
----
    def validate_unique(self):
        super().validate_unique()
        if self.non_field_errors():
            self._update_errors({'text': [DUPLICATE_ITEM_ERROR]})
            del self.errors['__all__']
----

And we're there!  A quick commit

[subs="specialcharacters,quotes"]
----
$ *git diff*
$ *git commit -a*
----


Using the existing lists item form in the list view
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now let's see if we can put this form to work in our view.

Let's start by using our constant, now that we've defined it. Tidy tidy!

[role="sourcecode"]
.lists/tests/test_views.py (ch11l050)
[source,python]
----
from lists.forms import (
    DUPLICATE_ITEM_ERROR, EMPTY_LIST_ERROR,
    ExistingListItemForm, ItemForm,
)
[...]

    def test_duplicate_item_validation_errors_end_up_on_lists_page(self):
        [...]
        expected_error =  escape(DUPLICATE_ITEM_ERROR)
----

----
Ran 26 tests in 0.130s

OK
----

Next -- let's find places where we should be using our new form
class. There's two checks in our view tests that we use the right
form, let's change them both:

[role="sourcecode"]
.lists/tests/test_views.py
[source,python]
----
def test_displays_item_form(self):
    list_ = List.objects.create()
    response = self.client.get('/lists/%d/' % (list_.id,))
    self.assertIsInstance(response.context['form'], ExistingListItemForm)

def test_invalid_input_renders_form_with_errors(self):
    response = self.post_invalid_input()
    self.assertIsInstance(response.context['form'], ExistingListItemForm)
----

// TODO: also move the template test and the context tests up,
// or to a different test

That gives us:

//TODO: unskip
[role="skipme"]
----
AssertionError: <lists.forms.ItemForm object at 0x7f767e4b7f90> is not an
instance of <class 'lists.forms.ExistingListItemForm'>
----

So we can adjust the view:

[role="sourcecode"]
.lists/views.py
[source,python]
----
from lists.forms import ExistingListItemForm, ItemForm
[...]

def view_list(request, list_id):
    list_ = List.objects.get(id=list_id)
    form = ExistingListItemForm()
    if request.method == 'POST':
        form = ExistingListItemForm(data={
            'text': request.POST['text'],
            'list': list_.id
        })
        if form.is_valid():
            form.save()
            return redirect(list_)

    return render(request, 'list.html', {'list': list_, "form": form})
----

//TODO: use diff 078 to fix 1 bug in final diff

How about that `form.save()` eh?  If you'd never met Django ModelForms, 
there's some of the real power of a ModelForm right there!

//TODO use form.save in earlier case.  maybe add to scratchpad?

And we're there!  Unit tests pass!

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test lists*]
[...]
Ran 26 tests in 0.082s

OK
----

And so does our FT for validation:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests.ItemValidationTest*]
Creating test database for alias 'default'...
..
 ---------------------------------------------------------------------
Ran 2 tests in 12.048s

OK
Destroying test database for alias 'default'...
----

As a final check, we re-run 'all' the FTs:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests*]
Creating test database for alias 'default'...
....
 ---------------------------------------------------------------------
Ran 4 tests in 19.048s

OK
Destroying test database for alias 'default'...
----

Hooray! Time for a final commit, and a wrap-up.


.Tips for testing views
*******************************************************************************
* Have at least a placeholder test for each model class and each form class
* When testing views, I would recommend:
    * Using the Django Test Client
    * Check the template used
    * Check each item in the template context
        * eg check any forms are of the correct class
        * and check any objects are the right ones, or Querysets have the
        correct items.
    * Test any template logic:  any `for` or `if` should get a minimal test
    * For views that handle POST requests, make sure you test both the valid
    case and the invalid case.
    * Sanity-check that your form is rendered, and its errors are displayed

Why these points?  Skip ahead to Appendix II, and I'll show how they are
sufficient to ensure that our views are still correct if we refactor them to
start using Class-Based Views.
*******************************************************************************

