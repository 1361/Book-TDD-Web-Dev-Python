Testing deployment using a staging site
-----------------------

It's time to deploy the first version of our site and make it public.  They say
that if you wait until you feel ready to ship, then you've waited too long.

Is our site usable?  Is it better than nothing? Can make lists on it? Yes, yes,
yes.

No, you can't log in yet.  No you can't mark tasks as completed.  But do we
really need any of that stuff? Not really -- and you can never be sure what
your users are 'actually' going to do with your site once they get their 
hands on it. We think our users want to use the site for to-do lists, but maybe
they actually want to use it to make "top 10 best fly-fishing spots" lists, for
which you don't need any kind of ``mark completed'' function. We won't know
until we put it out there.

Let's find out where testing comes into the process of deployment.

TDD and the Danger Areas of deployment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deploying a site to a live web server can be a tricky topic.  Oft heard is the
forlorn cry -- *"but it works on my machine"*

Some of the danger areas of deployment include:

- 'static files' (CSS, JavaScript, images etc): web servers usually need
  special configuration for serving these
- the 'database': there can be permissions and path issues, and we need to be
  careful about preserving data between deploys
- 'dependencies': we need to make sure that the packages our software relies
  on are installed on the server, and have the correct versions

But there are solutions to all of these.  In order:

- Using a 'staging site', on the same infrastructure as the production site,
  can help us test out our deployments and get things right before we go to the
  "real" site
- We can also 'run our functional tests against the staging site'. Since we
  now have a "smoke test" for our site layout, we'll know that the CSS is 
  loaded correctly.
- We can write a special 'test that checks the deploy process',
  for example making sure database data is preserved (later, we can talk about
  South + data migrations...)
- 'Virtualenvs' are a useful tool for managing packages and dependencies on a
  server that's not entirely under your own control
- And finally, automation, automation, automation.  By using an 'automated
  script' to deploy new versions, and by using the same script to deploy to
  staging and production, we can reassure ourselves that staging is as much
  like live as possible.


We can separate out "deployment" into two tasks:
- 'provisioning' a new server to be able to host the code
- 'deploying' a new version of the code to an existing server.

Some people like to use a brand new server for every deployment -- it's what we
do at PythonAnywhere.  I think it's probably only necessary for larger, more 
complex sites though.

For a simple site like ours, it makes sense to separate the two tasks.  And, 
although we eventually want both to be completely automated, we can probably
live with a manual provisioning system for now.

Choosing where to host our site
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are loads of different solutions out there these days, but they broadly
fall into two camps:

- running your own (possibly virtual) server
- using a Platform-As-A-Service offering like Heroku, DotCloud or PythonAnywhere

Particularly for small sites, a PaaS offers a lot of advantages, and I would
definitely recommend looking into them.  We're not going to use a PaaS in this
book however, for several reasons..  Firstly, I have a conflict of interest, in
that I obviously think PythonAnywhere is the best, but then again I would say
that.  Secondly, all the PaaS offerings are quite different, and the procedures
to deploy to each vary a lot -- learning about one doesn't tell you about the 
others... And any one of them might change their process radically, or simply
go out of business by the time you get to read this book.

Instead, we'll learn about good old-fashioned server admin, including SSH and
Apache.  They're unlikely to ever go away, and knowing a tiny bit about them
will get you some respect from all the grizzled dinosaurs out there.




