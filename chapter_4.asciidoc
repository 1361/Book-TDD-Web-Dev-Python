Chapter 4 - Something
---------------------

We ended the last Chapter with an expected failure saying

....
AssertionError: Finish the test!
....

One of the great things about TDD is that you never have to worry about
forgetting what to do next - just re-run your tests and they will tell
you what you need to work on.


So we should finish writing the test!  Open up 'functional_tests.py'


[source,python]
----
import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

class NewVisitorTest(unittest.TestCase):

    def setUp(self):
        self.browser = webdriver.Firefox()

    def tearDown(self):
        self.browser.quit()

    def test_can_start_a_todo_list_and_get_a_url_for_it(self):
        # Edith has heard about a cool new online to-do app. She goes
        # to check out its homepage
        self.browser.get('http://localhost:8000')

        # She notices the page title and header mention to-do lists
        self.assertIn('To-Do', self.browser.title)
        header_text = self.browser.find_element_by_tag_name('h1').text
        self.assertIn('To-Do', header_text)

        # She is invited to enter a to-do item straight away
        body_text = self.browser.find_element_by_tag_name('body').text
        self.assertIn('Enter a to-do item', body_text)

        # She types "Buy peacock feathers" into a text box (Edith's hobby
        # is tying fly-fishing lures)
        inputbox = self.browser.find_element_by_id('id_new_item')
        inputbox.send_keys('Buy peacock feathers')

        # When she hits enter, the page updates, and now the page lists
        # "1: Buy peacock feathers" as an item in a to-do list table
        inputbox.send_keys(Keys.ENTER)

        table = self.browser.find_element_by_id('id_list_table')
        rows = table.find_elements_by_tag_name('tr')
        self.assertTrue(any(
            '1: Buy peacock feathers' in row.text
            for row in rows
        ))

        # There is still a text box inviting her to add another item. She
        # enters "Use peacock feathers to make a fly" (Edith is very methodical)
        self.fail('Finish the test!')
        [...]
----

We're using several of the methods that Selenium provides to examine web pages:
`find_element_by_tag_name`, `find_element_by_id`, and
+find_element*s*_by_tag_name+ (notice the extra `s`, which means it will return
several elements rather than just one).  We also use `send_keys`, which is
Selenium's way of typing into input elements - note also the `Keys` class
(don't forget to import it), which lets us send special keys like enter, but
also modifiers like 'Ctrl'.

So let's see how it gets on:

....
$ python functional_tests.py 
[...]
NoSuchElementException: Message: u'Unable to locate element: {"method":"tag name","selector":"h1"}' ; Stacktrace: Method FirefoxDriver.prototype.findElementInternal_ threw an error in file:///tmp/tmpPVV1Pz/extensions/fxdriver@googlecode.com/components/driver_component.js 
....

Decoding that, the test is saying it can't find an `<h1>` element on the page.
Well, a failing test means we're allowed to make changes to the code!  Let's
take a look at 'views.py'



Well, we could just dive in and start editing the `HOME_PAGE` constant, but
editing HTML as string constants in a Python file isn't really a lot of fun.
At a very minimum, it would be nice to have some kind of syntax-highlighting to
help us get our HTML straight.  Also, editing view functions right in 'urls.py'
isn't really the done thing -- Django encourages us to use a separate file for
that. It's time to bring in Django apps.

