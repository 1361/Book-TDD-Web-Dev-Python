What are we doing with all these tests?
---------------------------------------

A moment's reflection - what are we up to?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that we've seen the basics of TDD in action, it's time to pause 
and talk about why we're doing it.

I'm imagining several of you, dear readers, have been holding back
some seething frustration -- perhaps some of you have done a bit of unit
testing before, and perhaps some of you are just in a hurry. You've been
biting back questions like:

* Aren't all these tests a bit excessive?
* Surely some of them are redundant? There's duplication between
  the functional tests and the unit tests
* I mean, what are you doing importing `django.core.urlresolvers` in your
  unit tests?  Isn't that testing Django, ie. testing third-party code? I
  thought that was a no-no?
* Those unit tests seemed way too trivial -- testing one line of declaration,
  and a one-line function that returns a constant! Isn't that just a waste of
  time? Shouldn't we save our tests for more complex things?
* What about all those tiny changes during the unit-test/code cycle?  Surely we
  could have just skipped to the end? I mean, `home_page = None`!? Really? ? 
* You're not telling me you 'actually' code like this in real life?

Ah, young grasshopper. I too was once full of questions like these.  But only
because they're perfectly good questions.  In fact, I still ask myself 
questions like these, all the time. Does all this stuff really have value? Is
this a bit of a cargo-cult?

It's worth reminding ourselves of what the prize is.  Do you remember
my story about my first ever project, which started out just fine but soon 
accumulated a mass of technical debt, messy code, invisible dependencies and
became impossible to refactor or maintain?  I can't convey to you how different
an experience it is to work on a project with TDD.  You never have to worry
about refactoring or experimenting -- the tests will tell you if you make a
mistake.  You never have to worry about unexpected regressions.  You never have
to sit around robotically clicking through the same pages on your site,
checking that they work. I'm constantly surprised at all the stupid little
logic errors that unit tests have saved us from too.

Ultimately, programming is hard.  Often, we are smart, so we succeed.  TDD is
there to help us out when we're not so smart.  Kent Beck (one of the great
legends of TDD) uses the metaphor of lifting a bucket of water out of a well
with a rope:  when the well isn't too deep, and the bucket isn't very full,
it's easy. And even lifting a full bucket is pretty easy at first.  But after a
while, you're going to get tired. TDD is like having a ratchet that lets you
save your progress, take a break, and make sure you never slip backwards.  That
way you don't have to be smart 'all' the time.

.Test ALL the things (original illustration credit http://hyperboleandahalf.blogspot.co.uk/2010/06/this-is-why-ill-never-be-adult.html[Allie Brosh, Hyperbole and a Half])
image::images/test_all_the_things.png[Test ALL the things,float="right"]


OK, so perhaps 'in general', you're prepared to concede that TDD is a good
idea, but maybe you still think I'm overdoing it?  Testing the tiniest thing,
and taking ridiculously many small steps?

TDD is a 'discipline', and that means it's not something that comes naturally;
because many of the payoffs aren't immediate but only come in the longer term,
you have to force yourself to do it in the moment. That's what the image of the
Testing Goat is supposed to illustrate -- you need to be a bit bloody-minded
about it.

Yes, in the short term it may feel a bit silly to write tests for simple
functions and constants.  It's perfectly possible to imagine still doing
``mostly'' TDD, but following more relaxed rules where you don't unit test
'absolutely' everything.  But in this book my aim is to demonstrate full,
rigorous TDD. Like a kata in a martial art, the idea is to learn the motions
in a controlled context, when there is no adversity, so that the techiques
are part of your muscle memory. It seems trivial now, because we've started
with a very simple example. The problem comes when your application gets
complex -- that's when you really need your tests.  And the danger is that
complexity tends to sneak up on you, gradually.  You may not notice it
happening, but quite soon you're a boiled frog.

There are two other things to say in favour of tiny, simple tests for simple
functions:

Firstly, if they're really trivial tests, then they won't take you that long to
write them. So stop moaning and just write them already.

Secondly, it's always good to have a placeholder.  Having a test 'there' for a
simple function means it's that much less of a psychological barrier to
overcome when the simple function gets a tiny bit more complex -- perhaps it
grows an `if`. Then a few weeks later it grows a `for` loop. Before you know
it, it's a recursive metaclass-based polymorphic tree parser factory.  But
because it's had tests from the very beginning, adding a new test each time has
felt quite natural, and it's well tested.  The alternative involves trying to
decide when a function becomes ``complicated enough'' which is highly
subjective, but worse, because there's no placeholder, it seems like that 
much more effort, and you're tempted each time to put it off a little longer,
and pretty soon -- frog soup!


Instead of trying to figure out some hand-wavey subjective rules for when
you should write tests, and when you can get away with not bothering, I suggest
following the discipline for now -- like any discipline, you have to take the
time to learn the rules before you can break them.

Now, back to our onions.


Using Selenium to test user interactions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Where were we at the end of the last chapter? Let's re-run the test and find
out:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python functional_tests.py*]
[13/Feb/2013 18:44:05] "GET / HTTP/1.1" 200 39
F
======================================================================
FAIL: test_can_start_a_list_and_retrieve_it_later (__main__.NewVisitorTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "functional_tests.py", line 20, in test_can_start_a_list_and_retrieve_it_later
    self.fail('Finish the test!')
AssertionError: Finish the test!

 ---------------------------------------------------------------------
Ran 1 test in 1.609s

FAILED (failures=1)
----


NOTE: Did you try it, and get an error saying 'Problem loading page' or 
'Unable to connect'?  So did I. It's because we forgot to spin up the dev.
server first using `manage.py runserver`.  Do that, and you'll get the failure
message we're after.


One of the great things about TDD is that you never have to worry about
forgetting what to do next - just re-run your tests and they will tell
you what you need to work on.

``Finish the test'', it says, so let's do just that!  Open up
'functional_tests.py'


[source,python]
----
import unittest
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

class NewVisitorTest(unittest.TestCase):

    def setUp(self):
        self.browser = webdriver.Firefox()
        self.browser.implicitly_wait(3)

    def tearDown(self):
        self.browser.quit()

    def test_can_start_a_list_and_retrieve_it_later(self):
        # Edith has heard about a cool new online to-do app. She goes
        # to check out its homepage
        self.browser.get('http://localhost:8000')

        # She notices the page title and header mention to-do lists
        self.assertIn('To-Do', self.browser.title)
        header_text = self.browser.find_element_by_tag_name('h1').text
        self.assertIn('To-Do', header_text)

        # She is invited to enter a to-do item straight away
        inputbox = self.browser.find_element_by_id('id_new_item')
        self.assertEqual(
                inputbox.get_attribute('placeholder'),
                'Enter a to-do item'
        )

        # She types "Buy peacock feathers" into a text box (Edith's hobby
        # is tying fly-fishing lures)
        inputbox.send_keys('Buy peacock feathers')

        # When she hits enter, the page updates, and now the page lists
        # "1: Buy peacock feathers" as an item in a to-do list table
        inputbox.send_keys(Keys.ENTER)

        table = self.browser.find_element_by_id('id_list_table')
        rows = table.find_elements_by_tag_name('tr')
        self.assertTrue(any(
            row.text == '1: Buy peacock feathers'
            for row in rows
        ))

        # There is still a text box inviting her to add another item. She
        # enters "Use peacock feathers to make a fly" (Edith is very
        # methodical)
        self.fail('Finish the test!')
        [...]
----
[role="caption"]
functional_tests.py

We're using several of the methods that Selenium provides to examine web
pages: `find_element_by_tag_name`, `find_element_by_id`, and
`find_element`**`s`**`_by_tag_name` (notice the extra `s`, which means it will
return several elements rather than just one).  We also use `send_keys`,
which is Selenium's way of typing into input elements. You'll also see the
`Keys` class (don't forget to import it), which lets us send special keys
like enter, but also modifiers like 'Ctrl'.

Also, just look at that `any` function. It's a little-known Python builtin.
I don't even need to explain it, do I? Python is such a joy.

Although, if you're one of my readers who doesn't know Python, what's happening
inside the `any` is a ``list comprehension generator expression'', which is
something I'll let you Google.  Come back and tell me that's not pure joy!

Let's see how it gets on (don't forget to start up the dev server with
`python manage.py runserver` first)

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python functional_tests.py*]
[...]
NoSuchElementException: Message: u'Unable to locate element: {"method":"tag
name","selector":"h1"}' ; Stacktrace: [...]
----

Decoding that, the test is saying it can't find an `<h1>` element on the page.
Let's see what we can do to add that to the HTML of our home page

Big changes to a functional test are usually a good thing to commit on their
own (I failed to do so in my first draft, and I regretted it later when I 
changed my mind and had the change mixed up with a bunch of others.  The more 
atomic your commits, the better).

[subs="specialcharacters,quotes"]
----
$ *git diff*
$ *git commit -am "Functional test now checks we can input a to-do item"*
----



The ``Don't test constants'' rule, and templates to the rescue
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's take a look at our unit tests, 'lists/tests.py'.  Currently we're looking
for specific HTML strings, but that's not a particularly efficient way of
testing HTML.  In general, one of the rules of unit testing is *Don't test
constants*, and testing HTML as text is a lot like testing a constant.

In other words, if you have some code that says:


[source,python]
----
wibble = 3
----

There's not much point in a test that says

[source,python]
----
from myprogram import wibble
assert wibble == 3
----

Unit tests are really about testing logic, flow control and configuration.
Making assertions about exactly what sequence of characters we have in our HTML
strings isn't doing that.  

What's more, mangling raw strings in Python really isn't a great way of dealing
with HTML.  There's a much better solution, which is to use templates.  Quite
apart from anything else, if we can keep HTML to one side in a file whose name
ends in `.html`, we'll get better syntax highlighting! There are lots of Python
templating frameworks out there, and Django has its own which works very well.
Let's use that.

What we want to do now is make our view function return exactly the same HTML,
but just using a different process.That's a *refactor* -- when we try to
improve the code 'without changing its functionality'.

That last bit is really important. If you try and add new functionality at the
same time as refactoring, you're much more likely to run into trouble.
Refactoring is actually a whole discipline in itself, and it even has a
reference book: Martin Fowler's <<refactoring,Refactoring>>.

The first rule is: you can't refactor without tests.  Thankfully, we're doing
TDD, so we're way ahead of the game.  Let's check our tests pass; they will
be what makes sure that our refactoring is behaviour-preserving. 

[subs="specialcharacters,quotes"]
----
$ *python manage.py test lists*
[...]
OK
----

Great! Let's start by taking our HTML string and putting it into its own file.
We'll create a directory called 'lists/templates' to keep templates in, and
then open a file at 'lists/templates/home.html', to which we'll transfer our
HTML:

[source,html]
----
<html>
    <title>To-Do lists</title>
</html>
----
[role="caption"]
lists/templates/home.html

Mmmh, syntax-highlighted... Much nicer!  Now to change our view function:

[source,python]
----
from django.shortcuts import render

def home_page(request):
    return render(request, 'home.html')
----
[role="caption"]
lists/views.py

Instead of building our own +HttpResponse+ we now use the Django +render+
function.  It takes the request as its first parameter (for reasons we'll go
into later) and the name of the template to render.  Django will automatically
search folders called 'templates' inside any of your apps' directories.

That's a change to the code - do the tests still pass?

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test lists*]
    [...]
    self.assertTrue(response.content.endswith('</html>'))
AssertionError: False is not true
----

NOTE: Depending on whether your text editor insists on adding newlines to
the end of files, you may not even see this error.  If so, you can safely
ignore the next bit, and skip straight to where you can see the listing
says `OK`.

Darn, not quite. The last of the three assertions is failing, apparently
there's something wrong at the end of the output. I had to do a little `print
repr(response.content)` to debug this, but it turns out that the templates are
introducing an additional newline (`\n') at the end.  We can get them to pass
like this:
// TODO repr is not rendering as monospace. fix when go to python3?


[source,python]
----
self.assertTrue(response.content.strip().endswith('</html>'))
----
[role="caption"]
lists/tests.py

It's a tiny bit of a cheat, but whitespace at the end of an HTML file really 
shouldn't matter to us. Let's try running the tests again:

[subs="specialcharacters,quotes"]
----
$ *python manage.py test lists*
[...]
OK
----

Our refactor of the code is now complete, and the tests mean we're happy that
behaviour is preserved. Now we can change the tests so that they're no longer
testing constants; instead, they should just check that we're rendering the
right template.  Another Django helper function called `render_to_string` is
our friend here:


[source,python]
----
from django.template.loader import render_to_string
[...]

    def test_home_page_returns_correct_html(self):
        request = HttpRequest()
        response = home_page(request)
        expected_html = render_to_string('home.html')
        self.assertEqual(response.content, expected_html)
----
[role="caption"]
lists/tests.py

Now, instead of testing constants we're testing our implementation. Great!

NOTE: Django has a Test Client with tools for testing templates, which we'll
use in later chapters. For now we'll use the low-level tools to make sure 
we're comfortable with how everything works. No magic!

On refactoring
~~~~~~~~~~~~~~

That was an absolutely trivial example of refactoring. Yes, we probably could
have skipped a few of the steps in between.  But once again, this is all about
learning a discipline, starting with simple examples. The way Kent Beck puts
it is:


[quote, Kent Beck, TDD by example]
____________________________________________________________________________
Am I recommending that you actually work this way? No. I'm recommending that
you be 'able' to work this way.
____________________________________________________________________________

We're unlikely to go wrong when it's such a simple example, but when you get
into refactoring more complex and sensitive code, the step-by-step approach can
make sure you never get into trouble, and you always go from working code to
working code.

In fact as I was writing this my first instinct was to dive in and change the
test first -- make them use the `render_to_string` function straight away,
delete the 3 superfluous assertions and just check the contents against the
expected render, and then go ahead and make the code change.  But notice how
that actually would have left space for me to break things: I could easily have
defined the template as containing any arbitrary string, instead of the string
with the right `<html>` and `<title>` tags.  When refactoring, work on either
the code or the tests, but not both at once.

There's always a tendency to skip ahead a couple of steps, to make a couple of
tweaks to the behaviour while you're refactoring, but pretty soon you've got
changes to half a dozen different files, you've totally lost track of where you
are, and nothing works any more.  If you don't want to end up like 
http://imgur.com/gallery/wGUTG[Refactoring Cat] (Google it), stick to small
steps, keep refactoring and functionality changes entirely separate.

NOTE: We'll come across ``Refactoring cat'' again during this book,
as an example of what happens when we get carried away and want to change 
too many things at once. Think of it as the little cartoon demon counterpart
to the Testing Goat, popping up over your other shoulder and giving you bad
advice...

It's a good idea to do a commit after any refactoring:

[subs="specialcharacters,quotes"]
----
$ *git status* # see changes to lists.py and views.py + new templates folder
$ *git add .*  # will add the untracked templates folder
$ *git diff --staged* # review the changes we're about to commit
$ *git commit* # message should be, eg "Refactor home page view to use a template"
----


A little more of our front page
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the meantime, our functional test is still failing.  Let's now make an
actual code change to get it passing.  Because our HTML is now in a template,
we can feel free to make changes to it, without needing to write any extra unit
tests.  We wanted an `<h1>`:

[source,html]
----
<html>
    <head>
        <title>To-Do lists</title>
    </head>
    <body>
        <h1>Your To-Do list</h1>
    </body>
</html>
----
[role="caption"]
lists/templates/home.html

Let's see if our functional test likes it a little better:

----
NoSuchElementException: Message: u'Unable to locate element:
{"method":"id","selector":"id_new_item"}' ; Stacktrace: [...]

----

OK...

[source,html]
----
<html>
    <head>
        <title>To-Do lists</title>
    </head>
    <body>
        <h1>Your To-Do list</h1>
        <input id="id_new_item" />
    </body>
</html>
----
[role="caption"]
lists/templates/home.html

And now?


----
AssertionError: u'' != 'Enter a to-do item'
----

Let's add our placeholder text...

[source,html]
----
    <input id="id_new_item" placeholder="Enter a to-do item" />
----
[role="caption"]
lists/templates/home.html

----
NoSuchElementException: Message: u'Unable to locate element:
{"method":"id","selector":"id_list_table"}'[...]
----

Let's go ahead and put the table onto the page. At this stage it'll just be
empty...

[source,html]
----
        <table id="id_list_table">
        </table>
----
[role="caption"]
lists/templates/home.html

Now what does the FT say?

----
  File "functional_tests.py", line 40, in test_can_start_a_list_and_retrieve_it_later
    for row in rows
AssertionError: False is not true
----

Slightly cryptic. We can use the line number to track it down, and it turns out
it's that `any` function I was so smug about earlier -- or, more precisely, the
`assertTrue`, which doesn't have a very explicit failure message.  We can pass
a custom error message as an argument to most `assertX` methods in 'unittest':


[source,python]
----
    self.assertTrue(
        any(row.text == '1: Buy peacock feathers' for row in rows),
        "New to-do item did not appear in table"
    )
----
[role="caption"]
functional_tests.py

If you run the FT again, you should see our message.

But now, to get this to pass, we will need to actually process the user's 
form submission.  And that's a topic for the next chapter.

For now let's do a commit:

[subs="specialcharacters,quotes"]
----
$ *git diff*
$ *git commit -am"Front page HTML now generated from a template"*
----


Thanks to a bit of refactoring, we've got our view set up to render a template,
we've stopped testing constants, and we're now well placed to start processing
user input.

Recap: the TDD process
~~~~~~~~~~~~~~~~~~~~~~

We've now seen all the main aspects of the TDD process, in practice:

* Functional tests
* Unit tests
* The unit test / code cycle
* Refactoring

It's time for a little recap, and perhaps even some flowcharts.  Forgive me,
years misspent as a management consultant have ruined me. On the plus side,
it will feature recursion.

What is the overall TDD process?

.Overall TDD process
image::images/tdd_overall_flowchart.png[A flowchart showing tests, coding and refactoring]

We write a test. We run the test and see it fail.  We write some minimal code
to get it a little further.  We re-run the tests and repeat until it passes.
Then, optionally, we might refactor our code, using our tests to make sure we
don't break anything.

But how does this apply when we have functional tests 'and' unit tests?  Well,
you can think of the functional test as being a high-level view of the cycle,
where "writing the code" to get the functional tests to pass actually involves
using another, smaller TDD cycle which uses unit tests:

.The TDD process with Functional and Unit tests
image::images/tdd_flowchart_functional_and_unit.png[A flowchart showing functional tests as the overall cycle, and unit tests helping to code]

We write a functional test and see it fail.  Then, the process of "writing
code" to get it to pass is a mini-TDD cycle of its own:  we write one or more
unit tests, and go into the unit test / code cycle until the unit tests pass.
Then, we go back to our FT to check that it gets a little further, and we 
can write a bit more of our application -- using more unit tests, and so on.

What about refactoring, in the context of functional tests?  Well, that means
we use the functional test to check that we've preserved the behaviour of
our application, but we can change or add and remove unit tests, and use
a unit test cycle to actually change the implementation.

The functional tests are the ultimate judge of whether your application works
or not.  The unit tests are a tool to help you along the way.

We'll explore all of the different parts of this work-flow in more detail
over the coming chapters. 

