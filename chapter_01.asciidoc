[[chapter_01]]
Getting Django Set Up Using a [keep-together]#Functional Test#
--------------------------------------------------------------


Obey the Testing Goat! Do Nothing Until You Have a Test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


[[tree_goat]]
.Goats are more agile than you think (source: http://www.flickr.com/photos/caitlinstewart/2846642630/[Caitlin Stewart, on Flickr])
image::images/twp2_0101.png["A picture of a goat up a tree", scale="50"]


Here's about the simplest imaginable test:

[role="sourcecode"]
.functional_tests.py
====
[source,python]
----
from selenium import webdriver

browser = webdriver.Firefox()
browser.get('http://localhost:8000')

assert 'Django' in browser.title
----
====

Expected output:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python functional_tests.py*]
  File ".../selenium/webdriver/remote/webdriver.py", line 324, in get
    self.execute(Command.GET, {'url': url})
  File ".../selenium/webdriver/remote/webdriver.py", line 312, in execute
    self.error_handler.check_response(response)
  File ".../selenium/webdriver/remote/errorhandler.py", line 242, in
check_response
    raise exception_class(message, screen, stacktrace)
selenium.common.exceptions.WebDriverException: Message: Reached error page: abo
ut:neterror?e=connectionFailure&u=http%3A//localhost%3A8000/[...]
----

NOTE: If, instead, you see an error trying to import Selenium, or an error
    trying to find "geckodriver", you might need
    to go back and have another look at the "<<pre-requisites>>" section.

For now though, we have a 'failing test', so that means we're allowed to start 
building our app.


Getting Django Up and Running
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[subs="specialcharacters,quotes"]
----
$ *django-admin.py startproject superlists .*
----

Don't forget that "." at the end, it's important!

((("superlists")))That will create a file called 'manage.py' in
your current folder, and a subfolder called 'superlists', with more
stuff inside it:

----
├── functional_tests.py
├── geckodriver.log
├── manage.py
├── superlists
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── virtualenv
    ├── [...]
----

NOTE: Make sure your project folder looks exactly like this!  If you
    see two nested folders called superlists, it's because you forgot the "."
    above.  Delete them and try again.


But the main thing to notice is 'manage.py'. That's Django's Swiss Army knife,
and one of the things it can do is run a development server.  Let's try that
now:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py runserver*]
Performing system checks...

System check identified no issues (0 silenced).

You have 13 unapplied migration(s). Your project may not work properly until
you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.

Django version 1.11.3, using settings 'superlists.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
----

NOTE: It's safe to ignore that message about "unapplied migrations" for now.
    We'll look at migrations in <<chapter_post_and_database>>.

That's Django's development server now up and running on our machine.

Leave it there and open another command shell.  Navigate to your project
folder, activate your virtualenv, and then try running our test again:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python functional_tests.py*]
$ 
----

TIP: If you see an error saying "no module named selenium", you've
    forgotten to activate your virtualenv. Check the <<pre-requisites>> again
    if you need to.

If it all feels a bit too much like magic, like it wasn't quite real, why not
go and take a look at the dev server manually, by opening a web browser
yourself and visiting pass:[<em>http://localhost:8000</em>]?  You should see something like
<<it_worked_screenshot>>.

You can quit the development server now if you like, back in the original
shell, using Ctrl-C.

[[it_worked_screenshot]]
.It worked!
image::images/twp2_0102.png["Screenshot of Django It Worked screen"]


Optional: Starting a Git repository
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's start by doing the `git init` to start the repository:

[subs="specialcharacters,quotes"]
----
$ *ls*
db.sqlite3
functional_tests.py
geckodriver.log
manage.py
superlists
virtualenv

$ *git init .*
Initialised empty Git repository in ...python-tdd-book/.git/
----


.Our Working Directory is always the folder that contains manage.py
******************************************************************************
From this point onwards, the top-level folder will be our working
directory.

(For simplicity, in my command listings, I'll always show it as
'...python-tdd-book/', although it will probably actually be something like
'/home/kind-reader-username/my-python-projects/python-tdd-book/'.)

Whenever I show a command to type in, it will assume we're in this directory.
Similarly, if I mention a path to a file, it will be relative to this top-level
directory.  So 'superlists/settings.py' means the 'settings.py' inside the
second-level 'superlists'.

******************************************************************************


((("Git", "commits")))Now
let's take a look and see what files we want to commit:

[subs="specialcharacters,quotes"]
----
$ *ls*
db.sqlite3
functional_tests.py
geckodriver.log
manage.py
superlists
virtualenv
----

There are a few things in here that we _don't_ want under version control:
_db.sqlite3_ is the database file, _geckodriver.log_ contains Selenium
debug output, and finally our virtualenv shouldn't be in git either.
We'll add all of them to a special file called '.gitignore' which, um, tells
Git what to ignore:

[subs="specialcharacters,quotes"]
----
$ *echo "db.sqlite3" >> .gitignore*
$ *echo "geckodriver.log" >> .gitignore*
$ *echo "virtualenv" >> .gitignore*
----

Next we can add the rest of the contents of the current folder, ".":

[subs="specialcharacters,macros"]
----
$ pass:quotes[*git add .*]
$ pass:quotes[*git status*]
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   .gitignore
        new file:   functional_tests.py
        new file:   manage.py
        new file:   superlists/__init__.py
        new file:   superlists/__pycache__/__init__.cpython-36.pyc
        new file:   superlists/__pycache__/settings.cpython-36.pyc
        new file:   superlists/__pycache__/urls.cpython-36.pyc
        new file:   superlists/__pycache__/wsgi.cpython-36.pyc
        new file:   superlists/settings.py
        new file:   superlists/urls.py
        new file:   superlists/wsgi.py
----

Oops, remove '.pyc' files, and '.gitignore' them:


[subs="specialcharacters,macros"]
----
$ pass:[<strong>git rm -r --cached superlists/__pycache__</strong>]
rm 'superlists/__pycache__/__init__.cpython-36.pyc'
rm 'superlists/__pycache__/settings.cpython-36.pyc'
rm 'superlists/__pycache__/urls.cpython-36.pyc'
rm 'superlists/__pycache__/wsgi.cpython-36.pyc'
$ pass:[<strong>echo "__pycache__" >> .gitignore</strong>]
$ pass:[<strong>echo "*.pyc" >> .gitignore</strong>]
----

Now let's see where we are...


[subs="specialcharacters,macros"]
----
$ pass:[<strong>git status</strong>]
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   .gitignore
        new file:   functional_tests.py
        new file:   manage.py
        new file:   superlists/__init__.py
        new file:   superlists/settings.py
        new file:   superlists/urls.py
        new file:   superlists/wsgi.py

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   .gitignore
----

Looking good--we're ready to do our first commit!

[subs="specialcharacters,quotes"]
----
$ *git add .gitignore*
$ *git commit*
----

When you type `git commit`, it will pop up an editor window for you to write
your commit message in.  Mine looked like 
<<first_git_commit>>.footnote:[Did vi pop up and you had no idea what to do?
Or did you see a message about account identity and `git config --global
user.username`? Go and take another look at &#x201c;<<pre-requisites>>&#x201d;; there are some
brief instructions.]

[[first_git_commit]]
.First Git commit
image::images/twp2_0103.png["Screenshot of git commit vi window"]


.Advanced Exercise:

********************************************************************

Can you swap out Firefox for another browser?  Chrome?  You'll need something

called ChromeDriver.  Also, check out `PhantomJS`



********************************************************************


