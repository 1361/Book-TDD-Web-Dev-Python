[[appendix-rest-api-frontend]]
[appendix]
REST API part 2: POST, status codes, JavaScript mocking
-------------------------------------------------------

(((REST)))
(((API)))
Chapter under construction


Implementing Ajax POST
~~~~~~~~~~~~~~~~~~~~~~

First we give our list form an `id` so we can pick it up
in our JS:

[role="sourcecode"]
.lists/templates/base.html
[source,diff]
----
@@ -56,7 +56,7 @@
           <div class="text-center">
             <h1>{% block header_text %}{% endblock %}</h1>
             {% block list_form %}
-              <form method="POST" action="{% block form_action %}{% endblock %}">
+              <form id="id_item_form" method="POST" action="{% block form_action %}{% endblock %}">
                 {{ form.text }}
                 {% csrf_token %}
                 {% if form.errors %}
----


Next tweak the fixture in our js test:

[role="sourcecode"]
.lists/static/tests/tests.html
[source,diff]
----
@@ -9,8 +9,9 @@
 <body>
   <div id="qunit"></div>
   <div id="qunit-fixture">
-    <form>
+    <form id="id_item_form">
       <input name="text" />
+      <input type="hidden" name="csrfmiddlewaretoken" value="tokey" />
       <div class="has-error">Error text</div>
     </form>
----


And here's our test:


[role="sourcecode"]
.lists/static/tests/tests.html
[source,javascript]
----
QUnit.test("should intercept form submit and do ajax post", function (assert) {
  var url = '/listitemsapi/';
  window.Superlists.initialize(url);

  var server = sinon.fakeServer.create();
  var response = [
    201,
    {"Content-Type": "application/json"},
    JSON.stringify({}),
  ];
  server.respondWith('POST', url, response);

  $('#id_item_form input[name="text"]').val('user input');
  $('#id_item_form input[name="csrfmiddlewaretoken"]').val('tokeney');
  $('#id_item_form').submit();
  server.respond();

  assert.equal(server.requests.length, 1);
  var request = server.requests[0];
  assert.equal(request.url, url);
  assert.equal(
    request.requestBody,
    'text=user+input&csrfmiddlewaretoken=tokeney'
  );
});
----

That breaks our FTs, because, although we're doing our POST ok,
we're not updating the page after the POST to show the new list item:

----
  File "/workspace/superlists/functional_tests/base.py", line 109, in check_for_row_in_list_table
    self.assertIn(row_text, [row.text for row in rows])
AssertionError: '2: Use peacock feathers to make a fly' not found in ['1: Buy peacock feathers']
----




.REST JavaScript tips
*******************************************************************************

Here comes a tip::
    It's all about ajax...

*******************************************************************************

