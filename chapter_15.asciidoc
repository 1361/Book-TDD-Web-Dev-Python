Server-side authentication and the admin site
---------------------------------------------

Let's crack on with the server side of our new auth system.

NOTE: as with all new chapters, I'd really appreciate feedback.  How is 
the pace?  What do you think of the "left as an exercise for the reader"
bit at the end?


Mocking in Python
~~~~~~~~~~~~~~~~~

Here's the spiked version of our view:

[role='skipme']
[source,python]
----
def login(request):
    print('login view', file=sys.stderr)
    #user = PersonaAuthenticationBackend().authenticate(request.POST['assertion'])
    user = authenticate(assertion=request.POST['assertion'])
    if user is not None:
        auth_login(request, user)
    return redirect('/')
----

Our authenticate function is going to make calls out, over the internet, to
Mozilla's servers.  We don't want that to happen in our unit test, so we'll
want to mock out `authenticate`.

The popular 'mock' package was added to the standard libary as part of Python
3. It provides a magical object called a Mock, which is a bit like the sinon
spy objects we saw in the last chapter, only much cooler.  Check this out:


[role='skipme']
----
>>> from unittest.mock import Mock
>>> m = Mock()
>>> m.any_attribute
<Mock name='mock.any_attribute' id='140716305179152'>
>>> m.foo
<Mock name='mock.foo' id='140716297764112'>
>>> m.any_method()
<Mock name='mock.any_method()' id='140716331211856'>
>>> m.foo()
<Mock name='mock.foo()' id='140716331251600'>
>>> m.called
False
>>> m.foo.called
True
>>> m.bar.return_value = 1
>>> m.bar()
1
----


A mock object would be a pretty neat thing to use to mock out the authenticate
function, wouldn't it?  Here's how you can do that:

(I trust you to set up a tests folder with a dunderinit)


[role="dofirst-ch15l001 sourcecode"]
.accounts/tests/test_views.py
[source,python]
----
from django.test import TestCase
from unittest.mock import patch


class LoginViewTest(TestCase):

    @patch('accounts.views.authenticate') #<1>
    def test_calls_authenticate_with_assertion_from_post(
        self, mock_authenticate #<2>
    ):
        mock_authenticate.return_value = None #<3>
        self.client.post('/accounts/login', {'assertion': 'assert this'})
        mock_authenticate.assert_called_once_with(assertion='assert this') #<4>
----

<1> The decorator called `patch` is a bit like the sinon `spy` function we 
    saw in the last chapter.  It lets you specify an object you want to "mock
    out". In this case we're mocking out the authenticate function, which we
    expect to be using in 'accounts/views.py'. 

<2> The decorator adds the mock object as an additional argument to the
    function it's applied to.

<3> We can then configure the mock so that it has certain behaviours. Having
    authenticate return None is the simplest, so we set the special
    `.return_value` attribute.  Otherwise it would return another mock, and
    that would probably confuse our view.

<4> Mocks can make assertions! In this case, they can check whether they were
    called, and what with
    

So what does that give us?

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test accounts*]
[...]
AttributeError: <module 'accounts.views' from
'/workspace/superlists/accounts/views.py'> does not have the attribute
'authenticate'
----

We tried to patch something that doesn't exist yet.  We need to import 
authenticate into our views.py:


[role="sourcecode"]
.accounts/views.py
[source,python]
----
from django.contrib.auth import authenticate
----

Now we get:

----
AssertionError: Expected 'authenticate' to be called once. Called 0 times.
----

That's our expected failure;  to implement, we'll have to wire up a URL for our
login view:

[role="sourcecode"]
.superlists/urls.py
[source,python]
----
urlpatterns = patterns('',
    url(r'^$', 'lists.views.home_page', name='home'),
    url(r'^lists/', include('lists.urls')),
    url(r'^accounts/', include('accounts.urls')),
    # url(r'^admin/', include(admin.site.urls)),
)
----


[role="sourcecode"]
.accounts/urls.py
[source,python]
----
from django.conf.urls import patterns, url

urlpatterns = patterns('',
    url(r'^login$', 'accounts.views.login', name='login'),
)
----

Will a minimal view do anything?

[role="sourcecode"]
.accounts/views.py
[source,python]
----
from django.contrib.auth import authenticate

def login():
    pass
----

Yep:

----
TypeError: login() takes 0 positional arguments but 1 was given
----

And so:

[role="sourcecode"]
.accounts/views.py (ch15l008)
[source,python]
----
def login(request):
    pass
----

Then

----
ValueError: The view accounts.views.login didn't return an HttpResponse object.
----

[role="sourcecode"]
.accounts/views.py (ch15l009)
[source,python]
----
from django.contrib.auth import authenticate
from django.http import HttpResponse

def login(request):
    return HttpResponse()
----

And we're back to:

----
AssertionError: Expected 'authenticate' to be called once. Called 0 times.
----

We try:

[role="sourcecode"]
.accounts/views.py
[source,python]
----
def login(request):
    authenticate()
    return HttpResponse()
----

And sure enough, we get:

----
AssertionError: Expected call: authenticate(assertion='assert this')
Actual call: authenticate()
----

And then we can fix that too:

[role="sourcecode"]
.accounts/views.py
[source,python]
----
def login(request):
    authenticate(assertion=request.POST['assertion'])
    return HttpResponse()
----


OK so far. One Python function mocked and tested.

But our authenticate view also needs to call the Django auth.login 
function if authenticate returns a user, and then it needs to return 
something other than an empty response -- since this is an Ajax view,
it doesn't need to return HTML, just an "OK" string will do.  We'll need to
mock out the `auth_login` view as well:



[role="sourcecode"]
.accounts/tests/test_views.py (ch15l012)
[source,python]
----
from django.contrib.auth import get_user_model
from django.http import HttpRequest
from django.test import TestCase
from unittest.mock import patch

User = get_user_model() #<1>

from accounts.views import login


class LoginViewTest(TestCase):
    @patch('accounts.views.authenticate')
    def test_calls_authenticate_with_assertion_from_post(
        [...]

    @patch('accounts.views.authenticate')
    def test_returns_OK_when_user_found(
        self, mock_authenticate
    ):
        user = User.objects.create(email='a@b.com')
        user.backend = '' # required for auth_login to work
        mock_authenticate.return_value = user
        response = self.client.post('/accounts/login', {'assertion': 'a'})
        self.assertEqual(response.content.decode(), 'OK')


    @patch('accounts.views.auth_login')
    @patch('accounts.views.authenticate')
    def test_calls_auth_login_if_authenticate_returns_a_user(
        self, mock_authenticate, mock_auth_login
    ):
        request = HttpRequest()
        request.POST['assertion'] = 'asserted'
        mock_user = mock_authenticate.return_value
        login(request)
        mock_auth_login.assert_called_once_with(request, mock_user)


    @patch('accounts.views.auth_login')
    @patch('accounts.views.authenticate')
    def test_does_not_call_auth_login_if_authenticate_returns_None(
        self, mock_authenticate, mock_auth_login
    ):
        request = HttpRequest()
        request.POST['assertion'] = 'asserted'
        mock_authenticate.return_value = None
        login(request)
        self.assertFalse(mock_auth_login.called)
----

<1> I should explain this use of `get_user_model` from `django.contrib.auth`.
    Its job is to find the project's User model, and it works whether you're
    using the standard User model or a custom one (like we will be)

Notice that, for these tests, we go back to importing the view function
directly, and calling it with an `HttpRequest` we build manually.  The Django
Test Client does a bit too much magic, and for these highly mocky tests, we
need more control -- we need to check that `auth_login` was passed the same
`request` object that we called the view with, for example, and that's not
possible if you use the Django client.

That gives us:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test accounts*]
[...]
AttributeError: <module 'accounts.views' from
'/workspace/superlists/accounts/views.py'> does not have the attribute
'auth_login'
[...]
AttributeError: <module 'accounts.views' from
'/workspace/superlists/accounts/views.py'> does not have the attribute
'auth_login'
[...]
AssertionError: '' != 'OK'
+ OK
----

Adding the import takes us down to two failures:

[role="sourcecode"]
.accounts/views.py
[source,python]
----
from django.contrib.auth import authenticate
from django.contrib.auth import login as auth_login
from django.http import HttpResponse
[...]
----

And we go through another couple of TDD cycles, until:


[role="sourcecode"]
.accounts/views.py
[source,python]
----
def login(request):
    user = authenticate(assertion=request.POST['assertion'])
    if user:
        auth_login(request, user)
    return HttpResponse('OK')
----
//ch15l015

...

----
OK
----


De-spiking our custom authentication back-end: mocking out an internet request
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Our custom authentication back-end is next!  Here's how it looked in the spike:


[role="skipme"]
.accounts/authentication.py
[source,python]
----
class PersonaAuthenticationBackend(object):

    def authenticate(self, assertion):
        # Send the assertion to Mozilla's verifier service.
        data = {'assertion': assertion, 'audience': 'localhost'}
        print('sending to mozilla', data, file=sys.stderr)
        resp = requests.post('https://verifier.login.persona.org/verify', data=data)
        print('got', resp.content, file=sys.stderr)

        # Did the verifier respond?
        if resp.ok:
            # Parse the response
            verification_data = resp.json()

            # Check if the assertion was valid
            if verification_data['status'] == 'okay':
                email = verification_data['email']
                try:
                    return self.get_user(email)
                except ListUser.DoesNotExist:
                    return ListUser.objects.create(email=email)


    def get_user(self, email):
        return ListUser.objects.get(email=email)

----

Decoding this:

* We take an assertion and send it off to Mozilla using `requests.post`.
* We check its response code (`resp.ok`), and then check for a `status=okay` in
  the response JSON.
* We then extract an email address, and either find an existing user with that 
  address, or create a new one.

1 if = 1 more test
^^^^^^^^^^^^^^^^^^

A rule of thumb for these sorts of tests:  any `if` means an extra test, and
any `try/except` means an extra test, so this should be about 4 tests.  Let's
start with one:


[role="sourcecode"]
.accounts/tests/test_authentication.py
[source,python]
----
from unittest.mock import patch
from django.test import TestCase

from accounts.authentication import (
    PERSONA_VERIFY_URL, DOMAIN, PersonaAuthenticationBackend
)

class AuthenticateTest(TestCase):

    @patch('accounts.authentication.requests.post')
    def test_sends_assertion_to_mozilla_with_domain(self, mock_post):
        backend = PersonaAuthenticationBackend()
        backend.authenticate('an assertion')
        mock_post.assert_called_once_with(
            PERSONA_VERIFY_URL,
            data={'assertion': 'an assertion', 'audience': DOMAIN}
        )
----

//TODO: change "audience" to "http://localhost" instead of just "localhost". 
// According to persona dev list, this is best practice...

In 'authenticate.py' we'll just have a few placeholders:
 
[role="sourcecode"]
.accounts/authentication.py
[source,python]
----
import requests

PERSONA_VERIFY_URL = 'https://verifier.login.persona.org/verify'
DOMAIN = 'localhost'


class PersonaAuthenticationBackend(object):

    def authenticate(self, assertion):
        pass
----

At this point we'll need to

[role="dofirst-ch15l018"]
[subs="specialcharacters,quotes"]
----
(virtualenv)$ *pip install requests*
----


NOTE: don't forget to add `requests` to 'requirements.txt' too, or the 
next deploy won't work...


Then let's see how the tests get on!

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test accounts*]
[...]
AssertionError: Expected 'post' to be called once. Called 0 times.
----

And we can get that to passing in 3 steps (make sure the Goat sees you doing each
one individually!)

[role="sourcecode"]
.accounts/authentication.py
[source,python]
----
    def authenticate(self, assertion):
        requests.post(
            PERSONA_VERIFY_URL,
            data={'assertion': assertion, 'audience': DOMAIN}
        )
----


Grand.

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test accounts*]
[...]

Ran 5 tests in 0.023s

OK
----

Next let's check that authenticate should return none if it sees an error from
the request:

[role="sourcecode"]
.accounts/tests/test_authentication.py (ch15l020)
[source,python]
----
    @patch('accounts.authentication.requests.post')
    def test_return_none_if_response_errors(self, mock_post):
        mock_response = mock_post.return_value
        mock_response.ok = False
        backend = PersonaAuthenticationBackend()

        user = backend.authenticate('an assertion')
        self.assertIsNone(user)
----

And that passes straight away -- we currently return None in all cases! 


patching at the Class level
^^^^^^^^^^^^^^^^^^^^^^^^^^^

The next test involves a bit of duplication -- let's apply the "3 strikes"
rule:


[role="sourcecode"]
.accounts/tests/test_authentication.py (ch15l021)
[source,python]
----
from unittest.mock import Mock, patch
[...]

mock_post = Mock() #<1>
@patch('accounts.authentication.requests.post', mock_post) #<1>
class AuthenticateTest(TestCase):

    def setUp(self):
        self.backend = PersonaAuthenticationBackend()
        self.mock_response = mock_post.return_value #<3>
        self.mock_response.ok = True #<3>

    def tearDown(self):
        mock_post.reset_mock() #<2>


    def test_sends_assertion_to_mozilla_with_domain(self):
        self.backend.authenticate('an assertion')
        mock_post.assert_called_once_with(
            PERSONA_VERIFY_URL,
            data={'assertion': 'an assertion', 'audience': DOMAIN}
        )


    def test_return_none_if_response_errors(self):
        self.mock_response.ok = False #<4>
        user = self.backend.authenticate('an assertion')
        self.assertIsNone(user)


    def test_returns_none_if_status_not_okay(self):
        self.mock_response.json.return_value = {'status': 'not okay!'} #<4>
        user = self.backend.authenticate('an assertion')
        self.assertIsNone(user)
----

<1> You can apply a `patch` at the class level as well, and that has the effect
    that every method in the class will have the patch applied.  You can also
    see a second usage pattern of the `patch` function, which is that you can
    pass it a specific mock object to use, rather than have it inject it as
    an extra argument to the functions it decorates.

<2> Because we're using the same mock object every time, we call a special
    method called `reset_mock`, which resets properties like `.called`, so
    that each test is independent

<3> We can now use the `setUp` function to prepare some useful variables which
    we're going to use in most of our tests.  

<4> Now each test is only adjusting the setup variables 'it' needs, rather than
    setting up a load of duplicated boilerplate -- it's more readable.


And that's all very well, but everything still passes!  

----
OK
----

Time for test for the positive case where authenticate should return a user
object. We expect this to fail.


[role="sourcecode"]
.accounts/tests/test_authentication.py (ch15l022)
[source,python]
----
from django.contrib.auth import get_user_model
User = get_user_model()
[...]

    def test_finds_existing_user_with_email(self):
        self.mock_response.json.return_value = {'status': 'okay', 'email': 'a@b.com'}
        self.backend.get_user = Mock()
        mock_user = self.backend.get_user.return_value
        user = self.backend.authenticate('an assertion')
        self.assertEqual(user, mock_user)
----

Indeed, a fail:

----
AssertionError: None != <Mock name='mock()' id='139758452629392'>
----

Let's code:

[role="sourcecode"]
.accounts/authentication.py
[source,python]
----
    def authenticate(self, assertion):
        requests.post(
            PERSONA_VERIFY_URL,
            data={'assertion': assertion, 'audience': DOMAIN}
        )
        return self.get_user()
----

That gets our new test passing, but other the other tests fail:

----
AttributeError: 'PersonaAuthenticationBackend' object has no attribute
'get_user'
----

To get back to a working state, let's define a temporary placeholder for
`get_user`:

[role="sourcecode"]
.accounts/authentication.py
[source,python]
----
class PersonaAuthenticationBackend(object):
    [...]

    def get_user(self):
        pass
----

That works:

----
OK
----


And now we can write a new unit test for the `self.get_user` call:


[role="sourcecode"]
.accounts/tests/test_authentication.py (ch15l025)
[source,python]
----
    def test_calls_get_user_with_email(self):
        self.mock_response.json.return_value = {'status': 'okay', 'email': 'a@b.com'}
        self.backend.get_user = Mock()
        self.backend.authenticate('an assertion')
        self.backend.get_user.assert_called_once_with('a@b.com')
----

Right:

----
AssertionError: Expected call: mock('a@b.com')
Actual call: mock()
----

And so

[role="sourcecode"]
.accounts/authentication.py
[source,python]
-----
    def authenticate(self, assertion):
        response = requests.post(
            PERSONA_VERIFY_URL,
            data={'assertion': assertion, 'audience': DOMAIN}
        )
        email = response.json()['email']
        return self.get_user(email)
-----

But that breaks a couple of the old tests:

-----
    email = response.json()['email']
KeyError: 'email'
[...]
FAILED (errors=3)
----

We need some more common setup:

[role="sourcecode"]
.accounts/tests/test_authentication.py
[source,python]
----
    def setUp(self):
        self.backend = PersonaAuthenticationBackend()
        self.mock_response = mock_post.return_value
        self.mock_response.ok = True
        self.mock_response.json.return_value = {
            'status': 'okay', 'email': 'a@b.com'
        }

----

That changes the errors slightly:


----
TypeError: get_user() takes 1 positional argument but 2 were given
TypeError: get_user() takes 1 positional argument but 2 were given
KeyError: 'email'
----

We fix the first couple by changing the signature of our `get_user`:

[role="sourcecode"]
.accounts/authentication.py (ch15l027)
[source,python]
----
    def get_user(self, email):
        pass
----

And that takes us down to the one `KeyError` for
`test_returns_none_if_status_not_okay`.  This is pointing to a "real" problem,
and justifies a real fix:

[role="sourcecode"]
.accounts/authentication.py
[source,python]
----
    def authenticate(self, assertion):
        response = requests.post(
            PERSONA_VERIFY_URL,
            data={'assertion': assertion, 'audience': DOMAIN}
        )
        if response.json()['status'] == 'okay':
            email = response.json()['email']
            return self.get_user(email)
----

Woot!:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test accounts*]
[...]
Ran 9 tests in 0.016s
OK
----



Testing exception handling
^^^^^^^^^^^^^^^^^^^^^^^^^^

Here's a last test, in which we'll see how to test a case where we expect
a function to raise an exception.  We can do this by dynamically replacing
said function with a pre-prepared exception-raiser:

[role="sourcecode"]
.accounts/tests/test_authentication.py (ch15l029)
[source,python]
----
    def test_creates_new_user_if_required(self):
        def raise_no_user_error(_):
            raise User.DoesNotExist()
        self.backend.get_user = raise_no_user_error
        user = self.backend.authenticate('an assertion')
        new_user = User.objects.all()[0]
        self.assertEqual(user, new_user)
        self.assertEqual(user.email, 'a@b.com')
----

If you've not seen it before, I'm using the convention of a variable
named underscore (`_`) to represent a variable whose value we don't care about.

That gives:

----
[...]
    return self.get_user(email)
  File "/workspace/superlists/accounts/tests/test_authentication.py", line 63,
in raise_no_user_error
    raise User.DoesNotExist()
django.contrib.auth.models.DoesNotExist
----

Here's how we fix it:

[role="sourcecode"]
.accounts/authentication.py (ch15l030)
[source,python]
----
from django.contrib.auth import get_user_model
User = get_user_model()
[...]

    email = response.json()['email']
    try:
        return self.get_user(email)
    except User.DoesNotExist:
        return User.objects.create(email=email)
----

Surely one of these tests should still be failing?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

That leaves one puzzler:  how come our `test_return_none_if_response_errors`
isn't failing?  It took me a while to figure it out, but it's because 
`self.get_user`, being currently a placeholder function with a `pass`, is 
returning None.  It's my own fault for writing even placeholder code without
tests.  The testing goat is looking at me with a raised eyebrow...

Let's get some tests for `get_user` in ASAP then:


[role="sourcecode"]
.accounts/tests/test_authentication.py (ch15l031)
[source,python]
----
class GetUserTest(TestCase):

    def test_get_user_gets_user_from_database(self):
        actual_user = User.objects.create(email='a@b.com')
        backend = PersonaAuthenticationBackend()
        found_user = backend.get_user('a@b.com')
        self.assertEqual(found_user, actual_user)

----

That gives

----
AssertionError: None != <User: >
----

And, if we implement it:

[role="sourcecode"]
.accounts/authentication.py (ch15l032)
[source,python]
----
    def get_user(self, email):
        return User.objects.get(email=email)
----

Our new test passes, but, sure enough, our response error test is failing as it
should:

----
FAIL: test_return_none_if_response_errors
(accounts.tests.test_authentication.AuthenticateTest)
[...]
AssertionError: <User: > is not None
----


There we go! And here's our final fix:


[role="sourcecode"]
.accounts/authentication.py (ch15l033)
[source,python]
----
    def authenticate(self, assertion):
        response = requests.post(
            PERSONA_VERIFY_URL,
            data={'assertion': assertion, 'audience': DOMAIN}
        )
        if response.ok and response.json()['status'] == 'okay':
            [...]
----

And I 'think' we have ourselves an authentication backend.  

----
OK
----

It won't work yet though, because we need to define our custom user model next.


A minimal custom user model
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Django's built-in user model makes all sorts of assumptions about what
information you want to track about users, from explicitly recording
first name and last name, to forcing you to use a username.   I'm a great
believer in not storing information about users unless you absolutely must,
so a User model that records an email address and nothing else sounds good to
me!

[role="sourcecode"]
.accounts/tests/test_models.py
[source,python]
----
from django.test import TestCase
from django.contrib.auth import get_user_model

User = get_user_model()

class UserModelTest(TestCase):

    def test_user_is_valid_with_email_only(self):
        user = User(email='a@b.com')
        user.full_clean() # should not raise
-----

That gives us an expected failure:

----
django.core.exceptions.ValidationError: {'username': ['This field cannot be
blank.'], 'password': ['This field cannot be blank.']}

----

Password?  Username?  Bah!  How about this?


[role="sourcecode"]
.accounts/models.py
[source,python]
----
from django.db import models

class User(models.Model):
    email = models.EmailField()
----

And we wire it up inside 'settings.py' using a variable called
`AUTH_USER_MODEL`.  While we're at it, we'll add our new authentication backend
too:

[role="sourcecode"]
.superlists/settings.py (ch15l036)
[source,python]
----
AUTH_USER_MODEL = 'accounts.User'
AUTHENTICATION_BACKENDS = (
    'accounts.authentication.PersonaAuthenticationBackend',
)
----

Now Django tells us off because it wants a couple of bits of metadata on any
custom user model:


----
AttributeError: type object 'User' has no attribute 'REQUIRED_FIELDS'
----

Sigh.  Come on, Django, it's only got one field, you should be able to figure
out the answers to these questions for yourself.  Here you go:

[role="sourcecode"]
.accounts/models.py
[source,python]
----
class User(models.Model):
    email = models.EmailField()
    REQUIRED_FIELDS = ()
----

Next silly footnote:[You might ask, if I think Django is so silly, why don't I
submit a pull request to fix it?  Should be quite a simple fix.  Well, I
promise I will, as soon as I've finished writing the book.  For now, snarky
comments will have to suffice.] 
question?

----
AttributeError: type object 'User' has no attribute 'USERNAME_FIELD'
----

So:

[role="sourcecode"]
.accounts/models.py
[source,python]
----
class User(models.Model):
    email = models.EmailField()
    REQUIRED_FIELDS = ()
    USERNAME_FIELD = 'email'
----


What now?

----
accounts.user: The USERNAME_FIELD must be unique. Add unique=True to the field
parameters.
----

I'll do one better! Let's make the email field into the primary key, and
thus implicitly remove the auto-generated `id` column:

[role="sourcecode"]
.accounts/models.py (ch15l039)
[source,python]
----
    email = models.EmailField(primary_key=True)
----


Tests as documentation
^^^^^^^^^^^^^^^^^^^^^^

That gets our tests running.  We'll write a test for this feature
anyway, just as a form of documentation:

[role="sourcecode"]
.accounts/tests/test_models.py (ch15l040)
[source,python]
----
    def test_email_is_primary_key(self):
        user = User()
        self.assertFalse(hasattr(user, 'id'))
----

And just to double-check, we can temporarily switch back the `EmailField` to
using `unique=True` instead of `primary_key=True`, just to see the test fail

NOTE: People sometimes say that your tests are a form of documentation for your
code -- they express what your requirements are of a particular class.
Sometimes, if you forget why you've done something a particular way, going back
and looking at the tests will give you the answer.  That's why it's important
to give your tests explicit, verbose method names.


A slight disappointment
^^^^^^^^^^^^^^^^^^^^^^^

Meanwhile, we have a weird unexpected failure:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test accounts*]
[...]
ERROR: test_returns_OK_when_user_found
(accounts.tests.test_views.LoginViewTest)
  File "/workspace/superlists/accounts/tests/test_views.py", line 29, in
test_returns_OK_when_user_found
    response = self.client.post('/accounts/login', {'assertion': 'a'})
[...]
  File "/workspace/superlists/accounts/views.py", line 8, in login
    auth_login(request, user)
[...]
    user.save(update_fields=['last_login'])
[...]
ValueError: The following fields do not exist in this model or are m2m fields:
last_login
----

It looks like Django is going to insist on us having a `last_login` field on
our User model too.  Oh well.  My pristine, single-field user model is
despoiled. I still love it though.

[role="sourcecode"]
.accounts/models.py
[source,python]
----
from django.db import models
from django.utils import timezone

class User(models.Model):
    email = models.EmailField(primary_key=True)
    last_login = models.DateTimeField(default=timezone.now)
    REQUIRED_FIELDS = ()
    USERNAME_FIELD = 'email'
----

Right!  Anyway! That works!

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test accounts*]
[...]
OK
----



The moment of truth:  will the FT pass?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


I think we're just about ready to try our functional test!  Let's just wire 
up our base template.  Firstly, it needs to show a different message for
logged-in and non-logged-in users:

[role="sourcecode"]
.lists/templates/base.html
[source,html]
----
<nav class="navbar navbar-default" role="navigation">
    <a class="navbar-brand" href="/">Superlists</a>
    {% if user.email %}
        <a class="btn navbar-btn navbar-right" id="id_logout" href="#">Log out</a>
        <span class="navbar-text navbar-right">Logged in as {{ user.email }}</span>
    {% else %}
        <a class="btn navbar-btn navbar-right" id="id_login" href="#">Sign in</a>
    {% endif %}
</nav>
----


Lovely.  Then we wire up our various context variables for the call to
`initialize`:

[role="sourcecode"]
.lists/templates/base.html
[source,html]
----
<script>
    $(document).ready( function () {
        var user = "{{ user.email }}" || null;
        var token = "{{ csrf_token }}";
        var urls = {
            login: "{% url 'login' %}",
            logout: "TODO",
        };
        Superlists.Accounts.initialize(navigator, user, token, urls);
    });
</script>
----

So how does our FT get along?

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests.test_login*]
Creating test database for alias 'default'...
[...]
Ran 1 test in 26.382s

OK
-----

Woohoo!

I've been waiting to do a commit up until this moment, just to make sure
everything works.  At this point, you could make a series of separate 
commits -- one for the login view, one for the auth backend, one for 
the user model, one for wiring up the template.  Or you could decide that,
since they're all inter-related, and none will work without the others,
you may as well just have one big commit.

[subs="specialcharacters,quotes"]
----
$ *git status*
$ *git add .*
$ *git diff --staged*
$ *git commit -am "Custom Persona auth backend + custom user model"*
----


Finishing off our FT, testing logout
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We'll extend our FT to check that the logged-in status persists, ie it's 
not just something we set in JavaScript on the client side, but the server
knows about it too and will maintain the logged-in state if she refreshes
the page. We'll also test that she can log out.

I started off writing code a bit like this:

[role="sourcecode skipme"]
.functional_tests/test_login.py
[source,python]
----
    # Refreshing the page, she sees it's a real session login,
    # not just a one-off for that page
    self.browser.refresh()
    self.wait_for_element_with_id('id_logout')
    navbar = self.browser.find_element_by_css_selector('.navbar')
    self.assertIn(TEST_EMAIL, navbar.text)
----

And, after 4 repetitions of very similar code, a helper function suggested
itself:


[role="sourcecode"]
.functional_tests/test_login.py
[source,python]
----
    def wait_to_be_logged_in(self):
        self.wait_for_element_with_id('id_logout')
        navbar = self.browser.find_element_by_css_selector('.navbar')
        self.assertIn(TEST_EMAIL, navbar.text)

    def wait_to_be_logged_out(self):
        self.wait_for_element_with_id('id_login')
        navbar = self.browser.find_element_by_css_selector('.navbar')
        self.assertNotIn(TEST_EMAIL, navbar.text)
----

And I extended the FT like this:

[role="sourcecode"]
.functional_tests/test_login.py (ch15l046)
[source,python]
----
        [...]
        # The Persona window closes
        self.switch_to_new_window('To-Do')

        # She can see that she is logged in
        self.wait_to_be_logged_in()

        # Refreshing the page, she sees it's a real session login,
        # not just a one-off for that page
        self.browser.refresh()
        self.wait_to_be_logged_in()

        # Terrified of this new feature, she reflexively clicks "logout"
        self.browser.find_element_by_id('id_logout').click()
        self.wait_to_be_logged_out()

        # The "logged out" status also persists after a refresh
        self.browser.refresh()
        self.wait_to_be_logged_out()
----

I also found that improving the failure message in the
`wait_for_element_with_id` function helped to see what was going on:


[role="sourcecode"]
.functional_tests/test_login.py
[source,python]
----
    def wait_for_element_with_id(self, element_id):
        WebDriverWait(self.browser, timeout=30).until(
            lambda b: b.find_element_by_id(element_id),
            'Could not find element with id %s. Page text was %s' % (
                element_id, self.browser.find_element_by_tag_name('body').text
            )
        )
----


With that, we can see that the test is failing because the logout button doesn't work:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests.test_login*]
  File "/workspace/superlists/functional_tests/test_login.py", line 39, in
wait_to_be_logged_out
[...]
selenium.common.exceptions.TimeoutException: Message: 'Could not find element
with id id_login. Page text was Superlists\nLog out\nLogged in as
testinggoat@yahoo.com\nStart a new To-Do list' 
----

Implementing a logout button is actually very simple:  we can use Django's 
https://docs.djangoproject.com/en/1.6/topics/auth/default/#module-django.contrib.auth.views[built-in
logout view], which clears down the user's session and redirects them
to a page of our choice:

[role="sourcecode"]
.accounts/urls.py
[source,python]
----
urlpatterns = patterns('',
    url(r'^login$', 'accounts.views.login', name='login'),
    url(r'^logout$', 'django.contrib.auth.views.logout', {'next_page': '/'}, name='logout'),
)
----

And in base.html, we just make the logout into a normal URL link:

[role="sourcecode"]
.lists/templates/base.html
[source,python]
----
<a class="btn navbar-btn navbar-right" id="id_logout" href="{% url 'logout' %}">Log out</a>
----


And that gets us a fully passing FT -- indeed, a fully passing test suite:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test functional_tests.test_login*]
[...]
OK
$ pass:quotes[*python3 manage.py test*]
[...]
Ran 48 tests in 78.124s

OK
----





Wrap-up (under construction)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Use mock, but use it sparingly

* Dedupe your FTs: every single FT doesn't need to test every single feature.
  But be aware that FTs are there to catch strange and unpredictable
  interactions between features.  Try to keep your "cheats" for deduplication
  reasonably plausible in the real world.


//TODO: test what happens if Persona is down? Show how to test?


