[[Persona-clientside-chapter]]
User Authentication, Spiking and Mocking
----------------------------------------

((("authentication")))
((("user authentication", see="authentication")))
Our beautiful lists site has been live for a few days, and our users are
starting to come back to us with feedback.  "We love the site", they say, "but
we keep losing our lists.  Manually remembering URLs is hard. It'd be great if
it could remember what lists we'd started".

Remember Henry Ford and faster horses. Whenever you hear a user requirement,
it's important to dig a little deeper and think--what is the real requirement
here?  And how can I make it involve a cool new technology I've been wanting
to try out?

Clearly the requirement here is that people want to have some kind of user
account on the site.  So, without further ado, let's dive into authentication.

Naturally we're not going to mess about with remembering passwords
ourselves--besides being 'so' '90s, secure storage of user passwords is a
security nightmare we'd rather leave to someone else.  We'll use something
fun called passwordless auth instead.

(If you 'insist' on storing your own passwords, Django's default auth
module is ready and waiting for you. It's nice and straightforward, and I'll
leave it to you to discover on your own.)

((("authentication", "mocking", see="mocks/mocking")))
((("mocks/mocking", "in JavaScript")))
In this chapter, we're going to get pretty deep into a testing
technique called "mocking". Personally, I know it took me a few weeks to
really get my head around mocking, so don't worry if it's confusing at first.

NOTE: This chapter has been substantially rewritten for the new edition, so
let me know via obeythetestinggoat@gmail.com if you feel there's
any particular sections where I don't explain things well, or where I'm 
going too fast.


Passwordless Auth
~~~~~~~~~~~~~~~~~

((("Passwordless")))
((("authentication", "Passwordless")))
What authentication system could we use to avoid storing passwords ourselves?
Oauth?  Openid?  "Login with Facebook"?   Ugh.  For me those all have
unacceptable creepy overtones; why should Google or Facebook know what sites
you're logging into and when?

In the first edition I used an experimental project called "Persona",
cooked up by a few remaining techno-hippy-idealists at Mozilla, but sadly
that project was discontinued.

Instead I've found a fun approach to authentication that goes by the name
of "Passwordless", but you might call it "just use email".

The system was invented by someone annoyed at having to create
new passwords for so many websites, who found himself just using random,
throwaway passwords, not even trying to remember them, and using the
"forgot my password" feature whenever he needed to log in again. You can
https://medium.com/@ninjudd/passwords-are-obsolete-9ed56d483eb#.cx8iber30[read all about it here]

So the concept is:  just use email to verify someone's identity.  If you're
going to have a "forgot my password" feature, then you're trusting email
anyway, so why not just go the whole hog?  Whenever someone wants to log in,
we generate a unique URL for them to use, email it to them, and they then
click through that to get into the site.

It's by no means a perfect system, and in fact there are lots of subtleties
to be thought through before it would really make a good login solution for
a production website, but this is just a fun toy project so let's give it a go.



Exploratory Coding, aka "Spiking"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

((("spiking", id="ix_spiking", range="startofrange")))
((("exploratory coding", seealso="spiking")))
Before I wrote this chapter all I knew about passwordless auth was the outline
I'd read above.  I'd never seen any code for it, and didn't really know where
to start in building it.

In <<manual-validation-chapter>> and <<simple-form-chapter>> we saw that you
can use a unit test as a way of exploring a new API or tool, but sometimes you
just want to hack something together without any
tests at all, just to see if it works, to learn it or get a feel for it.
That's absolutely fine.  When learning a new tool or exploring a new possible
solution, it's often appropriate to leave the rigorous TDD process to one side,
and build a little prototype without tests, or perhaps with very few tests.
The goat doesn't mind looking the other way for a bit.

This kind of prototyping activity is often called a "spike", for 
http://stackoverflow.com/questions/249969/why-are-tdd-spikes-called-spikes[reasons
best known].

The first thing I did was take a look at existing Python and Django authentication
packages, like http://www.intenct.nl/projects/django-allauth/[django-allauth]
and https://github.com/omab/python-social-auth[python-social-auth], but both of
them looked overcomplicated for this stage (and I was quietly relieved since I
was rather looking forward to writing my own code for this!)

So instead I dived in and hacked about, and after a few dead ends and wrong turns,
I had something which just about works.  I'll take you on a tour, and then
we'll go through and "de-spike" the implementation.  

You should go ahead and add this code to your own site too, and then you can
have a play with it, try logging in with your own email address, and convince
yourself that it really does work.



Starting a Branch for the Spike
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Before embarking on a spike, it's a good idea to start a new branch, so you
can still use your VCS without worrying about your spike commits getting mixed
up with your production code:

[role="dofirst-ch15l000"]
[subs="specialcharacters,quotes"]
----
$ *git checkout -b persona-spike*
----


Front-end Log in UI
^^^^^^^^^^^^^^^^^^^

((("spiking", "frontend")))
Let's start with the front-end, just some log in and log out
links...

[role="sourcecode"]
.lists/templates/base.html (ch15l001)
[source,html]
----
<body>
<div class="container">

    <div class="navbar">
        {% if user.is_authenticated %}
            <p>Logged in as {{ user.email}}</p>
            <p><a id="id_logout" href="{% url 'logout' %}">Log out</a></p>
        {% else %}
          <form method="POST" action ="{% url 'send_login_email' %}">
            Enter email to log in: <input name="email" type="text" />
            {% csrf_token %}
          </form>
        {% endif %}
    </div>

    <div class="row">
    [...]
----


Sending emails from Django
^^^^^^^^^^^^^^^^^^^^^^^^^^

The login theory will be something like this:

- When someone wants to log in, we generate a unique secret token for them,
    store it in the database linked to their email, and send it to them

- They then check their email, which will have a link to a url that includes 
    that token

- When they click on that link, we check whether the token exists in database,
    and if so, they are logged in as the associated user.


((("spiking", "server-side authentication", id="ix_spikingssa", range="startofrange")))
((("authentication","customising", id="ix_authcust", range="startofrange")))
((("Django", "authentication in", id="ix_Djangoauth", range="startofrange")))
First we prep an app for our accounts stuff:

[subs="specialcharacters,quotes"]
----
$ *python manage.py startapp accounts*
----

And we'll wire up 'urls.py' with at least one URL.  In the top-level 'superlists/urls.py'...

[role="sourcecode"]
.superlists/urls.py (ch15l003)
[source,python]
----
from django.conf.urls import include, url
from lists import views as list_views
from lists import urls as list_urls
from accounts import urls as accounts_urls

urlpatterns = [
    url(r'^$', list_views.home_page, name='home'),
    url(r'^lists/', include(list_urls)),
    url(r'^accounts/', include(accounts_urls)),
]
----

And in the accounts module's 'urls.py':

[role="sourcecode"]
.accounts/urls.py (ch15l004)
[source,python]
----
from django.conf.urls import url
from accounts import views

urlpatterns = [
    url(r'^send_email$', views.send_login_email, name='send_login_email'),
]
----

Here's the view that's in charge of creating a token associated with the email
address a user puts in our login form:

[role="sourcecode"]
.accounts/views.py (ch15l005)
[source,python]
----
import uuid
import sys
from django.shortcuts import render
from django.core.mail import send_mail

from accounts.models import Token


def send_login_email(request):
    email = request.POST['email']
    uid = str(uuid.uuid4())
    Token.objects.create(email=email, uid=uid)
    print('saving uid', uid, 'for email', email, file=sys.stderr)
    url = request.build_absolute_uri(
        '/accounts/login?uid={uid}'.format(uid=uid)
    )
    send_mail(
        'Your login link for Superlists',
        'Use this link to log in:\n\n{url}'.format(url=url),
        'noreply@superlists',
        [email],
    )
    return render(request, 'login_email_sent.html')
----


For that to work we'll need a placeholder message confirming the email was
sent:

[role="sourcecode"]
.accounts/templates/login_email_sent.html (ch15l006)
[source,html]
----
<html>
<h1>Email sent</h1>

<p>Check your email, you'll find a message with a link that will log you into
the site.</p>

</html>
----

(You can see how hacky this code is -- we'd want to integrate this template
with our 'base.html' in the real version)

More importantly, for the Django `send_mail` function to work, we need to tell
Django our email server address.  I'm just using my gmail account for now.  You
can use any email provider you like, as long as they support SMTP.

[role="sourcecode"]
.superlists/settings.py (ch15l007)
[source,python]
----

EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'obeythetestinggoat@gmail.com'
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASSWORD')
EMAIL_USE_TLS = True
----

TIP: If you want to use gmail as well, you'll probably have to visit your
    google account security settings page.  If you're using two-factor auth,
    you'll want to set up an "app-specific password".  Even if you're not,
    google might reject SMTP requests it doesn't recognise, until you mark
    them as authorised.


Using environment variables to avoid secrets in source code
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Sooner or later every project needs to figure out a way to deal with 
"secrets", things like email passwords or API keys that you don't want
to share with the whole wide world.  If your repo is private, it might
be fine to just store it in git, but often that's not the case.  This
also intersects with the need to have different settings in dev and in
production (remember how we dealt with the django SECRET_KEY setting 
in <<deployment_chapter>>?)

A common pattern is to use environment variables for this sort of
configuration setting, which is what I'm doing with the `os.environ.get`.

TODO: link to 12-factor page on env vars?

To get this to work, I need to set the environment variable in the shell
that's running my dev server.

[subs="specialcharacters,quotes"]
----
$ *export EMAIL_PASSWORD="sekrit"*
----

Later we'll see about adding that to the staging server as well.


Custom authentication models
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We'll need a model to store our tokens in the database -- they link an
email address with a unique id.  Pretty simple.


[role="sourcecode"]
.accounts/models.py (ch15l008)
[source,python]
----
from django.db import models

class Token(models.Model):
    email = models.EmailField()
    uid = models.CharField(max_length=255)
----


While we're messing about with models, let's build a user model.
When I first wrote this, custom user models were a new thing in
Django, so I dived into the 
https://docs.djangoproject.com/en/1.8/topics/auth/customizing/[Django 
auth documentation] and tried to hack in the simplest possible
user model:

[role="sourcecode"]
.accounts/models.py (ch15l009)
[source,python]
----
[...]
from django.contrib.auth.models import (
    AbstractBaseUser, BaseUserManager, PermissionsMixin
)


class ListUser(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(primary_key=True)
    USERNAME_FIELD = 'email'
    #REQUIRED_FIELDS = ['email', 'height']

    objects = ListUserManager()

    @property
    def is_staff(self):
        return self.email == 'harry.percival@example.com'

    @property
    def is_active(self):
        return True
----

That's what I call a minimal user model!  One field, none of this
firstname/lastname/username nonsense, and, pointedly, no password! 
Somebody else's problem!

But, again, you can see that this code isn't ready
for production, from the commented-out lines to the hardcoded harry
email address.  We'll neaten this up quite a lot when we de-spike.


To get it to work, you need a model manager for the user:

[role="sourcecode small-code"]
.accounts/models.py (ch15l010)
[source,python]
----
[...]
class ListUserManager(BaseUserManager):

    def create_user(self, email):
        ListUser.objects.create(email=email)

    def create_superuser(self, email, password):
        self.create_user(email)
----



Finishing the custom Django auth
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Here's the view that handles the POST to 'accounts/login':

[role="sourcecode small-code"]
.accounts/views.py (ch15l011)
[source,python]
----
import uuid
import sys
from django.contrib.auth import authenticate
from django.contrib.auth import login as auth_login
from django.core.mail import send_mail
from django.shortcuts import redirect, render
[...]

def login(request):
    print('login view', file=sys.stderr)
    uid = request.GET.get('uid')
    user = authenticate(uid=uid)
    if user is not None:
        auth_login(request, user)
    return redirect('/')
----


The "authenticate" function invokes Django's authentication framework, which
we configure using a "custom authentication backend",
whose job it is to validate the uid and return a user with the right email.

We could have done this stuff directly in the view, but we may as well
structure things the way Django expects.  It makes for a reasonably neat
separation of concerns.


[role="sourcecode small-code"]
.accounts/authentication.py (ch15l012)
[source,python]
----
import sys
from accounts.models import ListUser, Token

class PasswordlessAuthenticationBackend(object):

    def authenticate(self, uid):
        print('uid', uid, file=sys.stderr)
        if not Token.objects.filter(uid=uid).exists():
            print('no token found', file=sys.stderr)
            return None
        token = Token.objects.get(uid=uid)
        print('got token', file=sys.stderr)
        try:
            user = ListUser.objects.get(email=token.email)
            print('got user', file=sys.stderr)
            return user
        except ListUser.DoesNotExist:
            print('new user', file=sys.stderr)
            return ListUser.objects.create(email=token.email)


    def get_user(self, email):
        return ListUser.objects.get(email=email)
----


Again, lots of debug prints in there, and some duplicated code, not something
we'd want in production, but it works...


Finally, a logout view:


[role="sourcecode"]
.accounts/views.py (ch15l013)
[source,python]
----
from django.contrib.auth import login as auth_login, logout as auth_logout
[...]

def logout(request):
    auth_logout(request)
    return redirect('/')
----


Add login and logout to our urls.py...

[role="sourcecode"]
.accounts/urls.py (ch15l014)
[source,python]
----
from django.conf.urls import url
from accounts import views

urlpatterns = [
    url(r'^send_email$', views.send_login_email, name='send_login_email'),
    url(r'^login$', views.login, name='login'),
    url(r'^logout$', views.logout, name='logout'),
]
----

Almost there! We switch on the auth backend and our new accounts app in
'settings.py':

[role="sourcecode"]
.superlists/settings.py (ch15l015)
[source,python]
----
INSTALLED_APPS = (
    #'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'lists',
    'accounts',
)

AUTH_USER_MODEL = 'accounts.ListUser'
AUTHENTICATION_BACKENDS = (
    'accounts.authentication.PasswordlessAuthenticationBackend',
)

MIDDLEWARE_CLASSES = (
[...]
----

A quick `makemigrations` to make the token and user models real:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py makemigrations*]
Migrations for 'accounts':
  0001_initial.py:
    - Create model ListUser
    - Create model Token
----


And a `migrate` to build the database:

[subs="specialcharacters,quotes"]
----
$ *python manage.py migrate*
[...]
Running migrations:
  Applying accounts.0001_initial... OK
----


And we should be all done! Why not spin up a dev server with `runserver` and
see how it all looks (<<todo-login-working>>)?

[[todo-login-working]]
.It works! It works! Mwahahahaha.
image::images/tbc.png["successful login"]

TIP: if you get a `SMTPSenderRefused` error message, don't forget to set
    the `EMAIL_PASSWORD` environment variable in the shell that's running
    `runserver`


(((range="endofrange", startref="ix_spikingssa")))
(((range="endofrange", startref="ix_authcust")))
(((range="endofrange", startref="ix_Djangoauth")))
That's pretty much it! Along the way, I had to fight pretty hard, including
clicking around the gmail account security UI for a while, stumbling over
several missing attributes on my custom user model (because I didn't read the
docs properly), and even one point switching to the dev version of Django to
overcome a bug, which thankfully turned out to be irrelevant.
((("Ajax")))
((("debugging")))


//TODO: check if this is still needed? in 1.9?
((("spiking", "logging")))

.Aside: Logging to stderr
*******************************************************************************
While spiking, it's pretty critical to be able to see exceptions that are being
generated by your code. Annoyingly, Django doesn't send all exceptions to the 
terminal by default, but you can make it do so with a variable called `LOGGING`
in 'settings.py':

[role="sourcecode"]
.superlists/settings.py (ch15l017)
[source,python]
----
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
        },
    },
    'root': {'level': 'INFO'},
}
----

Django uses the rather "enterprisey" logging package from the Python standard
library, which, although very fully featured, does suffer from a fairly steep
learning curve. It's covered a little more in <<testfixtures-and-logging>>, 
and in the https://docs.djangoproject.com/en/1.8/topics/logging/[Django docs].
*******************************************************************************

But we now have a working solution!  Let's commit it on our spike branch:
(((range="endofrange", startref="ix_javaspiking")))
[subs="specialcharacters,quotes"]
----
$ *git status*
$ *git add accounts*
$ *git commit -am "spiked in custom passwordless auth backend"*
----

Time to de-spike!


De-spiking
~~~~~~~~~~

((("De-spiking")))
((("spiking", "de-spiking")))
((("functional tests/testing (FT)", "for de-spiking", sortas="despiking")))
((("JavaScript", "de-spiking in")))
De-spiking means rewriting your prototype code using TDD.  We now have enough
information to "do it properly".  So what's the first step?  An FT of course!

We'll stay on the spike branch for now, to see our FT pass against our spiked
code.  Then we'll go back to master, and commit just the FT.

Here's a first, simple version of the FT

//l018
[role="sourcecode"]
.functional_tests/test_login.py
[source,python]
----
import re
from django.core import mail

from .base import FunctionalTest

TEST_EMAIL = 'edith@example.com'
SUBJECT = 'Your login link for Superlists'


class LoginTest(FunctionalTest):

    def test_can_get_email_link_to_log_in(self):
        # Edith goes to the awesome superlists site
        # and notices a "Log in" section in the navbar for the first time
        # It's telling her to enter her email address, so she does

        self.browser.get(self.server_url)
        self.browser.find_element_by_name('email').send_keys(
            TEST_EMAIL + '\n'
        )

        # A message appears telling her an email has been sent
        body = self.browser.find_element_by_tag_name('body')
        self.assertIn('Check your email', body.text)

        # She checks her email and finds a message
        email = mail.outbox[0]  #<1>
        self.assertIn(TEST_EMAIL, email.to)
        self.assertEqual(email.subject, SUBJECT)

        # It has a url link in it
        self.assertIn('Use this link to log in', email.body)
        url_search = re.search(r'http://.+/.+$', email.body)
        if not url_search:
            self.fail(
                'Could not find url in email body:\n{}'.format(email.body)
            )
        url = url_search.group(0)
        self.assertIn(self.server_url, url)

        # she clicks it
        self.browser.get(url)

        # she is logged in!
        self.browser.find_element_by_link_text('Log out')
        navbar = self.browser.find_element_by_css_selector('.navbar')
        self.assertIn(TEST_EMAIL, navbar.text)
----

<1> Were you worried about how we were going to handle retrieving emails in our
    tests?  Thankfully we can cheat for now! When running tests, Django gives
    us access to any emails the server tries to send via the `mail.outbox`
    attribute. We'll save checking "real" emails for later (but we will do it!)


And if we run the FT, it works!

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_login*]
Creating test database for alias 'default'...
Not Found: /favicon.ico
saving uid [...]
login view
uid [...]
got token
new user

.
 ---------------------------------------------------------------------
Ran 1 test in 3.729s

OK
Destroying test database for alias 'default'...
----

You can even see some of the debug output I left in my spiked view
implementations.  Now it's time to revert all of our temporary changes,
and reintroduce them one by one in a test-driven way.


Reverting Our Spiked Code
^^^^^^^^^^^^^^^^^^^^^^^^^


[subs="specialcharacters,quotes"]
----
$ *git checkout master* # switch back to master branch
$ *rm -rf accounts* # remove any trace of spiked code
$ *git add functional_tests/test_login.py*
$ *git commit -m "FT for login via email"*
----

Now we rerun the FT and let it drive our development:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_login*]
selenium.common.exceptions.NoSuchElementException: Message: Unable to locate
element: {"method":"name","selector":"email"}
[...]
----

The first thing it wants us to do is add an email input box.

Next a "do-nothing" login email box.  Bootstrap has some built-in classes for
navigation bars, so we'll use them:

[role="sourcecode"]
.lists/templates/base.html (ch15l020)
[source,html]
----
<div class="container">

  <nav class="navbar navbar-default" role="navigation">
    <a class="navbar-brand" href="/">Superlists</a>
    <form class="navbar-form navbar-right" method="POST" action="#">
      <span>Enter email to log in:</span>
      <input class="form-control" name="email" type="text" />
      {% csrf_token %}
    </form>
  </nav>

  <div class="row">
  [...]
----
//ch15l018


Now our FT fails because the login form doesn't actually do anything:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_login*]
[...]
AssertionError: 'Check your email' not found in 'Superlists\nEnter email to log
in:\nStart a new To-Do list'
----

NOTE: I recommend reintroducing the `LOGGING` setting from earlier at this 
point.  There's no need for an explicit test for it; our current test
suite will let us know in the unlikely event that it breaks anything. As we'll
find out in <<testfixtures-and-logging>>, it'll be useful for debugging later.


So let's start by creating an app called `accounts` to hold all the code
related to login.

[subs="specialcharacters,quotes"]
----
$ *python manage.py startapp accounts*
----

You could even do a commit just for that, to be able to distinguish the
placeholder app files from our modifications.



Testing external dependencies using mocks
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the FT, you saw that Django gives us a way of retrieving any emails it
sends by using the `mail.outbox` attribute.  But in this chapter, I want
to demonstrate a very important testing technique called 'mocking', so for
the purpose of these unit tests, we'll pretend that this nice Django shortcut
doesn't exist.


Before we start: getting the basic plumbing in
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Let's just get a basic view and url set up first.  We can do so with a simple
test that our new URL for sending the login email should eventually redirect
back to the home page:


//ch15l025
[role="sourcecode dofirst-ch15l022"]
.accounts/tests/test_views.py
[source,python]
----
from django.test import TestCase


class SendLoginEmailViewTest(TestCase):

    def test_redirects_to_home_page(self):
        response = self.client.post('/accounts/send_login_email', data={
            'email': 'edith@example.com'
        })
        self.assertRedirects(response, '/')
----

By now I'm sure you can manage to create the tests folder and its `__init__py`,
and then wire up the `include` in 'superlists/urls.py', plus the url to
'accounts/urls.py', and get the test passing with something a bit like this:


[role="sourcecode dofirst-ch15l023"]
.accounts/views.py
[source,python]
----
from django.core.mail import send_mail
from django.shortcuts import redirect

def send_login_email(request):
    return redirect('/')
----
//ch15l026

I've added the import of the `send_mail` function as a placeholder for now.

[role="dofirst-ch15l024"]
[subs="specialcharacters,quotes"]
----
$ *python manage.py test accounts*
[...]
Ran 1 test in 0.015s

OK
----



Mocking in Python
^^^^^^^^^^^^^^^^^


When we call `send_mail` in real life we expect Django to be making a
connection to our email provider, and sending an actual email across
the public Internet.  That's not something we want to happen in our tests.
It's a similar problem whenever you have code that has external side-effects
-- calling an API, sending out a tweet or an SMS or whatever it may be. In
our unit tests, we don't want to be sending out real tweets or API calls across
the internet.  But we would still like a way of testing that our code is
correct. Mocksfootnote:[I'm using the generic term "mock", but testing enthusiasts
like to distinguish other types of a general class of test tools called "Test
Doubles", including spies, fakes and stubs.  The differences don't really
matter for this book, but if you want to get into the nitty-gritty, check out
this article by Martin Fowler:
http://martinfowler.com/articles/mocksArentStubs.html#TheDifferenceBetweenMocksAndStubs["Mocks aren't stubs"]]
are the answer.



Mocking manually, aka monkey-patching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

((("monkeypatching")))
Actually one of the great things about Python is that its dynamic nature makes
it very easy to do things like mocking, or what's sometimes called
monkey-patching.  Let's suppose that, as a first step,
we want to get to some code that invokes `send_mail` with the right subject
line, from address, and to address.  That would look something like this:


[role="sourcecode skipme"]
.accounts/views.py
[source,python]
----
def send_login_email(request):
    email = request.POST['email']
    '''
    send_mail(
        'Your login link for Superlists',
        'body text tbc',
        'noreply@superlists',
        [email],
    )
    '''
    return redirect('/')
----


How can we test this, without calling the 'real' `send_mail` function?  The
answer is that we can tell Python to replace the `send_mail` function with
a fake version of it, at runtime, before we invoke the `send_login_email` view.
Check this out:


[role="sourcecode"]
.accounts/tests/test_views.py (ch15l027)
[source,python]
----
from django.test import TestCase
import accounts  #<2>

class SendLoginEmailViewTest(TestCase):
    [...]

    def test_sends_mail_to_address_from_post(self):
        self.send_mail_called = False

        def fake_send_mail(subject, body, from_email, to_list):  #<1>
            self.send_mail_called = True
            self.subject = subject
            self.body = body
            self.from_email = from_email
            self.to_list = to_list

        accounts.views.send_mail = fake_send_mail  # <2>

        self.client.post('/accounts/send_login_email', data={
            'email': 'edith@example.com'
        })


        self.assertTrue(self.send_mail_called)
        self.assertEqual(self.subject, 'Your login link for Superlists')
        self.assertEqual(self.from_email, 'noreply@superlists')
        self.assertEqual(self.to_list, ['edith@example.com'])
----

<1> We define a `fake_send_mail` function, which looks like the real
    `send_mail` function, but all it does is save some information
    about how it was called, using some variables on `self`.


<2> Then, before we execute the code under test by doing the `self.client.post`,
    we swap out the real `accounts.views.send_mail` with our fake version --
    it's as simple as just assigning it.  


It's important to realise that there isn't really anything magical going on here,
we're just taking advantage of Python's dynamic nature and scoping rules.

Up until we actually invoke a function, we can modify the variables it has
access to, as long as we get into the right namespace (that's why we import the
top-level accounts module, to be able to get down to the `acccounts.views` module,
which is the scope that the `accounts.views.send_login_email` function will run
in).

This isn't even something that only works inside unit tests.  You can do this
kind of "monkey-patching" in any kind of Python code!


That may take a little time to sink in.  See if you can convince yourself that
it's not all totally crazy, before reading a couple of bits of further detail.

* Why do we use `self` as a way of passing information around? It's just a 
    convenient variable that's available both inside the scope of the
    `fake_send_mail` function and outside of it.   We could use any mutable
    object, like a list or a dictionary, as long as we are making in-place 
    changes to an existing variable that exists outside our fake function.
    (feel free to have a play around with different ways of doing this, if
    you're curious, and see what works and doesn't work.)
    
* The "before" is critical! I can't tell you how many times I've sat
    there, wondering why a mock isn't working, only to realise that I didn't
    mock before I called the code under test.



Let's see if our hand-rolled mock object will let us test-drive some code:

[subs="specialcharacters,quotes"]
----
$ *python manage.py test accounts*
[...]
    self.assertTrue(self.send_mail_called)
AssertionError: False is not true
----

So let's call send_mail, naively:


[role="sourcecode"]
.accounts/views.py
[source,python]
----
def send_login_email(request):
    send_mail()
    return redirect('/')
----


That gives:

[subs="specialcharacters,macros"]
----
TypeError: fake_send_mail() missing 4 required positional arguments: 'subject',
'body', 'from_email', and 'to_list'
----

Looks like our mock is working!  We've called `send_mail`, and it's gone into
our `fake_send_mail` function, which wants more arguments.  Let's try this:


[role="sourcecode"]
.accounts/views.py
[source,python]
----
def send_login_email(request):
    send_mail('subject', 'body', 'from_email', ['to email'])
    return redirect('/')
----

That gives:

----
    self.assertEqual(self.subject, 'Your login link for Superlists')
AssertionError: 'subject' != 'Your login link for Superlists'
----

That's working pretty well.  And now we can work all the way through to
something like this:


[role="sourcecode"]
.accounts/views.py
[source,python]
----
def send_login_email(request):
    email = request.POST['email']
    send_mail(
        'Your login link for Superlists',
        'body text tbc',
        'noreply@superlists',
        [email]
    )
    return redirect('/')
----


and passing tests!


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test accounts*]

Ran 2 tests in 0.016s

OK
----




The Python Mock Library
^^^^^^^^^^^^^^^^^^^^^^^

The popular 'mock' package was added to the standard library as part of Python
3.3.footnote:[If you're using Python 3.2, upgrade!  Or if you're stuck with it,
`pip3 install mock`, and use `from mock` instead of `from unittest.mock`.]
It provides a magical object called a `Mock`, which is a bit like the Sinon
mock objects we saw in the last chapter, only much cooler.  Try this out
in a Python shell:


[role='skipme']
----
>>> from unittest.mock import Mock
>>> m = Mock()
>>> m.any_attribute
<Mock name='mock.any_attribute' id='140716305179152'>
>>> type(m.any_attribute)
<class 'unittest.mock.Mock'>
>>> m.any_method()
<Mock name='mock.any_method()' id='140716331211856'>
>>> m.foo()
<Mock name='mock.foo()' id='140716331251600'>
>>> m.called
False
>>> m.foo.called
True
>>> m.bar.return_value = 1
>>> m.bar(42, var='thing')
1
>>> m.bar.call_args
call(42, var='thing')
----

A magical object, that responds to any request for an attribute or method call
with other mocks, that you can configure to return specific values for its calls,
and that allows you to inspect what it was called with?  Sounds like a useful
thing to be able to use in our unit tests!

And as if that weren't enough, the `mock` module also provides a helper
function called `patch`, which we can use to do the monkeypatching we did
by hand earlier.


[role="sourcecode"]
.accounts/tests/test_views.py (ch15l029)
[source,python]
----
from django.test import TestCase
from unittest.mock import patch
[...]

    @patch('accounts.views.send_mail')
    def test_sends_mail_to_address_from_post(self, mock_send_mail):
        self.client.post('/accounts/send_login_email', data={
            'email': 'edith@example.com'
        })

        self.assertEqual(mock_send_mail.called, True)
        (subject, body, from_email, to_list), kwargs = mock_send_mail.call_args
        self.assertEqual(subject, 'Your login link for Superlists')
        self.assertEqual(from_email, 'noreply@superlists')
        self.assertEqual(to_list, ['edith@example.com'])

----

If you re-run the tests, you'll see they still pass.  And since we're always
suspicious of any test that still passes after a big change, let's deliberately
break it just to see:



[role="sourcecode"]
.accounts/tests/test_views.py (ch15l030)
[source,python]
----
        self.assertEqual(to_list, ['schmedith@example.com'])
----

And let's add a little debug print to our view

[role="sourcecode"]
.accounts/views.py (ch15l031)
[source,python]
----
def send_login_email(request):
    email = request.POST['email']
    print(type(send_mail))
    send_mail(
        [...]
----

And run the tests again:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test accounts*]
Creating test database for alias 'default'...
<class 'function'>
.<class 'unittest.mock.MagicMock'>
F
======================================================================
FAIL: test_sends_mail_to_address_from_post
(accounts.tests.test_views.SendLoginEmailViewTest)
 ---------------------------------------------------------------------
[...]
    self.assertEqual(to_list, ['schmedith@example.com'])
AssertionError: Lists differ: ['edith@example.com'] != ['schmedith@example.com']
[...]

Ran 2 tests in 0.024s

FAILED (failures=1)
----

Sure enough, the tests fail.  And we can see just before the failure 
message, that when we print the `type` of the `send_mail` function,
in the first unit test it's a normal function, but in the second unit
test we're seeing a mock object.

Let's reset our code back to where it was and do a little recap:

[role="dofirst-ch15l032"]
.accounts/tests/test_views.py (ch15l033)
[source,python]
----
@patch('accounts.views.send_mail')  #<1>
def test_sends_mail_to_address_from_post(self, mock_send_mail):  #<2>
    self.client.post('/accounts/send_login_email', data={
        'email': 'edith@example.com'  #<3>
    })

    self.assertEqual(mock_send_mail.called, True)  #<4>
    (subject, body, from_email, to_list), kwargs = mock_send_mail.call_args  #<5>
    self.assertEqual(subject, 'Your login link for Superlists')
    self.assertEqual(from_email, 'noreply@superlists')
    self.assertEqual(to_list, ['edith@example.com'])
----

<1> the `patch` decorator takes a dot-notation name of an object to monkeypatch.
    That's the equivalent of manually replacing the `send_mail` in
    `accounts.views`.  The advantage of the decorator is that, firstly, it
    automatically replaces the target with a mock.  And secondly, it
    automatically puts the original object back at the end!  (otherwise, the
    object stays monkeypatched for the rest of the test run, which might cause
    problems in other tests) 

<2> `patch` then injects the mocked object into the test as an argument to
    the test method.  We can choose whatever name we want for it, but I
    usually use a convention of `mock_` plus the original name of the 
    object.

<3> We call our function under test as usual, but everything inside this
    test method has our mock applied to it, so the view won't call the
    real `send_mail` object, it'll be seeing `mock_send_mail` instead.

<4> And we can now make assertions about what happened to that mock object
    during the test.  We can see it was called (see note).

<5> And we can also unpack its various positional and keyword call arguments,
    and examine what it was called with.






...
TODO: finish chapter



.On Spiking and Mocking with JavaScript
*******************************************************************************

Spiking::
    Exploratory coding to find out about a new API, or to explore the
    feasibility   of a new solution.  Spiking can be done without tests.  It's
    a good idea to do your spike on a new branch, and go back to master when
    de-spiking.
    ((("spiking")))

Mocking::
    We use mocking in unit tests when we have an external dependency that we
    don't want to actually use in our tests.  A mock is used to simulate the 
    third-party API.   Whilst it is possible to "roll your own" mocks in
    Python, a mocking framework like the mock module provides a lot of helpful
    shortcuts which will make it easier to write (and more importantly, read)
    your tests.
    ((("mocking")))


Monkeypatching::
    Replacing an object in a namespace at run-time.  We use it in our unit tests
    to replace a real function which has undesirable side-effects with a mock
    object, using the `patch` decorator.
    ((("monkeypatching")))

*******************************************************************************

