[[appendix2]]
[appendix]
Django Class-Based Views
------------------------

This appendix follows on from Chapter 9, in which we implemented Django forms
for validation, and refactored our views.  By the end of that chapter, our
views were still using functions.

The new shiny in the Django world, however, is class-based views. In this
chapter, we'll refactor our application to use them instead of view functions.
More specifically, we'll have a go at using class-based 'generic' views.


Class-based generic views
~~~~~~~~~~~~~~~~~~~~~~~~~

It's worth making a distinction at this point, between class-based views and
class-based 'generic' views.  Class-based views are just another way of
defining view functions.  They make few assumptions about what your views will
do, and they offer one major benefit over view functions, which is that they
can be subclassed.  This comes, arguably, at the expense of being less readable
than traditional function-based views.  The main use case for 'plain'
class-based views is when you have several views that re-use the same logic.
We want to obey the DRY principle. With function-based views, you would use
helper functions or decorators.  The theory is that using a class structure may
give you a more elegant solution.

Class-based 'generic' views are class-based views that attempt to provide
ready-made solutions to common use cases:  fetching an object from the
database and passing it to a template, fetching a list of objects, saving
user input from a POST request using a ModelForm, and so on.  These sound very
much like our use cases, but as we'll soon see, the devil is in the detail.

I should say at this point that I've not used either kind of class-based views
much. I can definitely see the sense in them, and there are potentially many
use cases in Django apps where CBGVs would fit in perfectly. However, as soon
as your use case is slightly outside the basics -- as soon as you have more
than one model you want to use, for example, I've found that using class-based
views becomes much more complicated, and you end up with code that's harder to
read than a classic view function.  

Still, because we're forced to use a lot of the customisation options for
class-based views, implementing them in this case can teach us a lot about
how they work, and how we can unit tests them.

My hope is that the same unit tests we use for function-based views should
work just as well for class-based views.  Let's see how we get on.


The home page as a FormView
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Our home page just displays a form on a template:

[source,python]
----
def home_page(request):
    return render(request, 'home.html', {'form': ItemForm()})
----

https://docs.djangoproject.com/en/1.5/ref/class-based-views/[Looking through
the options], Django has a generic view called `FormView` -- let's see how that
goes:

[role="sourcecode"]
.lists/views.py (ch21l001)
[source,python]
----
from django.views.generic import FormView
[...]

class HomePageView(FormView):
    template_name = 'home.html'
    form_class = ItemForm
----

We tell it what template we want to use, and which form. Then, we
just need to update 'urls.py', replacing the line that used to say
`lists.views.home_page`:

[role="sourcecode"]
.superlists/urls.py (ch21l002)
[source,python]
----
    url(r'^$', HomePageView.as_view(), name='home'),
----

And the tests all check out! That was easy..

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test lists*]
Creating test database for alias 'default'...
............................
 ---------------------------------------------------------------------
Ran 28 tests in 0.119s

OK
Destroying test database for alias 'default'...

$ pass:quotes[*python3 manage.py test functional_tests*]
Creating test database for alias 'default'...
....
 ---------------------------------------------------------------------
Ran 4 tests in 15.160s

OK
Destroying test database for alias 'default'...
----

So far so good. We've replaced a 1-line view function with a 2-line class,
but it's still very readable. This would be a good time for a commit...

Using form_valid to customise a CreateView
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next we have a crack at the view we use to create a brand new list, currently
the `new_list` function.  Looking through the possible CBGVs, we
probably want a `CreateView`, and we know we're using the `ItemForm` class,
so let's see how we get on with them, and whether the tests will help us:


[role="sourcecode"]
.lists/views.py
[source,python]
----
class NewListView(CreateView):
    form_class = ItemForm

def new_list(request):
    form = ItemForm(data=request.POST)
    if form.is_valid():
        list = List.objects.create()
        Item.objects.create(text=request.POST['text'], list=list)
        return redirect(list)
    else:
        return render(request, 'home.html', {"form": form})
----

I'm going to leave the old view function in 'views.py', so that we can copy
code across from it.  We can delete it once everything is working.  It's
harmless as soon as we switch over the URL mappings, this time in:

[role="sourcecode"]
.lists/urls.py
[source,python]
----
    url(r'^new$', NewListView.as_view(), name='new_list'),
----

Now running the tests gives 3 errors:

----
$ python3 manage.py test lists
Creating test database for alias 'default'...
...................EEE
======================================================================
ERROR: test_redirects_after_POST (lists.tests.test_views.NewListTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/harry/Dropbox/book/source/appendix_II/superlists/lists/tests/test_views.py", line 33, in test_redirects_after_POST
    data={'text': 'A new list item'}
    [...]
  File "/usr/local/lib/python3.3/dist-packages/django/views/generic/edit.py", line 165, in post
    return self.form_valid(form)
  File "/usr/local/lib/python3.3/dist-packages/django/views/generic/edit.py", line 127, in form_valid
    self.object = form.save()
TypeError: save() missing 1 required positional argument: 'for_list'

======================================================================
ERROR: test_saving_a_POST_request (lists.tests.test_views.NewListTest)
 ---------------------------------------------------------------------
[...]
TypeError: save() missing 1 required positional argument: 'for_list'

======================================================================
ERROR: test_validation_errors_sent_back_to_home_page_template (lists.tests.test_views.NewListTest)
 ---------------------------------------------------------------------
[...]
django.template.base.TemplateDoesNotExist: No template names provided

 ---------------------------------------------------------------------
Ran 22 tests in 0.114s

FAILED (errors=3)
Destroying test database for alias 'default'...
----

TODO: talk through decoding traceback.

Let's start with the third -- maybe we can just add the template?

[role="sourcecode"]
.lists/views.py
[source,python]
----
class NewListView(CreateView):
    form_class = ItemForm
    template_name = 'home.html'
----

That gets us down to just two failures.  We can see they're both happening
in the generiv view's `form_valid` function, and that's one of the ones that
you can override to provide custom behaviour in a CBGV.  As its name implies,
it's run when the view has detected a valid form.  We can just copy some of
the code from our old view function, that used to live after 
`if form.is_valid():`:


[role="sourcecode"]
.lists/views.py
[source,python]
----
class NewListView(CreateView):
    template_name = 'home.html'
    form_class = ItemForm

    def form_valid(self, form):
        list_ = List.objects.create()
        form.save(for_list=list_)
        return redirect(list_)
----

That gets us a full pass!

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python3 manage.py test lists*]
Ran 28 tests in 0.119s
OK
$ pass:quotes[*python3 manage.py test functional_tests*]
Ran 4 tests in 15.157s
OK
----


And we 'could' even save two more lines, trying to obey "DRY", by using one of
the main advantages of CBVs: inheritance!

[role="sourcecode"]
.lists/views.py
[source,python]
----
class NewListView(CreateView, HomePageView):

    def form_valid(self, form):
        list = List.objects.create()
        Item.objects.create(text=form.cleaned_data['text'], list=list)
        return redirect('/lists/%d/' % (list.id,))
----

And all the tests would still pass.

WARNING: This is not good object-oriented practice.  Inheritance implies an "is-a"
relationship, and I don't think it's appropriate to say that our view for 
creating new lists "is-a" home page view.  Don't do this.


With or without that last step, how does it compare to the old version? I'd say
that's not bad.   We save some boilerplate code, and the view is still fairly
legible.  So far, I'd say we've got one point for CBGVs, and one draw.


A more complex view to handle both viewing and adding to a list
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This took me 'several' attempts.  And I have to say that, although the tests
told me when I got it right, they didn't really help me to figure out the
steps to get there...  Mostly it was just trial and error, hacking about
in functions like `get_context_data`, `get_form_kwargs` and so on.

One thing it did made me realise was the value of having lots of individual
tests, each testing one thing.  I went back and re-wrote some of chapters 9-11
as a result.

Anyway, after much hacking and swearing, this is the solution I eventually got
to work. First I had to add a `get_absolute_url` on the `Item` class:

[role="sourcecode"]
.lists/models.py
[source,python]
----
class Item(models.Model):
    [...]

    def get_absolute_url(self):
        return self.list.get_absolute_url()
----

Then I was able to get the view working using an override of the `get_form`
method:

[role="sourcecode"]
.lists/views.py
[source,python]
----
class ViewAndAddToList(CreateView, SingleObjectMixin):
    template_name = 'list.html'
    model = List
    form_class = ExistingListItemForm

    def get_form(self, form_class):
        self.object = self.get_object()
        return form_class(for_list=self.object, data=self.request.POST)
----


NOTE: I did also manage to get it working using `get_form_kwargs`, but I
decided it was uglier.  Any other suggestions are very much welcomed!


Compare old and new
^^^^^^^^^^^^^^^^^^^

Let's see the old version for comparison?

[source,python]
----
def view_list(request, list_id):
    list_ = List.objects.get(id=list_id)
    form = ExistingListItemForm(for_list=list_, data=request.POST or None)
    if form.is_valid():
        form.save()
        return redirect(list_)
    return render(request, 'list.html', {'list': list_, "form": form})
----

Well, it's the same number of lines of code, 7.   I find the function-based
version a little easier to understand, in that it has a little bit less
magic -- "explicit is better than implicit", as the Zen of Python would have it.
But I guess some of it is in the eye of the beholder.


Best practices for unit testing CBGVs?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As I was working through this, I felt like my "unit" tests were sometimes a 
little too high-level.  This is no surprise, since tests for views that involve
the Django Test Client are probably more properly called Integration tests.

They told me whether I was getting things right or wrong, but they didn't offer
many clues on exactly how to fix things.

I occasionally wondered whether there might be some mileage in a test that
was closer to the implementation -- something like this:

[source,python]
----
def test_as_cbv(self):
    our_list = List.objects.create()
    view = ViewAndAddToList()
    view.kwargs = dict(pk=our_list.id)
    self.assertEqual(view.get_object(), our_list)
----

But the problem is that it requires a lot of knowledge of the internals of
Django CBVs to be able to do the right test setup for these kinds of tests.
And you still end up getting very confused by the complex inheritance 
hierarchy.

Take-home: having multiple, isolated view test with single assertions helps
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

One thing I definitely did conclude from this chapter was that having many
short unit tests for views was much more helpful than having few tests with
a narrative series of assertions.

One monolithic test like this:

----
def test_validation_errors_sent_back_to_home_page_template(self):
    response = self.client.post('/lists/new', data={'text': ''})
    self.assertEqual(List.objects.all().count(), 0)
    self.assertEqual(Item.objects.all().count(), 0)
    self.assertTemplateUsed(response, 'home.html')
    expected_error = escape("You can't have an empty list item")
    self.assertContains(response, expected_error)
----

Was definitely less useful than having three individual tests, like this:

    def test_invalid_input_means_nothing_saved_to_db(self):
        self.post_invalid_input()
        self.assertequal(item.objects.all().count(), 0)

    def test_invalid_input_renders_list_template(self):
        response = self.post_invalid_input()
        self.asserttemplateused(response, 'list.html')

    def test_invalid_input_renders_form_with_errors(self):
        response = self.post_invalid_input()
        self.assertisinstance(response.context['form'], existinglistitemform)
        self.assertcontains(response, escape(empty_list_error))

The reason is that, in the first case, an early failure means not all the
assertions are checked.  So, if the view was accidentally saving to the
database on invalid POST, you would get an early fail, and so you wouldn't
find out whether it was using the right template or rendering the form.  The
second formulation makes it much easier to pick out exactly what was or wasn't
working.

