Prettification: layout and styling, and what to test about it
-------------------------------------------------------------

We're starting to think about releasing the first version of our site, but
we're a bit embarrassed by how ugly it looks at the moment.  In this 
chapter, we'll cover some of the basics of CSS, including integrating an
HTML/CSS framework called Bootstrap.  We'll learn how static files work
in Django, and what we need to do about testing them.


What to functionally test about layout and style
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Our site is undeniably a bit ugly at the moment.  

.Our homepage, looking a little ugly..
image::images/ugly_homepage_screenshot.png[Our homepage, looking a little ugly]

We can't be adding to Python's reputation for being
http://grokcode.com/746/dear-python-why-are-you-so-ugly/[ugly],
so let's do a tiny bit of polishing.  Here's a few things we might want:

* A large, centered block for our new item box, both for new and existing lists
* A terms & conditions footer that "sticks" to the bottom of the page

How do we apply TDD to these things?  In general, you shouldn't test
aesthetics, but you can test some aspects.  We're going to use Cascading Style
Sheets (CSS) for our styling, and they will be loaded as static files.  Static
files can be a bit tricky to configure (especially, as we'll see later, when
you move off your own PC and onto a hosting site), so we'll want some kind of
quick test that the CSS has loaded.  And, while we might not want to test
things like fonts and shading, we can test, for example, that the footer is
reasonably close to the bottom of the page.

Let's start a new test method inside our functional test:

[role="sourcecode"]
.functional_tests/tests.py
[source,python]
----
    def test_can_start_a_list_and_retrieve_it_later(self):
        # Edith has heard about a cool new online to-do app. She goes
        [...]


    def test_layout_and_styling(self):
        # Edith goes to the home page
        self.browser.get(self.live_server_url)

        # She notices the input box is nicely centered
        inputbox = self.browser.find_element_by_tag_name('input')
        window_width = self.browser.get_window_size()['width']
        self.assertAlmostEqual(
            inputbox.location['x'] + inputbox.size['width'] / 2,
            window_width / 2,
            delta=3
        )
----

A few new things here.  We retrieve some information about the size of the
browser window, and the size and position of the input element.  We then
do a little maths, to check whether it seems to be positioned in the middle
of the page.  `assertAlmostEqual` helps us to deal with rounding errors by
letting us specify that we want our arithmetic to work to within 3 pixels.

Now, if we run the functional tests, we get:


[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests*]
Creating test database for alias 'default'...
.F
======================================================================
FAIL: test_layout_and_styling (functional_tests.tests.NewVisitorTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/harry/Dropbox/book/source/chapter_7/superlists/functional_tests/tests.py", line 101, in test_layout_and_styling
    delta=3
AssertionError: 125 != 470 within 3 delta

 ---------------------------------------------------------------------
Ran 2 tests in 9.188s

FAILED (failures=1)
----

That's the expected failure.  Still, this kind of FT is easy to get wrong, so
let's use a quick-and-dirty "cheat" solution, to check that the FT also passes
when the input box is centered.  We'll delete this code again almost as soon
as we've used it to check the FT:

[role="sourcecode"]
.lists/templates/home.html
[source,html]
----
<form method="POST" action="/lists/new" >
    <p style="text-align: center;">
        <input id="id_new_item" name="item_text" placeholder="Enter a to-do item" />
    </p>
----

That passes, which means the FT works.  Let's commit just the FT:

[subs="specialcharacters,quotes"]
----
$ git add functional_tests/tests.py
$ git commit -m "fist steps of FT for layout + styling"
----

Now let's extend it to make sure that the input box is still aligned-center on
the page for a new list:

[role="sourcecode"]
.functional_tests/tests.py
[source,python]
----
    [...]
    # She starts a new list and sees the input is nicely
    # centered there too
    inputbox.send_keys('testing\n')
    inputbox = self.browser.find_element_by_tag_name('input')
    window_width = self.browser.get_window_size()['width']
    self.assertAlmostEqual(
        inputbox.location['x'] + inputbox.size['width'] / 2,
        window_width / 2,
        delta=3
    )
----

That gives us another test failure:

----
  File "/workspace/superlists/functional_tests/tests.py", line 101, in test_layout_and_styling
    delta=3
AssertionError: 125 != 470 within 3 delta
----

Now it feels like we're justified in finding a "proper" solution to our need
for some better styling for our site.  We can back out our hacky 
`<p style="text-align: center">`.

Prettification: Using a CSS framework
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Design is hard (¬let's go shopping¬), and doubly so now that we have to deal
with mobile, tablets and so forth.  That's why many programmers, particularly 
lazy ones like me, are turning to CSS frameworks to solve some of those
problems for them.  There are lots of frameworks out there, but one of the 
earliest and most popular is Twitter's Bootstrap.  Let's use that.

You can find bootstrap at http://twitter.github.io/bootstrap/ 

We'll download it and put it in a new folder called *static* inside the `lists`
app:

[subs="specialcharacters,quotes"]
----
$ *mkdir lists/static*
$ *wget http://twitter.github.io/bootstrap/assets/bootstrap.zip*
$ *mv bootstrap.zip lists/static/*
$ *cd lists/static/*
$ *unzip bootstrap.zip *
$ *rm bootstrap.zip *
----

NOTE: on Windows, you may not have `wget` and `unzip`, but I'm sure you can figure
out how to download bootstrap and unzip it into the 'lists/static' folder.

Our directory tree will end up looking like this:

----
.
├── database.sqlite
├── functional_tests
│   ├── __init__.py
│   ├── models.py
│   └── tests.py
├── lists
│   ├── __init__.py
│   ├── models.py
│   ├── static
│   │   └── bootstrap
│   │       ├── css
│   │       │   ├── bootstrap.css
│   │       │   ├── bootstrap.min.css
│   │       │   ├── bootstrap-responsive.css
│   │       │   └── bootstrap-responsive.min.css
│   │       ├── img
│   │       │   ├── glyphicons-halflings.png
│   │       │   └── glyphicons-halflings-white.png
│   │       └── js
│   │           ├── bootstrap.js
│   │           └── bootstrap.min.js
│   ├── templates
│   │   ├── home.html
│   │   └── list.html
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── manage.py
└── superlists
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
----

Now, if we have a look at the "Getting Started" section of the 
http://twitter.github.io/bootstrap/getting-started.html#html-template[Bootsrap 
Documentation], you'll see it wants our HTML template to include something
like this:


[source,html]
----
    <!DOCTYPE html>
    <html>
      <head>
        <title>Bootstrap 101 Template</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <!-- Bootstrap -->
        <link href="css/bootstrap.min.css" rel="stylesheet" media="screen">
      </head>
      <body>
        <h1>Hello, world!</h1>
        <script src="http://code.jquery.com/jquery.js"></script>
        <script src="js/bootstrap.min.js"></script>
      </body>
    </html>
----

We already have two HTML templates.  Now feels like the right time to apply
the "Don't repeat yourself" rule, and bring all the common parts together.
Thankfully, the Django template language makes that easy using something
called template inheritance.

Django template inheritance
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's have a little review of what the differences are between 'home.html' and
'list.html':

----
$ diff lists/templates/home.html lists/templates/list.html 
6,7c6,7
<         <h1>Start a To-Do list</h1>
<         <form method="POST" action="/lists/new" >
---
>         <h1>Your To-Do list</h1>
>         <form method="POST" action="/lists/{{ list.id }}/new_item" >
10a11,17
> 
>         <table id="id_list_table">
>             {% for item in list.item_set.all %}
>                 <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>
>             {% endfor %}
>         </table>
> 
----

They have different header texts, and their forms use different URLs. On top
of that, 'list.html' has the additional `<table>` element.

Now that we're clear on what's in common and what's not, we can make the two 
templates inherit from a common "superclass" template.  We'll start by 
making a copy of 'home.html':

----
$ cp lists/templates/home.html lists/templates/base.html
----

Now let's edit our base template to pick out the parts where we expect
our templates to customise it:

[role="sourcecode"]
.lists/templates/base.html
[source,html]
----
<html>
    <head>
        <title>To-Do lists</title>
    </head>
    <body>
        <h1>{% block header_text %}{% endblock %}</h1>
        {% block form %}
        {% endblock %}
        {% block table %}
        {% endblock %}
    </body>
</html>
----

The base template defines a series of areas called "blocks", which will be 
places that other templates can hook in and add their own content.  Let's
see how that works in practice, but changing 'home.html' so that it "inherits
from" 'base.html':

[role="sourcecode"]
.lists/templates/home.html
[source,html]
----
{% extends 'base.html' %}

{% block header_text %}Start a To-Do list{% endblock %}

{% block form %}
    <form method="POST" action="/lists/new" >
        <input id="id_new_item" name="item_text" placeholder="Enter a to-do item" />
        {% csrf_token %}
    </form>
{% endblock %}
----

You can see that lots of the boilerplate html disappears, and we just
concentrate on the bits we want to customise. We do the same for 'list.html':

[role="sourcecode"]
.lists/templates/list.html
[source,html]
----
{% extends 'base.html' %}

{% block header_text %}Your To-Do list{% endblock %}

{% block form %}
    <form method="POST" action="/lists/{{ list.id }}/new_item" >
        <input id="id_new_item" name="item_text" placeholder="Enter a to-do item" />
        {% csrf_token %}
    </form>
{% endblock %}

{% block table %}
    <table id="id_list_table">
        {% for item in list.item_set.all %}
            <tr><td>{{ forloop.counter }}: {{ item.text }}</td></tr>
        {% endfor %}
    </table>
{% endblock %}
----


That's a refactor of the way our templates work.  We re-run the FTs to make sure
we haven't broken anything...

----
AssertionError: 125 != 470 within 3 delta
----

Sure enough, they're still getting to exactly where they were before.  That's 
worthy of a commmit;

----
$ git diff -b  
# the -b means ignore whitespace, useful since we've changed some html indenting
$ git status
$ git add lists/templates  # leave static, for now
$ git add functional_tests/tests.py
$ git commit -m"refactor templates to use a base template and extend ft"
----

Integrating Bootstrap
~~~~~~~~~~~~~~~~~~~~~

Now it's much easier to integrate the boilerplate code that bootstrap wants:

[role="sourcecode"]
.lists/templates/base.html
[source,diff]
----
$ git diff
diff --git a/lists/templates/base.html b/lists/templates/base.html
index 144a9e4..1dbbc32 100644
--- a/lists/templates/base.html
+++ b/lists/templates/base.html
@@ -1,5 +1,8 @@
+<!DOCTYPE html>
 <html>
     <head>
+        <meta name="viewport" content="width=device-width, initial-scale=1.0">
+        <link href="css/bootstrap.min.css" rel="stylesheet" media="screen">
         <title>To-Do lists</title>
     </head>
     <body>
@@ -8,5 +11,7 @@
         {% endblock %}
         {% block table %}
         {% endblock %}
+        <script src="http://code.jquery.com/jquery.js"></script>
+        <script src="js/bootstrap.min.js"></script>
     </body>
 </html>
----

Finally, let's actually use some of the bootstrap magic! You'll have to read
the bootstrap documentation yourself, but we can use a combination of the
grid system and the `text-center` class to get what we want:

[role="sourcecode"]
.lists/templates/base.html
[source,diff]
----
 <body>
+    <div class="container">
+        <div class="row">
+            <div class="span6 offset3">
+                <div class="text-center">
                     <h1>{% block header_text %}{% endblock %}</h1>
                     {% block form %}
                     {% endblock %}
+                </div>
                 {% block table %}
                 {% endblock %}
+            </div>
+        </div>
+    </div>
     <script src="http://code.jquery.com/jquery.js"></script>
     <script src="js/bootstrap.min.js"></script>
 </body>
----


Does that work?

----
AssertionError: 125 != 470 within 3 delta
----

Hm. no.

Static files in Django
~~~~~~~~~~~~~~~~~~~~~~

Django, and indeed any web server, needs to know two things to deal with static
files:

1. How to tell when a URL request is for a static file, as opposed to for some HTML
that's going to be served via a view function
2. Where to find the static file the user wants.

In other words, static files are a mapping from URLs to files on disk. 

For item 1, Django lets us define a URL "prefix" to say that any URLs which
start with that prefix should be treated as requests for static files.  By
default, the prefix is `/static/`. It's defined in 'settings.py':


[role="sourcecode"]
.superlists/settings.py
[source,python]
----
# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)
----

The rest of the settings in this section are all to do with item 2: finding the
actual static files on disk.

`django.contrib.staticfiles.finders.AppDirectoriesFinder` is a module whose job
it is to look for static files in any of your `INSTALLED_APPS`. It looks through
each of them for a sub-folder called `static`, and finds static files in there

While we're using the Django development server (`manage.py runserver`), we can
rely on the `AppDirectoriesFinder` to find our static files for us.  

Later, when we switch to running on a "proper" web server, we'll use a command
called `collectstatic` to copy all our static files to a single location, where
the web server will server files from.

Anyway, you now see why we put all the bootstrap static files into 'lists/static'.  So
why are they not working at the moment?  It's because we're not using the `/static/`
URL prefix.  Have another look at the link to the CSS in 'base.html':

[role="sourcecode"]
.lists/templates/base.html
[source,html]
----
<link href="css/bootstrap.min.css" rel="stylesheet" media="screen">
----

To get this to work, we need to change it to

[role="sourcecode"]
.lists/templates/base.html
[source,html]
----
<link href="/static/bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">
----

Now, when Django sees the request, it knows that it's for a static file because
it begins with `/static/`.  It then tries to find a file called
`bootstrap/css/bootstrap.min.css`, looking in each of our app folders for
subfolders called static, and then it should find it at
'lists/static/bootstrap/css/bootstrap.min.css'

Let's fix the URL for the bootstrap javascript as well:

[role="sourcecode"]
.lists/templates/base.html
[source,html]
----
<script src="/static/bootstrap/js/bootstrap.min.js"></script>
----

And then try running our functional test again:

[subs="specialcharacters,quotes"]
----
$ *python manage.py test functional_tests*
Creating test database for alias 'default'...
..
 ---------------------------------------------------------------------
Ran 2 tests in 9.764s
----

Hooray! And, as the tests zipped past, you may have noticed our site was
starting to look a little better laid-out:

.Our homepage, looking a little better...
image::images/slightly_better_screenshot.png[The list page with centered header]

Let's see if we can do even better.  Bootstrap has a class called 'hero-unit'
for things that are meant to be particularly prominent on the page.  Let's use
that:

[role="sourcecode"]
.lists/templates/base.html
----
<div class="span6 offset3 hero-unit">
----

When hacking about with design and layout, it's best to have a window open that
we can hit refresh on, frequently.  Use `python manage.py runserver` to spin up
the dev server, and then browse to 'http://localhost:8000' to see your work as
we go.

The hero unit is a good start, but now the input box has tiny text compared to
everything else.  There's no ready-made fix for that in bootstrap, so we'll make
one ourselves.  That will require specifying our own CSS file:


[role="sourcecode"]
.lists/templates/home.html
[source,html]
----
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link href="/static/bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen">
        <link href="/static/base.css" rel="stylesheet" media="screen">
        <title>To-Do lists</title>
    </head>
----

And now we create a new file at 'lists/static/base.css', with our new CSS rule.
We'll use the `id` of the input element, `id_new_item` to find it and give it
some styling:


[role="sourcecode"]
.lists/static/base.css
[source,html]
----
#id_new_item {
    font-size: larger;
    padding: 10px;
    margin-top: 2ex;
    width: 100%;
}
----

It took me a few gos, but I'm reasonably happy with this:

image::images/screenshot_good_enough.png[Our list page with all big chunks]

If you want to go further with customising Bootstrap, you need to get into
compiling SCSS. I 'definitely' recommend taking the time to do that some day
SCSS is a great improvement on plain old CSS, and a useful tool even if you
don't use Bootstrap. I won't cover it in this book though.


Final bits of fiddling
~~~~~~~~~~~~~~~~~~~~~~


A last run of the functional tests, to see if everything still works OK?

----
AssertionError: 661 != 497 within 3 delta
----

This one caught me by surprise (honestly, CSS, even the simplest things...). A
bit of debugging using the Firefox inspector, where I tried adding and removing
a few CSS classes, eventually led me to the reason. It turns out it was a
combination of two things:

* `hero-unit` doesn't play well when it's applied to the same element as a `span6`, because
its padding sets things off.  If we nest it instead, things are back to being centered
* the padding on the `id_new_item` input was also throwing off the `width=100%` calculation.
I was able to offset this with a negative `margin-left`:


[role="sourcecode"]
.lists/templates/home.html
[source,html]
----
#id_new_item {
    font-size: larger;
    padding: 10px;
    margin-top: 2ex;
    margin-left: -10px;
    width: 100%;
}
----
[role="sourcecode"]
.lists/templates/home.html
[source,html]
---- <div class="row">
        <div class="span8 offset2">
            <div class="hero-unit">
                <div class="text-center">
                [...]
                </div>
            </div>
        </div>
    </div>
----


And now the tests pass:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests*]
Creating test database for alias 'default'...
..
 ---------------------------------------------------------------------
Ran 2 tests in 10.084s

OK
----


Hooray! Definitely time for a commit:


[subs="specialcharacters,quotes"]
----
$ *git status* # shows changes to base.html, and new folder at lists/static
$ *git add lists*
$ *git status* # will now show all the bootstrap additions
$ *git commit -m"Use Bootstrap to improve layout"*
----


What we skipped over: collectstatic and other static directories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If we have another look at 'settings.py', we can talk about some of the entries
we didn't mention earlier:

[role="sourcecode"]
.superlists/settings.py
[source,python]
----
# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = ''

# URL prefix for static files.
# Example: "http://media.lawrence.com/static/"
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)
----

`STATICFILES_DIRS` lets you specify directories other than 'static' folders
inside your apps. In our case for example, if we add another app to our site
later, we might decide that 'base.css' should be shared amongst all apps, so
we could take it out of 'lists/static' and put it somewhere else.  We'd have
to add that somewhere to `STATICFILES_DIRS`.

We'll need `STATIC_ROOT` in the next chapter, so let's actually experiment
with that now.  Let's change its value to a folder just outside our repo --
I'm going to make it a folder just next to the main source folder:

----
projects
│    ├── superlists
│    │    ├── lists
│    │    │     ├── models.py
│    │    │
│    │    ├── manage.py
│    │    ├── superlists
│    │    
│    ├── static
│    │    ├── base.css 
│    │    ├── etc...
----

The logic is the static files folder shouldn't be a part of your repository -
we don't want to put it under source control, because it's a duplicate of all
the files that are inside 'lists/static'.

Here's a neat way of specifying that folder, making it relative to the location
of the 'settings.py' file

[role="sourcecode"]
.superlists/settings.py
[source,python]
----
from os import path
STATIC_ROOT = path.abspath(path.join(path.dirname(__file__), '../../static'))
----

How do we test this?  In 'settings.py', there's a setting called `DEBUG` which
is currently set to `True`, and having that switched on means the dev server 
will magically serve static files from inside 'lists/static'.  If we switch
DEBUG to False -- as we should when we move the site to production -- it
will stop using the magic, and instead look for files inside '../static'.

When we switch `DEBUG` to `False` we also need to make one other change in
'settings.py', which is to set the `ALLOWED_HOSTS`. This was
https://docs.djangoproject.com/en/1.5/ref/settings/#std:setting-ALLOWED_HOSTS[added
as a security feature] in Django 1.5.  Unfortunately it doesn't have an entry
with a helpful comment in the default 'settings.py', but we can add one
ourselves:

[role="sourcecode"]
.lists/tests.py
[source,python]
----
from os import path
[...]
STATIC_ROOT = path.abspath(path.join(path.dirname(__file__), '../../static'))

# This next setting is needed when DEBUG=False
ALLOWED_HOSTS = ['localhost']
----

Now let's see what happens when we manually start the dev server with 
`runserver`:

.Back to the ugly homepage.
image::images/ugly_homepage_screenshot.png[Our homepage, looking ugly again]


Now let's try running `collectstatic` and see what happens:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py collectstatic*]

You have requested to collect static files at the destination
location as specified in your settings.

This will overwrite existing files!
Are you sure you want to do this?

Type 'yes' to continue, or 'no' to cancel: yes
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/base.css'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/js/bootstrap.min.js'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/js/bootstrap.js'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/css/bootstrap.min.css'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/css/bootstrap.css'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/css/bootstrap-responsive.css'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/css/bootstrap-responsive.min.css'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/img/glyphicons-halflings-white.png'
Copying '/home/harry/Dropbox/book/source/chapter_7/superlists/lists/static/bootstrap/img/glyphicons-halflings.png'

9 static files copied.
----

And if we look in '../static', we'll find all our CSS files:

[subs="specialcharacters,quotes"]
----
$ tree ../static/
../static/
├── base.css
└── bootstrap
    ├── css
    │   ├── bootstrap.css
    │   ├── bootstrap.min.css
    │   ├── bootstrap-responsive.css
    │   └── bootstrap-responsive.min.css
    ├── img
    │   ├── glyphicons-halflings.png
    │   └── glyphicons-halflings-white.png
    └── js
        ├── bootstrap.js
        └── bootstrap.min.js

4 directories, 9 files
----

And then we can hit 'refresh' in our web server, and see the page looking 
stylish again.

NOTE: are you wondering why we didn't use the functional test to test this?
Unfortunately, one of the limitations of `LiveServerTestCase` is that it 
ignores the `DEBUG = False` setting, and serves static files from their app
folder locations anyway.


Anyway, now we know how to collect all the static files into a single folder,
where it's easy for a web server to find them. We'll find out all about that in
the next chapter!

For now let's save our changes to 'settings.py':

[subs="specialcharacters,quotes"]
----
$ *git diff* # should show 3 changes in settings.py
$ *git commit -am"set STATIC_ROOT and ALLOWED_HOSTS in settings, switch DEBUG to False"
----

