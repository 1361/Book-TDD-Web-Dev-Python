Chapter 2 - A basic front page for our site
-------------------------------------------

Let's adapt our test, which currently checks for the default Django "it worked"
page, and check instead for some of the things we want to see on the front
page.

Oh, it's probably time to reveal what kind of web app we're building. Well, I
thought we'd go for... a "to-do" list site!  In doing so I'm very much
following fashion - a few years ago all web tutorials were about building a
blog.  Then it was forums and polls, nowadays it's to-do lists.

The reason is that a to-do list is a really nice example. At its most basic
it is very simple indeed -- just a list of text strings -- so it's easy to
get a "minimum viable" todo app up and running.  But it can be extended in all
sorts of ways -- different persistence models, adding deadlines, reminders,
sharing with other users, and improving the client-side UI. It should allow
me to demonstrate all of the main aspects of web programming^*^, and how you apply
TDD to them.

`*` 'With the possible exception of payments integration.  But that's a world
of pain whose discovery I prefer to leave you, dear readers, to enjoy on your
own.  Let's concentrate on phase 1, "collect underpants", first.'


Using the Django test runner
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's take a very small step, and say the first thing we want is that the page
should have a new title + heading, saying ``My Stuff to get done''.  We'll
adapt our current `tests.py`.

First off, though, it would be nice to move our tests file into the same folder
structure as our Django code.  It's also a bit tedious to have to remember to
spin up the development server (using `manage.py runserver`) each time.
Thankfully, Django has some tools to help.

Django likes to strucure websites (or "projects") into components called
"apps". The idea is that you break your site's functionality down into
coherent parts or apps. Some of these apps might have been developed by 3rd
parties, and some of them you might re-use between different projects.

To start an app, we use another management called `startapp`:

....
$ python manage.py startapp fts
$ tree -I *.pyc
.
├── fts
│   ├── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── manage.py
└── mysite
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
....

You'll see it creates a new folder called "fts" inside your project.

