Chapter 1 - Getting Django set up using a Functional Test
---------------------------------------------------------

In my first draft of this book, I started off with a "toy" example, designed to
introduce the concepts of TDD before we dive into the complexities of web 
development (you can still look it up if you like, it's on my github page).

In the end though, I decided that you guys would prefer to dive right in.
You're here to learn about web programming, not Roman Numeral calculators
(even if the latter can be surprisingly interesting).

So without further ado, let's get started.

Obey the testing goat: Do nothing until you have a test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

''Obey the testing goat'' was a short-lived meme from PyCon 2010, which I
intend to single-handedly resuscitate. Now, normally first step in web
development is getting your web framework installed and configured. Download
this, install that, configure the other, run the widget...  But TDD
requires a different mindset.  When you're doing TDD, you always have the
Testing Goat inside you -- single-minded as goats are -- bleating ''Test-first,
Test-first!''

In TDD the first step is always the same: *write a test*.  

'First' we write the test, 'then' we run it and check that it fails as
expected.  'Only then' do we go ahead and build some of our app.  Repeat that 
to yourself in a goat-like voice.

Another thing about goats is that they take one step at a time.  That's why
they seldom fall off mountains see, no matter how steep they are. So, we'll
proceed with nice small steps; the first thing we want to do is check that
we've installed Django successfully, and that it works -- the absolute minimum,
and the way we'll check is by confirming that we can spin up Django's
development server and actually see it running, in a normal web browser, on our
local PC.

We'll use the Selenium browser automation tool for this. Create a new Python
file called `tests.py`, and enter the following code.  If you feel like making
a few little goat noises as you do it, it may help.

[source,python]
----
from selenium import webdriver

browser = webdriver.Firefox()
browser.get('http://localhost:8000')
assert 'Django' in browser.title
----

That's our first functional test; I'll talk more about what I mean by
functional test, and how it contrasts to unit tests.  For now, it's enough to
assure ourselves that we understand what it's doing: 
- opening up a Selenium "webdriver" for the Firefox browser
- using it to open up a web page which we're expecting the local PC to be
  hosting
- checking (making a test assertion) that that page has the word "Django" in
  its title

That's pretty much as simple as it could get. Let's try running it:

If you haven't already, you'll need to install Selenium. `pip install selenium`
is probably the command you need to run. 

NOTE: If you don't know what `pip` is, 
http://www.pip-installer.org/en/latest/[you should find out!]


....
$ python tests.py 
Traceback (most recent call last):
  File "tests.py", line 4, in <module>
    assert 'Django' in browser.title
AssertionError
....

You should see a browser window pop up, try and open up `localhost:80001`, and
then the Python error.  Actually, it's a little untidy because it leaves that
window lying around on your desktop.  We'll fix that later.

For now though, we have a failing test, so that means we're allowed to start 
building our app.


Getting Django up and running
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First step is getting Django installed -- do a `pip install django`, and if you
run into any problems, refer to the Django documentation.

NOTE: This book was written using Django 1.4. From what I could tell,
everything should still work in Django 1.5. Back in Django 1.3, however,
things like the default folder structure are quite different, so you'll
probably find it quite confusing to try and follow along with 1.3. Upgrade!

Once Django is installed, we can create a *project* to be the main container
for our site.  Django provides a little command-line tool for this:

....
django-admin.py startproject mysite
....

That will create a folder called `mysite`, and a set of files and subfolders
inside it:

....
$ tree mysite/
mysite/
├── manage.py
└── mysite
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
....

Yes, there's a folder called `mysite` inside a folder called `mysite`.  It's a
bit confusing, but it's just one of those slightly strange things -- there are
good reasons when you look back at the history of Django.  For now, you can 
just take it as read that the `mysite/mysite` folder is for stuff that applies
to the whole project -- including `settings.py`, which is used for the global
configuration of the site.

You'll also have noticed `manage.py`.  That's Django's Swiss army knife, and
one of the things it can do is run a development server.  Let's try that now:

....
$ python manage.py runserver
Validating models...

0 errors found
Django version 1.4.2, using settings 'mysite.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

....

Leave that running, and open another command shell.  In that, we can try
running our tests again:

....
$ python tests.py 
$
....

Not much action on the command-line, but you should notice two things: Firstly,
there was no ugly "AssertionError", and secondly, the Firefox window that
Selenium popped up (briefly) had a different-looking page on it.


Well, it may not look like much, but that was our first ever passing test!
Hooray!

If it all feels a bit too much like magic, like it wasn't quite real, why not
go and take a look at what the dev server is showing manually, by opening a
web browser yourself and visiting `http://localhost:8000'.  You should see
something like this:

image:it_worked.png[Screenshot of Django "It Worked" screen]

So, congratulations!  You've written a functional test using Selenium, and
you've got Django installed and running, in a certifiable, test-first,
goat-approved TDD way.  Give yourself a well-deserved pat on the back
before moving onto Chapter 2.


