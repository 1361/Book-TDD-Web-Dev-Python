Chapter 1 - Getting Django set up using a Functional Test
---------------------------------------------------------


Obey the testing goat: Do nothing until you have a test
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

''Obey the testing goat'' was a short-lived meme from PyCon 2010, which I
intend to single-handedly resuscitate. Now, normally first step in web
development is getting your web framework installed and configured. 
'Download this, install that, configure the other, run the script...'
But TDD requires a different mindset.  When you're doing TDD, you always have
the Testing Goat inside you -- single-minded as goats are -- bleating
''Test-first, Test-first!''

In TDD the first step is always the same: *Write a test*.  

'First' we write the test, 'then' we run it and check that it fails as
expected.  'Only then' do we go ahead and build some of our app.  Repeat that 
to yourself in a goat-like voice.  I know I do.

Another thing about goats is that they take one step at a time.  That's why
they seldom fall off mountains see, no matter how steep they are. 

[[tree_goat]]
.Goats are more agile than you think
image:goat_up_a_tree_flickr_caitlinstewart_2846642630_cropped.png[A picture of
a goat up a tree]
'Image credit: http://www.flickr.com/photos/caitlinstewart/2846642630/[Caitlin
Stewart, on Flickr]' 

So, we'll proceed with nice small steps; we're going to use 'Django', which is
a popular Python web framework, to build our app. So, the first thing we want
to do is check that we've got Django installed, and that it's ready for us to
work with. The way we'll check is by confirming that we can spin up Django's
development server and actually see it serving up a web page, in our web
browser, on our local PC.

[[first-FT]]
We'll use the 'Selenium' browser automation tool for this. Create a new Python
file called 'functional_tests.py', and enter the following code.  If you feel
like making a few little goat noises as you do it, it may help.


[source,python]
----
from selenium import webdriver

browser = webdriver.Firefox()
browser.get('http://localhost:8000')

assert 'Django' in browser.title
----

.Adieu to Roman numerals!
*******************************************************************************
In my first draft of this book, I started off with a ``toy'' example, designed
to introduce the concepts of TDD before we dive into the complexities of web
development. The example was based on Roman Numerals, which is something of
a standard trope in TDD tutorials. If you're curious, you can find it on 
https://github.com/hjwp/[my GitHub page]

In the end though, I decided that you guys would prefer to dive right in.
You're here to learn about web programming, not Roman Numeral calculators
(even if the latter can be surprisingly interesting).

So without further ado, let's get started.
*******************************************************************************

That's our first 'Functional Test'; I'll talk more about what I mean by
functional tests, and how they contrasts with unit tests.  For now, it's enough
to assure ourselves that we understand what it's doing: 

- Starting a Selenium 'webdriver' to open up a Firefox browser window
- Using it to open up a web page which we're expecting to be served from
  the local PC
- Checking (making a test assertion) that that page has the word "Django" in
  its title

That's pretty much as simple as it could get. Let's try running it:

If you haven't already, you'll need to install Selenium. 
**`pip install selenium`** is probably the command you need to run. 

NOTE: `pip` is Python's most popular package management tool. If that's news to
you, Google ``**python pip**'' and get it installed. Unless you know what
you're doing, ignore any talk of ``virtualenvs'' for now.



....
$ *python functional_tests.py*
Traceback (most recent call last):
  File "functional_tests.py", line 4, in <module>
    assert 'Django' in browser.title
AssertionError
....

You should see a browser window pop up, try and open up 'localhost:8001', and
then the Python error message.  And then, you will probably have been irritated
at the fact that it left a Firefox window lying around your desktop for you to
tidy up.  We'll fix that later!

For now though, we have a 'failing test', so that means we're allowed to start 
building our app.


Getting Django up and running
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The First step is getting Django installed -- do a **`pip install django`**,
and if you run into any problems, refer to the
https://docs.djangoproject.com/en/1.4/intro/install/[Django documentation].

NOTE: This book was written using Django 1.4. From what I could tell,
everything should still work in Django 1.5. Back in Django 1.3, however,
things like the default folder structure are quite different, so you
might find it confusing to try and follow along... Upgrade!

Once Django is installed, we can create a 'project' to be the main container
for our site.  Django provides a little command-line tool for this:


....
$ *django-admin.py startproject superlists*
....

That will create a folder called 'superlists', and a set of files and
subfolders inside it:

....
$ tree superlists/
superlists/
├── manage.py
└── superlists
    ├── __init__.py
    ├── settings.py
    ├── urls.py
    └── wsgi.py
....

Yes, there's a folder called 'superlists' inside a folder called
`superlists`.  It's a bit confusing, but it's just one of those things; there
are good reasons when you look back at the history of Django.  For now, the
important thing to know is that the `superlists/superlists` folder is for
stuff that applies to the whole project -- including 'settings.py', which is
used to store global configuration information for the site.

You'll also have noticed 'manage.py'.  That's Django's Swiss army knife, and
one of the things it can do is run a development server.  Let's try that now:

....
$ *python manage.py runserver*
Validating models...

0 errors found
Django version 1.4.2, using settings 'superlists.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

....

Leave that running, and open another command shell.  In that, we can try
running our tests again:


....
$ *python functional_tests.py*
$ 
....

Not much action on the command-line, but you should notice two things: Firstly,
there was no ugly `AssertionError` and secondly, the Firefox window that
Selenium popped up (briefly) had a different-looking page on it.


Well, it may not look like much, but that was our first ever passing test!
Hooray!

If it all feels a bit too much like magic, like it wasn't quite real, why not
go and take a look at the dev server manually, by opening a web browser
yourself and visiting http://localhost:8000.  You should see something like
this:

image:it_worked.png[Screenshot of Django "It Worked" screen]

You can quit the development server now if you like, back in the original
shell, using Ctrl+C.


Starting a Git repository
~~~~~~~~~~~~~~~~~~~~~~~~~

There's one last thing to do before we finish the chapter: start to commit our
work to a Version Control System (VCS).  If you're an experienced programmer
you don't need to hear me preaching about version control, but if you're new to
it please believe me when I say that VCS is a must-have.  As soon as your
project gets to be more than a few weeks old and a few lines of code, having a
tool available to look back over old versions of code, revert changes, explore
new ideas safely, even just as a backup... Boy. TDD goes hand in hand with
version control, so I want to make sure I impart how it fits into the workflow.

So, our first commit! If anything it's a bit late, shame on us. I'm going to
use 'Git', 'cos it's the best.  If you don't have `git` installed, go ahead and
download it now. 

.Installing git on MacOS
NOTE: It just so happens I was on a mac today -- I had to do a `sudo ln -s
/usr/local/git/bin/git /usr/local/bin/git` before I actually had a workable
command-line git. I'm not sure if that's a common problem...

Let's start by moving 'functional_tests.py' into the 'superlists' folder, and
doing the `git init` to start the repository:


....
$ *ls*
superlists          functional_tests.py
$ *mv functional_tests.py superlists/*
$ *cd superlists/*
$ *git init .*
Initialized empty Git repository in /chapter_1/superlists/.git/
....

Now let's add the files we want to commit -- which is everything really!


....
$ *ls*
manage.py       superlists          functional_tests.py
$ *git add **
$ *git status*
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#
#       new file:   manage.py
#       new file:   superlists/__init__.py
#       new file:   superlists/__init__.pyc
#       new file:   superlists/settings.py
#       new file:   superlists/settings.pyc
#       new file:   superlists/urls.py
#       new file:   superlists/urls.pyc
#       new file:   superlists/wsgi.py
#       new file:   superlists/wsgi.pyc
#       new file:   functional_tests.py
#
....

.A note on IDEs
*******************************************************************************
If you've come from the world of Java or .NET, you may be keen to use an IDE
for your Python coding.  They have all sorts of useful tools, including VCS
integration, and there are some excellent ones out there for Python.  I used
one myself when I was starting out, and I found it very useful for my first 
couple of projects.

Can I suggest that you 'don't' use an IDE, at least for the duration of this
tutorial? IDEs are much less necessary in the Python world, and I've written
this whole book with the assumption that you're just using a basic text editor
and a command-line.  Sometimes, that's all you have, so it's always worth
learning how to use the basic tools first and understanding how they work.
It'll be something you always have, even if you decide to go back to your IDE
and all its helpful tools, after you've finished this book.
*******************************************************************************

Darn!  We've got a bunch of '.pyc' files in there, it's pointless to commit
those.  Let's remove them and add them to '.gitignore' (a special file that
tells git, um, what it should ignore)


....
$ *git rm --cached superlists/*.pyc*
rm 'superlists/__init__.pyc'
rm 'superlists/settings.pyc'
rm 'superlists/urls.pyc'
rm 'superlists/wsgi.pyc'

$ echo "*.pyc" > .gitignore
....

Now let's see where we are... (You'll see I'm using `git status` a lot -- so
much so that I often alias it to `git st`... Am not telling you how to do that
though, I leave you to discover the secrets of git aliases on your own!)


....
$ *git status*
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached <file>..." to unstage)
#
#       new file:   manage.py
#       new file:   superlists/__init__.py
#       new file:   superlists/settings.py
#       new file:   superlists/urls.py
#       new file:   superlists/wsgi.py
#       new file:   functional_tests.py
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       .gitignore
....

OK, we'll just add '.gitignore', and then we're ready to do our first commit!



....
$ *git add .gitignore*
$ *git commit*
....

When you type "git commit", it will pop up an editor window for you to write
your commit message in.  Here's what mine looked like:

image:first_commit.png[Screenshot of git commit vi window]

(I hasten to add that I don't usually use a Mac -- I just happened to be 
borrowing my wife's today!)

(I do usually use vi with some hideous colour scheme though)

[NOTE]
.Git's default editor
=====
Did `vi` just pop up for you and you had no idea what to do with it? Well, much
as vi has two modes, you now have two choices. One is to learn some
minimal vi commands '(press `i` to go into insert mode, type your text, presc
`Esc` to go back to normal mode, then write the file and quit with
`:wq<Enter>`)'. You'll then have joined the great fraternity of people who know
with this ancient, revered text editor.

Or you can point-blank refuse to be involved in such a ridiculous throwback to
the 1970s, and configure git to use an editor of your choice. Quit vi using
`<Esc>` followed by `:q!`, then change your git default editor.

The Internet has lots more info about setting up a default editor for git. In
any case, this might be a good time to take a look at some
http://git-scm.com/book/en/Customizing-Git-Git-Configuration[basic git
configuration]
=====


OK that's it for the VCS lecture. So, congratulations!  You've written a
functional test using Selenium, and you've got Django installed and running, in
a certifiable, test-first, goat-approved TDD way.  Give yourself a
well-deserved pat on the back before moving onto Chapter 2.


