[[preface]]
Preface
-------

This book is my attempt to share with the world the journey I've taken from
"hacker" to "software engineer". It's mainly about testing, but there's a lot
more to it, as you'll soon see.

I want to thank you for reading it.  

If you bought a copy, then I'm very grateful.  If you're reading the free
online version, then I'm 'still' grateful that you've decided it's worth
spending some of your time on. Who knows, perhaps once you get to the end,
you'll decide it's good enough to buy a real copy, for yourself or a friend.

If you have any comments, questions, or suggestions, I'd love to hear from you.
You can reach me directly via obeythetestinggoat@gmail.com, or on Twitter
https://www.twitter.com/hjwp[@hjwp].  You can also check out the website and my
blog at http://www.obeythetestinggoat.com[www.obeythetestinggoat.com], and
there's a mailing list at 
https://groups.google.com/forum/#!forum/obey-the-testing-goat-book.

I hope you'll enjoy reading it as much as I enjoyed writing it.


Why I wrote a book about Test-Driven Development
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'``Who are you, why are you writing this book, and why should I
read it?''' I hear you ask.

//TODO: tighten up this section

I'm still quite early on in my programming career.  They say that in any
discipline, you go from apprentice, to journeyman, and eventually, sometimes,
onto master.  I'd say that I'm -- at best -- a journeyman programmer.  But I
was lucky enough, early on in my career, to fall in with a bunch of TDD
fanatics, and it made such a big impact on my programming that I'm burning to
share it with everyone. You might say I have the enthusiasm of a recent
convert, and the learning experience is still a recent memory for me, so I hope
I can still empathise with beginners.

When I first learned Python (from Mark Pilgrim's excellent <<dip,Dive Into
Python>>), I came across the concept of TDD, and thought ``Yes.
I can definitely see the sense in that''.  Perhaps you've had a similar
reaction when you first heard about TDD?  It sounds like a really sensible
approach, a really good habit to get into -- like regularly flossing your
teeth, or something.

Then came my first big project, and you can guess what happened - there was a
client, there were deadlines, there was lots to do, and any good intentions
about TDD went straight out of the window.

And, actually, it was fine.  I was fine.

At first.

At first I knew I didn't really need TDD because it was a small website, and I
could easily test whether things worked by just manually checking it out. Click
this link 'here', choose that drop-down item 'there', and 'this' should happen.
Easy. This whole writing tests thing sounded like it would have taken 'ages',
and besides, I fancied myself, from the full height of my 3 weeks of adult
coding experience, as being a pretty good programmer. I could handle it. Easy.

Then came the fearful goddess Complexity. She soon showed me the limits of my
experience. 

The project grew. Parts of the system started to depend on other parts. I did
my best to follow good principles like DRY (Don't Repeat Yourself), but that
just led to some pretty dangerous territory.  Soon I was playing with multiple
inheritance. Class hierarchies 8 levels deep. `eval` statements. 


I became scared of making changes to my code.  I was no longer sure what
depended on what, and what might happen if I changed this code 'over here', oh
gosh, I think that bit over there inherits from it -- no, it doesn't it's
overriden.  Oh but it depends on that class variable.  Right, well, as long as
I override the override it should be fine. I'll just check -- but checking was
getting much harder. There were lots of sections to the site now, and clicking
through them all manually was starting to get impractical.  Better to leave
well enough alone, forget refactoring, just make do. 

Soon I had a hideous, ugly mess of code. New development became painful.

Not too long after this, I was lucky enough to get a job with a company called
Resolver Systems (now https://www.pythonanywhere.com[PythonAnywhere]), where
Extreme Programming (XP) was the norm. They introduced me to rigorous TDD.

Although my previous experience had certainly opened my mind to the possible
benefits of automated testing, I still dragged my feet at every stage.  ``I
mean, testing in general might be a good idea, but 'really?'.  All these tests?
Some of them seem like a total waste of time...  What? Functional tests as
'well' as unit tests? Come on, that's overdoing it! And this TDD test / minimal
code change / test cycle? This is just silly! We don't need all these baby
steps! Come on, we can see what the right answer is, why don't we just skip to
the end?''

Believe me, I second-guessed every rule, I suggested every shortcut, I demanded
justifications for every seemingly pointless aspect of TDD, and I came out
seeing the wisdom of it all. I've lost count of the number of times I've
thought ``thanks, tests'', as a functional test uncovers a regression we would
never have predicted, or a unit test saves me from making a really silly logic
error.  Psychologically, it's made development a much less stressful
process. It produces code that's a pleasure to work with.

So, let me tell you 'all' about it!



Aims of this book
~~~~~~~~~~~~~~~~~

My main aim is to impart a methodology -- a way of doing web development, which
I think makes for better web apps and happier developers. There's not much
point in a book that just covers material you could find by googling, so this
book isn't a guide to Python syntax, or a tutorial on web development 'per se'.
Instead, I hope to teach you how to use TDD to get more reliably to our shared,
holy goal: 'clean code that works'

With that said: I will constantly refer to a real practical example, by
building a web app from scratch using tools like Django, Selenium, jQuery,
and Mock. I'm not assuming any prior knowledge of any of these, so you
should come out of the other end of this book with a decent introduction to
those tools, as well as the discipline of TDD.

In Extreme Programming we always pair-program, so I've imagined writing this 
book as if I was pairing with my previous self, and having to explain how the
tools work, and answer questions about why we code in this particular way. So,
if I ever take a bit of a patronising tone, it's because I'm not all that
smart, and I have to be very patient with myself. And if I ever sound
defensive, it's because I'm the kind of annoying person that systematically
disagrees with whatever anyone else says, so sometimes it took a lot of
justifying to convince myself of anything.



Outline
~~~~~~~

I've split this book into three parts.

Part 1 (Chaps 1-6) - The basics::
    Dives straight into building a simple web app using TDD. We start by
    writing a functional test (with Selenium), then we go through the basics of
    Django  -- models, views, templates -- with rigorous unit testing at every
    stage. I also introduce the Testing Goat.

Part 2 (Chaps 7-14) - Web development essentials:: 
    Covers some of the trickier but unavoidable aspects of web development, and
    shows how testing can help us with them: static files, deployment to
    production, form data validation, database migrations, and the dreaded
    JavaScript.

Part 3 (Chaps 15-20) - More advanced topics::
    Mocking, integrating a 3rd. party authentication system, Ajax, test
    fixtures, Outside-in TDD and Continuous Integration (CI).


Onto a little housekeeping...

=== Conventions Used in This Book

The following typographical conventions are used in this book:

'Italic':: Indicates new terms, URLs, email addresses, filenames, and file
extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to
refer to program elements such as variable or function names, databases, data
types, environment variables, statements, and keywords.

*`Constant width bold`*:: Shows commands or other text that should be typed
literally by the user.

'`Constant width italic`':: Shows text that should be replaced with
user-supplied values or by values determined by context.

[subs="specialcharacters,quotes"]
----
# code listings and terminal output will be listed in constant width paragraphs
$ *commands to type*  will be in bold
Occasionally I will use the symbols:

[...]

To signify that some of the content has been skipped, to shorten
long bits of output, or to skip down to a relevant bit
----


TIP: This icon signifies a tip or suggestion.

NOTE: This icon signifies a general note or aside.

WARNING: This icon indicates a warning or caution.

=== Contacting O'Reilly

If you'd like to get in touch with my beloved publisher with any questions
about this book, contact details follow:

++++
<simplelist>
<member>Oâ€™Reilly Media, Inc.</member>
<member>1005 Gravenstein Highway North</member>
<member>Sebastopol, CA 95472</member>
<member>800-998-9938 (in the United States or Canada)</member>
<member>707-829-0515 (international or local)</member>
<member>707-829-0104 (fax)</member>
</simplelist>
++++

You can also send email to pass:[<email>bookquestions@oreilly.com</email>].

You can find errata, examples, and additional information at
link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

For more information about books, courses, conferences, and news, see
O'Reilly's website at link:$$http://www.oreilly.com$$[].

Facebook: link:$$http://facebook.com/oreilly$$[]

Twitter: link:$$http://twitter.com/oreillymedia$$[]

YouTube: link:$$http://www.youtube.com/oreillymedia$$[]



=== Version history

[cols="1,10"]
|================

|0.1| First 4 chapters



|0.2| Adds chapters 5 and 6, many typo corrections, and incorporates lots of
other feedback.  Huge thanks to Dave Pawson, Nicholas Tollervey and Jason
Wirth and my editor Meghan Blanchette. Thanks also to Hansel Dunlop, Jeff Orr,
Kevin De Baere, crainbf, dsisson, Galeran, Michael Allan, James O'Donnell,
Marek Turnovec, SoonerBourne, julz and my mum!

There are several changes to chapters 1-4, which would be worth looking
at if you've been working from the previous draft. 

* Look out for some clarifications to the pre-requisites below

* In chapter 2, look out for the mention of `implicitly_wait`, the fix to the
missing `if __name__ == '__main__'`, and the ``TDD concepts'' section at
the end

* In chapter 3 there's a little ``useful commands & concepts'' recap at the
end.

* Chapter 4 has a flowchart illustrating the TDD process, well worth a look
before diving into chapters 5 & 6, which are quite meaty.



|0.3| Python 3, styling and deployment.

* The entire book has been converted to Python 3.  See the top of chapter 7 for
what to do if you've been using Python 2 to date, and see the preface for
updated installation instructions

* Added Chapter 7, which talks about layout and styling, static files, using
Bootstrap, and how it can be tested

* Added Chapter 8 in which we deploy the application to a real web server.
Call this "Devops" if you will.  In this we cover nginx, gunicorn, upstart,
virtualenvs and deployment automation using fabric.  At each step we use our
tests to check our setup against a "staging" site, and then use automated
deployment for the production site.

Huge thanks to Jonathan Hartley, Hynek Schlawack, Cody Farmer, William Vincent,
and many others.



|0.4| Forms and input validation

Thanks to Emily Bache and Gary Bernhardt who convinced me to go for slightly
more purist unit tests in chapters 5 onwards.

Thanks to Russell Keith-Magee and Trey Hunner for their comments on
appendix II, and some correlated improvements to ch. 9

Thanks to all my other Early Release readers for your invaluable feedback
and support.

Warning: to all those that missed the previous update, the whole book
has switched to Python 3.  To update your codebase, my recommendation is to go
back to the beginning of the book and just start again from scratch -- it
really won't take that long, it's much quicker the second time, and it's 
good revision besides.  If you really want to "cheat", check out the 
appropriate branch (chapter_XX) from my
https://github.com/hjwp/book-example/[github repo]


|0.5| Django 1.6, better deployment, South migrations, Javascript

* Fully upgraded to Django 1.6.  This simplifies chapter 3, 6, and 10
somewhat.

* Tweaks to the deployment chapter, add a git tag.

* (New) Chapter 12:  Database Migrations.  Currently uses South.

* (New) Chapter 13:  Dipping our toes into JavaScript

Thanks to David Souther for his detailed comments on the JavaScript chapter,
and to all the early release readers that have provided feedback: Tom Perkin,
Sorcha Bowler, Jon Poler, Charles Quast, Siddhartha Naithani, Steve Young,
Roger Camargo, Wesley Hansen, Johansen Christian Vermeer, Ian Laurain, Sean
Robertson, Hari Jayaram, Bayard Randel, Konrad KorÅ¼el, Matthew Waller, Julian
Harley, Barry McLendon, Simon Jakobi, Angelo Cordon, Jyrki Kajala, Manish Jain,
Mahadevan Sreenivasan, Konrad KorÅ¼el, Deric Crago, Cosmo Smith, Markus
Kemmerling, Andrea Costantini, Daniel Patrick and Ryan Allen.

|0.6| Integrating a 3rd-party auth system (Persona), spiking, and mocking in
Javascript and Python, server-side debugging, Outside-In TDD

* Add chapters 14, covering a "spike" (untested explatory coding) and de-spike.
  More advanced JavaScript testing, using mocks

* Chapter 15 covers mocking in Python, and customising Django authentication.

* Chapter 16 does a little server-side debugging.

* Chapter 17 finishes the user story with a discussion of Outside-In TDD.

Thanks to Steve Young, Jason Selby, Greg Vaughan, Jonathan Sundqvist, Richard
Bailey, Diane Soini, and many others -- the mailing list is getting to be a
real active community now, thanks to all!

//Jenkins: thanks to Julian Harley
//final version: thanks to Dale Stewart


|================

The bottom entry is the version you're reading now. This version history
applies to the paid-for Early Release e-book version (thanks again if you've
bought that!), not to the Chimera online version. 



[NOTE]
.On Chimera comments 
=====
If you're reading this via the Chimera online version, be aware that the 
platform is still under development, so it has a few missing features. For
example, I don't get notified when people comment.  So, if you have a question
for which you want an immediate answer, email me rather than posting a comment
here.
=====


PS - if you're reading the free version of the book and you're enjoying it,
you know, here's
http://www.anrdoezrs.net/click-7079286-11260198?url=http%3A%2F%2Fshop.oreilly.com%2Fproduct%2F0636920029533.do%3Fcmp%3Daf-code-book-product_cj_9781449367794_%7BPID%7D&cjsku=0636920029533[a
link from which you can buy the full thing], hint hint...

