[[preface]]
Preface
-------

Why I wrote a book about Test-Driven Development
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'``Who are you, why are you writing this book, and why should I
read it?''' I hear you ask.

I'm still quite early on in my programming career.  They say that in
any discipline, you go from apprentice, to journeyman, and
eventually, sometimes, onto master.  I'd say that I'm, at
best, a journeyman TDD programmer.  But I was lucky enough, early on in my
career, to fall in with a bunch of TDD fanatics, and it made such a big impact
on my programming that I'm burning to share it with everyone. You might say I
have the enthusiasm of a recent convert.

When I first learned Python (from Mark Pilgrim's excellent
<<dip,Dive Into Python>>), I came across the concept of TDD, and thought ``yes
- I can definitely see the sense in that''.  Perhaps you've had a similar
reaction when you first heard about TDD?  It sounds like a really sensible
approach, a really good habit to get into - like regular flossing or something.

Then came my first big project, and you can guess what happened - there was a
client, there were deadlines, there was lots to do, and any good intentions
about TDD went straight out of the window.

And, actually, it was fine.  I was fine.

At first.

At first I knew I didn't really need TDD because it was a small website, and I
could easily test whether things worked by just manually checking it out. Click
this link 'here', choose that drop-down item 'there', and 'this' should happen.
Easy. This whole writing tests thing sounded like it would have taken 'ages',
and besides, I fancied myself, from the full height of my 3 weeks of adult
coding experience, as being a pretty good programmer. I could handle it. Easy.

But soon the fearful goddess Complexity started to make herself known to me and
began to put a damper on my naive hubris.

The project grew. Parts of the system started to depend on other parts. I did
my best to follow good principles like DRY (Don't Repeat Yourself), but that
just led to some pretty dangerous territory.  Soon I was playing with multiple
inheritance. Class hierarchies 8 levels deep. `eval` statements. 


I became scared of making changes to my code.  I was no longer sure what
depended on what, and what might happen if I changed this code 'over here', oh
gosh, I think that bit over there inherits from it -- no, it doesn't it's
overriden.  Oh but it depends on that class variable.  Right, well, as long as
I override the override it should be fine. I'll just check -- but checking was
getting much harder. There were lots of sections to the site now, and clicking
through them all manually was starting to get impractical.  Better to leave
well enough alone, forget refactoring, just make do. 

Soon I had a hideous, ugly mess of code. New development became painful.

Not too long after this, I was lucky enough to fall in with a bunch of
Extreme Programming (XP) fanatics at a company called Resolver Systems (now
PythonAnywhere).  They introduced me to rigorous TDD.

Although my previous experience had certainly opened my mind to the possible
benefits of automated testing, I can tell you that I dragged my feet at every
stage.  ``I mean, testing in general might be a good idea, but 'really?'.  All
these tests?  Some of them seem like a total waste of time...  What? Functional
tests as 'well' as unit tests? Come on, that's overdoing it! And this TDD
test - minimal code change - test cycle? This is just silly! We don't need all
these baby steps! Come on, we can see what the right answer is, why don't we
just skip to the end?''

Believe me when I say that I've second-guessed every rule, that I've suggested
every shortcut, that I've demanded justifications for every seemingly pointless
aspect of TDD, and I've come out seeing the wisdom of it all. I've lost count
of the number of times I've thought ``thanks, tests'', as a functional test 
uncovers a regression we would never have predicted, or a unit test saves me
from making a really silly logic error.  And psychologically, it's made 
development a much less stressful process, and we produce code that we're 
pleased to work with.

So, let me tell you 'all' about it!



Aims of this book
~~~~~~~~~~~~~~~~~

There's not much point in a book that just covers material you could find by
googling. This book isn't meant to be a guide to Python syntax, and its primary
objective is not to be a tutorial for web development 'per se'. Instead, my
main aim is to impart a methodology -- a way of doing web development, which I
think makes for better web apps and happier developers.

With that said, it will constantly reference a real practical example, by
building a web app from scratch using tools like Django, Selenium, jQuery,
and websockets. I aim to do so without assuming any prior knowledge of any of
these, so you should come out of the other end of this book with a decent
introduction to all those tools, as well as the methodology of TDD.

In Extreme programming we always pair-program, so I've imagined writing this 
book as if I was pairing with my previous self, and having to explain how the
tools work, and answer questions about why we code in this particular way. So,
if I ever take a bit of a patronising tone, it's because I'm not all that
smart, and I have to be very patient with myself. And if I ever sound
defensive, it's because I'm the kind of annoying person that systematically
disagrees with whatever anyone else says, so sometimes it took a lot of
justifying to convince myself of anything.


Outline
~~~~~~~

I've split this book into three books (it's like a tree. Even if you're not
reading the paper version).

*Book 1* Dives straight into building a simple web app using TDD. We start
by writing a functional test (with Selenium), then we go through the basics
of Django  -- models, views, templates an the admin site -- with rigorous unit
testing at every stage. I also introduce the Testing Goat.

*Book 2* Covers intermediate level topics -- mocking, integrating external
components, and something that's rather unescapable in the world of web
programming: 'JavaScript'. There may even be some hints of a single-page
website.

*Book 3* Covers some more funky web development topics, and how TDD applies
to them:  REST, NoSQL databases, async and websockets, caching and continuous
integration.


Some pre-requisites
~~~~~~~~~~~~~~~~~~~

If you're new to programming, I'm assuming that you've already learned the
basics of Python. So if you haven't already, do run through a Python beginner's
tutorial or get an introductory book like <<dip,Dive Into Python>>  or
<<lpthw,Learn Python The Hard Way>>, or, just for fun, 
<<iwp,Invent Your Own Computer Games with Python>>, all of which are excellent
introductions.

Obviously you will need access to a Python interpreter. 

NOTE: were you thinking of using http://www.pythonanywhere.com[PythonAnywhere]?
Then you should know two things -- firstly, that they are my employers, and 
secondly, that you'll need to make a couple of adjustments to the instructions
in this book in order to be able to follow along. See <<appendix1,Appendix I>>.

I'm also assuming you have a basic grasp of how the web works - what HTML is,
what a POST request is.  If you're not sure about those, you'll need to find
a basic HTML tutorial. If you can figure out how to create an HTML page on your
PC and look at it in your browser, and what a form is and how it might work,
then you're probably OK.

If you're an experienced programmer but new to Python, you should get along
just fine.  Python is joyously simple to understand.


Now, onto a little housekeeping


=== Conventions Used in This Book

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file
extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to
refer to program elements such as variable or function names, databases, data
types, environment variables, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed
literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with
user-supplied values or by values determined by context.


[TIP]
====
This icon signifies a tip, suggestion, or general note.
====

[WARNING]
====
This icon indicates a warning or caution.
====


=== Contacting O'Reilly

If you'd like to get in touch with my beloved publisher with any questions
about concerning this book, do go ahead!

++++
<simplelist>
<member>Oâ€™Reilly Media, Inc.</member>
<member>1005 Gravenstein Highway North</member>
<member>Sebastopol, CA 95472</member>
<member>800-998-9938 (in the United States or Canada)</member>
<member>707-829-0515 (international or local)</member>
<member>707-829-0104 (fax)</member>
</simplelist>
++++

You can also send email to pass:[<email>bookquestions@oreilly.com</email>].

You can find errata, examples, and additional information at
link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

For more information about our books, courses, conferences, and news, see
O'Reilly's website at link:$$http://www.oreilly.com$$[].

Find them on Facebook: link:$$http://facebook.com/oreilly$$[]
Follow them on Twitter: link:$$http://twitter.com/oreillymedia$$[]
Watch them on YouTube: link:$$http://www.youtube.com/oreillymedia$$[]


