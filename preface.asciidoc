[[preface]]
Preface
-------

If you're reading this sentence, then this is an early release, unfinished 
draft of this book, so don't be surprised if you find it a little short!
I'm working on the rest of it.

With your help, I hope this can be a better book. So please, please, please
do get in touch with any comments, feedback and suggestions. You can reach
me directly via obeythetestinggoat@gmail.com.  

You can also check out the website at 
http://www.obeythetestinggoat.com[www.obeythetestinggoat.com], and
follow me on Twitter via https://www.twitter.com/hjwp[@hjwp]

I want to know about typos, about whether you think I'm going too fast or
too slow, what you like and don't like, everything.  I want to hear from you
if you're a beginner, and whether it's working for you from a learning
point-of-view. I want to hear from you if you've already done a lot of
testing -- maybe you think I'm doing it all wrong, maybe you think I'm
focusing on the wrong things, maybe you think I've missed something
important. I'm not claiming to be the world's foremost authority, so
get in touch and help me improve things.

Thanks in advance. I hope you enjoy the book!


PS - if you're reading the free version of the book and you're enjoying it,
you know, here's
http://www.anrdoezrs.net/click-7079286-11260198?url=http%3A%2F%2Fshop.oreilly.com%2Fproduct%2F0636920029533.do%3Fcmp%3Daf-code-book-product_cj_9781449367794_%7BPID%7D&cjsku=0636920029533[a
link from which you can buy the full thing], hint hint...

[NOTE]
.On Chimera comments 
=====
If you're reading this via the Chimera online version, be aware that the 
platform is still under development, so it has a few missing features. For
example, I don't get notified when people comment.  So, if you have a question
for which you want an immediate answer, email me rather than posting a comment
here.
=====


.Version history
[cols="1,10"]
|================

|0.1| First 4 chapters



|0.2| Adds chapters 5 and 6, many typo corrections, and incorporates lots of
other feedback.  Huge thanks to Dave Pawson, Nicholas Tollervey and Jason
Wirth and my editor Meghan Blanchette. Thanks also to Hansel Dunlop, Jeff Orr,
Kevin De Baere, crainbf, dsisson, Galeran, Michael Allan, James O'Donnell,
Marek Turnovec, SoonerBourne, julz and my mum!

There are several changes to chapters 1-4, which would be worth looking
at if you've been working from the previous draft. 

* Look out for some clarifications to the pre-requisites below

* In chapter 2, look out for the mention of `implicitly_wait`, the fix to the
missing `if __name__ == '__main__'`, and the ``TDD concepts'' section at
the end

* In chapter 3 there's a little ``useful commands & concepts'' recap at the
end.

* Chapter 4 has a flowchart illustrating the TDD process, well worth a look
before diving into chapters 5 & 6, which are quite meaty.



|0.3| Python 3, styling and deployment.

* The entire book has been converted to Python 3.  See the top of chapter 7 for
what to do if you've been using Python 2 to date, and see the preface for
updated installation instructions

* Added Chapter 7, which talks about layout and styling, static files, using
Bootstrap, and how it can be tested

* Added Chapter 8 in which we deploy the application to a real web server.
Call this "Devops" if you will.  In this we cover nginx, gunicorn, upstart,
virtualenvs and deployment automation using fabric.  At each step we use our
tests to check our setup against a "staging" site, and then use automated
deployment for the production site.

Huge thanks to Jonathan Hartley, Hynek Schlawack, Cody Farmer, William Vincent,
and many others.



|0.4| Forms and input validation

Thanks to Emily Bache and Gary Bernhardt who convinced me to go for slightly
more purist unit tests in chapters 5 onwards.

Thanks to Russell Keith-Magee and Trey Hunner for their comments on
appendix II, and some correlated improvements to ch. 9

Thanks to all my other Early Release readers for your invaluable feedback
and support.

Warning: to all those that missed the previous update, the whole book
has switched to Python 3.  To update your codebase, my recommendation is to go
back to the beginning of the book and just start again from scratch -- it
really won't take that long, it's much quicker the second time, and it's 
good revision besides.  If you really want to "cheat", check out the 
appropriate branch (chapter_XX) from my
https://github.com/hjwp/book-example/[github repo]


|0.5| Django 1.6, better deployment, South migrations, Javascript

* Fully upgraded to Django 1.6.  This simplifies chapter 3, 6, and 10
somewhat.

* Tweaks to the deployment chapter, add a git tag.

* (New) Chapter 12:  Database Migrations.  Currently uses South.

* (New) Chapter 13:  Dipping our toes into JavaScript

Thanks to David Souther for his detailed comments on the JavaScript chapter,
and to all the early release readers that have provided feedback: Tom Perkin,
Sorcha Bowler, Jon Poler, Charles Quast, Siddhartha Naithani, Steve Young,
Roger Camargo, Wesley Hansen, Johansen Christian Vermeer, Ian Laurain, Sean
Robertson, Hari Jayaram, Bayard Randel, Konrad Korżel, Matthew Waller, Julian
Harley, Barry McLendon, Simon Jakobi, Angelo Cordon, Jyrki Kajala, Manish Jain,
Mahadevan Sreenivasan, Konrad Korżel, Deric Crago, Cosmo Smith, Markus
Kemmerling, Andrea Costantini, Daniel Patrick and Ryan Allen.

|0.6| Integrating a 3rd-party auth system (Persona), spiking, and mocking in
Javascript and Python, server-side debugging, Outside-In TDD

* Add chapters 14, covering a "spike" (untested explatory coding) and de-spike.
  More advanced JavaScript testing, using mocks

* Chapter 15 covers mocking in Python, and customising Django authentication.

* Chapter 16 does a little server-side debugging.

* Chapter 17 finishes the user story with a discussion of Outside-In TDD.

Thanks to Steve Young, Jason Selby, Greg Vaughan, Jonathan Sundqvist, Richard
Bailey, Diane Soini, and many others -- the mailing list is getting to be a
real active community now, thanks to all!

//Jenkins: thanks to Julian Harley


|================

The bottom entry is the version you're reading now. This version history
applies to the paid-for Early Release e-book version (thanks again if you've
bought that!), not to the Chimera online version. 


Why I wrote a book about Test-Driven Development
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'``Who are you, why are you writing this book, and why should I
read it?''' I hear you ask.

I'm still quite early on in my programming career.  They say that in any
discipline, you go from apprentice, to journeyman, and eventually, sometimes,
onto master.  I'd say that I'm, at best, a journeyman TDD programmer.  But I
was lucky enough, early on in my career, to fall in with a bunch of TDD
fanatics, and it made such a big impact on my programming that I'm burning to
share it with everyone. You might say I have the enthusiasm of a recent
convert, and the learning experience is still a recent memory for
me, so I hope I can still empathise with beginners.

When I first learned Python (from Mark Pilgrim's excellent <<dip,Dive Into
Python>>), I came across the concept of TDD, and thought ``yes
- I can definitely see the sense in that''.  Perhaps you've had a similar
reaction when you first heard about TDD?  It sounds like a really sensible
approach, a really good habit to get into - like regular flossing or
something.

Then came my first big project, and you can guess what happened - there was a
client, there were deadlines, there was lots to do, and any good intentions
about TDD went straight out of the window.

And, actually, it was fine.  I was fine.

At first.

At first I knew I didn't really need TDD because it was a small website, and I
could easily test whether things worked by just manually checking it out. Click
this link 'here', choose that drop-down item 'there', and 'this' should happen.
Easy. This whole writing tests thing sounded like it would have taken 'ages',
and besides, I fancied myself, from the full height of my 3 weeks of adult
coding experience, as being a pretty good programmer. I could handle it. Easy.

Then came the fearful goddess Complexity. She soon showed me the limits of my
experience. 

The project grew. Parts of the system started to depend on other parts. I did
my best to follow good principles like DRY (Don't Repeat Yourself), but that
just led to some pretty dangerous territory.  Soon I was playing with multiple
inheritance. Class hierarchies 8 levels deep. `eval` statements. 


I became scared of making changes to my code.  I was no longer sure what
depended on what, and what might happen if I changed this code 'over here', oh
gosh, I think that bit over there inherits from it -- no, it doesn't it's
overriden.  Oh but it depends on that class variable.  Right, well, as long as
I override the override it should be fine. I'll just check -- but checking was
getting much harder. There were lots of sections to the site now, and clicking
through them all manually was starting to get impractical.  Better to leave
well enough alone, forget refactoring, just make do. 

Soon I had a hideous, ugly mess of code. New development became painful.

Not too long after this, I was lucky enough to get a job with a company called
Resolver Systems (now PythonAnywhere), where Extreme Programming (XP) was the 
norm. They introduced me to rigorous TDD.

Although my previous experience had certainly opened my mind to the possible
benefits of automated testing, I still dragged my feet at every stage.  ``I
mean, testing in general might be a good idea, but 'really?'.  All these tests?
Some of them seem like a total waste of time...  What? Functional tests as
'well' as unit tests? Come on, that's overdoing it! And this TDD test / minimal
code change / test cycle? This is just silly! We don't need all these baby
steps! Come on, we can see what the right answer is, why don't we just skip to
the end?''

I've second-guessed every rule, I've suggested every shortcut, I've demanded
justifications for every seemingly pointless aspect of TDD, and I've come out
seeing the wisdom of it all. I've lost count of the number of times I've
thought ``thanks, tests'', as a functional test uncovers a regression we would
never have predicted, or a test saves me from making a really silly logic
error.  And psychologically, it's made development a much less stressful
process, and we produce code that we're pleased to work with.

So, let me tell you 'all' about it!



Aims of this book
~~~~~~~~~~~~~~~~~

My main aim is to impart a methodology -- a way of doing web development, which
I think makes for better web apps and happier developers. There's not much
point in a book that just covers material you could find by googling, so this
book isn't a guide to Python syntax, or a tutorial on web development 'per se'.
Instead, I hope to teach you how to use TDD to get more reliably to our shared,
holy goal: 'clean code that works'

With that said: I will constantly refer to a real practical example, by
building a web app from scratch using tools like Django, Selenium, jQuery,
and websockets. I'm not assuming any prior knowledge of any of these, so you
should come out of the other end of this book with a decent introduction to
those tools, as well as the discipline of TDD.

In Extreme Programming we always pair-program, so I've imagined writing this 
book as if I was pairing with my previous self, and having to explain how the
tools work, and answer questions about why we code in this particular way. So,
if I ever take a bit of a patronising tone, it's because I'm not all that
smart, and I have to be very patient with myself. And if I ever sound
defensive, it's because I'm the kind of annoying person that systematically
disagrees with whatever anyone else says, so sometimes it took a lot of
justifying to convince myself of anything.


Outline
~~~~~~~

I've split this book into three parts.

Part 1 (Chaps 1-6) - The basics::
    Dives straight into building a simple web app using TDD. We start by
    writing a functional test (with Selenium), then we go through the basics of
    Django  -- models, views, templates -- with rigorous unit testing at every
    stage. I also introduce the Testing Goat.

Part 2 (Chaps 7-13) - Web development essentials:: 
    Covers some of the trickier but unavoidable aspects of web development, and
    shows how testing can help us with them: static files, deployment to
    production, form data validation, database migrations, and the dreaded
    JavaScript.

Part 3 (Chaps 14-20) - More advanced topics::
    Mocking, integrating a 3rd. party authentication system, Ajax, test
    fixtures, Outside-in TDD and Continuous Integration (CI).


[[pre-requisites]]
Some pre-requisites
~~~~~~~~~~~~~~~~~~~

Python 3 & programming
^^^^^^^^^^^^^^^^^^^^^^

I've written the book with beginners in mind, but if you're new to programming,
I'm assuming that you've already learned the basics of Python. So if you
haven't already, do run through a Python beginner's tutorial or get an
introductory book like <<dip,Dive Into Python>>  or <<lpthw,Learn Python The
Hard Way>>, or, just for fun, <<iwp,Invent Your Own Computer Games with
Python>>, all of which are excellent introductions.

If you're an experienced programmer but new to Python, you should get along
just fine.  Python is joyously simple to understand.

I'm using **Python 3** for this book. When I wrote it in 2013, Python 3 had
been around for several years, and the world was just about on the tipping
point at which it was the preferred choice.  You should be able to follow on
with this book on Mac, Windows or Linux. If you're on Windows, you can download
Python 3 from http://www.python.org[Python.org]. If you're on a mac, you should
already have Python 2 installed, but you'll need to install Python 3 manually.
Again, have a look at http://www.python.org[Python.org] If you're on Linux, I
trust you to figure out how to get it installed.  In the last two cases, be
clear that you know how to launch Python 3 as opposed to 2.

If for whatever reason you are stuck on Python 2, you should find that all of
the code examples can be made to work in Python 2.7, perhaps with a judiciously
placed `__future__ import` or two.

If you are thinking of using http://www.pythonanywhere.com[PythonAnywhere] (the
PaaS startup I work for), rather than a locally installed Python, you should go
and take a quick look at <<appendix1,Appendix I>> before you get started.

In any case, I expect you to have access to Python, and to know how to launch
it from a command-line (usually with the command *`python3`*), and how to
edit a Python file and run it.  Again, have a look at the 3 books I recommend
above if you're in any doubt.

NOTE: if you already have Python 2 installed, and you're worried that
installing Python 3 will break it in some way, don't!  Python 3 and 2 can
coexist peacefully on the same system, and they each store their packages in
totally different locations.  You just need to make sure that you have one
command to launch Python 3 (`python3`), and another to launch Python 2
(usually, just `python`).  Similarly, when we install pip for Python 3, 
we just make sure that its command (`pip3` or `pip-3.3`) is identifiably
different from the Python 2 pip.


How HTML works
^^^^^^^^^^^^^^

I'm also assuming you have a basic grasp of how the web works - what HTML is,
what a POST request is.  If you're not sure about those, you'll need to find
a basic HTML tutorial -- there are a few at
http://www.webplatform.org/[www.webplatform.org/].  If you can figure out how
to create an HTML page on your PC and look at it in your browser, and what a
form is and how it might work, then you're probably OK.


//TODO: something about reading the django tutorial if you ever feel lost.


Required software installations:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Aside from Python, you'll need:

* **Firefox** the web browser. A quick Google search will get you an installer
for whichever platform you're on.  Selenium can actually drive any of the 
major browsers, but Firefox is the easiest to use as an example because it's
reliably cross-platform and, as a bonus, is less sold out to corporate
interests.

* **Git** the version control system. This is available for any platform, 
https://www.github.com[GitHub] have some good installation instructions
if you need them.  Make sure the `git` executable is available from a command
shell.

* **Pip** the Python package management tool.  On Linux, you can install
this as `python3-pip` under most package managers, or just Google for manual
download + installation instructions. On Windows and Mac, things are a touch
more complex, see boxes below.

To make sure we're using the Python3 version of pip, I'll always use `pip-3.3`
as the executable in my command-line examples.  Depending on your platform, it 
may be `pip-3`, or `pip3`, or maybe `pip-3.4` in future (NB - I haven't done
any testing against Python 3.4 yet).


.Windows Notes
*******************************************************************************
Windows users can sometimes feel a little neglected, since OS X and Linux make
it so easy to forget there's a world outside the Unix paradigm.  Backslashes
as directory separators?  Drive letters?  What?   Still, it is absolutely
possible to follow along with this book on Windows.  Here are a few tips:

1. When you install Git on Windows, it will come with a program called "Git
Bash".  Use this as your main command prompt and you'll get all the useful
GNU command-line tools like `ls`, `touch` and `grep`, plus forward-slashes
directory separators.

2. After you install Python 3, you'll need to add two directories to your
system PATH: the main Python directory (eg 'c:\Python33') *and* its Scripts
subfolder, 'c:\Python33\Scripts'. You can do this via 'Control Panel' -->
'System' --> 'Advanced' --> 'Environment Variables'. There are some
instructions at http://docs.python.org/3/using/windows.html[Python.org]


3. On windows, Python 3's executable is called `python.exe`, which is exactly
the same as Python 2.  Similarly, you can easily end up with two different
versions of pip. To avoid any confusion, create a file in your home
folder (usually 'C:\Users\your-username') called '.bashrc', and add the lines:
+
----
alias python3='c:\\Python33\\python.exe'
alias pip-3.3='c:\\Python33\\Scripts\\pip.exe'
----
+
You'll need to close your Git bash window and open a new one for this to take
effect.  It will only work in Git bash, not in the regular Dos command prompt.

4. To install pip, just google "Python 3 Pip", and follow the instructions, 
'making sure to always use `python3` whenever you're running the setup
scripts'.  At the time of writing, the simplest solution was described in
http://stackoverflow.com/a/15211599/366221[This stackoverflow post] and
involves downloading some user-contributed installers for 
http://www.lfd.uci.edu/\~gohlke/pythonlibs/#setuptools[setuptools] and
http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip[pip] from the web.
As of Python 3.4, this is all set to be simplified substantially.  We all
look forward to that day!


The test for all this is that you should be able to go to a command prompt and
just run `python3` from any folder.  Once you've installed pip and Django (see
below), you should also be able to just run `pip-3.3` and `django-admin.py`
from any folder too.
*******************************************************************************

.MacOS Notes
*******************************************************************************
Macs are a bit more sane than Windows, but can still be a little twitchy,
particularly as regards getting `pip-3.3` installed.  

My recommendation is to **use Homebrew**; it seems to be a requirement to get 
a decent dev. setup on a Mac.  Check out http://brew.sh//[brew.sh] for
installation instructions.  Once installed, it'll prompt you to go through a
few setup steps. You'll need to install XCode from the app store, which means
signing up for a Mac developer ID.

Once that's all done, you'll be able to install Python3 and pip-3.3 with one
simple command:

----
brew install python3
----

Similarly to windows, the test for all this is that you should be able to open
a terminal and just run `python3` from anywhere.  Once you've installed pip and
Django (see below), you should also be able to just run `pip-3.3` and
`django-admin.py` from any folder too.
*******************************************************************************


[[git-default-editor]]
.Git's default editor, and other basic Git config
*******************************************************************************
I'll provide step-by-step instructions for Git, but it may be a good idea to
get a bit of configuration done now.  For example, when you do your first
commit, by default 'vi' will pop up, at which point you may have no idea what
to do with it. Well, much as 'vi' has two modes, you then have two choices. One
is to learn some minimal vi commands '(press `i` to go into insert mode,
type your text, presc `Esc` to go back to normal mode, then write the file and
quit with `:wq<Enter>`)'. You'll then have joined the great fraternity of
people who know this ancient, revered text editor.

Or you can point-blank refuse to be involved in such a ridiculous throwback to
the 1970s, and configure git to use an editor of your choice. Quit vi using
`<Esc>` followed by `:q!`, then change your git default editor. See the Git
documentation on 
http://git-scm.com/book/en/Customizing-Git-Git-Configuration[basic git
configuration]
*******************************************************************************

NOTE: Did these instructions not work for you? Or have you got better ones? Get
in touch!  obeythetestinggoat@gmail.com


Required Python modules:
^^^^^^^^^^^^^^^^^^^^^^^^

Once you have 'pip' installed, it's trivial to install new Python modules.
We'll install some as we go, but there are a couple we'll need right from
the beginning, so you should install them right away:

* **Django 1.6** (`pip-3.3 install django==1.6.1`). This is our web
framework. You should make sure you have version 1.6 installed and
that you can access the `django-admin.py` executable from a command-line.  The
https://docs.djangoproject.com/en/1.6/intro/install/[Django documentation] has
some installation instructions if you need help.

* **Selenium** (`pip-3.3 install --upgrade selenium`), a browser 
automation tool which we'll use to drive what are called functional tests. Make
sure you have the absolute latest version installed.  Selenium is engaged in a
permanent arms race with the major browsers, trying to keep up with the latest
features. If you ever find Selenium misbehaving for some reason, the answer is
often that it's a new version of Firefox and you need to upgrade to the latest
Selenium...

Unless you know what you're doing, don't worry about using a `virtualenv`. 
We'll talk about them later in the book, in chapter 8.


.A note on IDEs
*******************************************************************************
If you've come from the world of Java or .NET, you may be keen to use an IDE
for your Python coding.  They have all sorts of useful tools, including VCS
integration, and there are some excellent ones out there for Python.  I used
one myself when I was starting out, and I found it very useful for my first 
couple of projects.

Can I suggest (and it's only a suggestion) that you 'don't' use an IDE, at
least for the duration of this tutorial? IDEs are much less necessary in the
Python world, and I've written this whole book with the assumption that you're
just using a basic text editor and a command-line.  Sometimes, that's all you
have, so it's always worth learning how to use the basic tools first and
understanding how they work. It'll be something you always have, even if you
decide to go back to your IDE and all its helpful tools, after you've finished
this book.
*******************************************************************************


Onto a little housekeeping...

=== Conventions Used in This Book

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file
extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to
refer to program elements such as variable or function names, databases, data
types, environment variables, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed
literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with
user-supplied values or by values determined by context.

[subs="specialcharacters,quotes"]
----
# code listings and terminal output will be listed in constant width paragraphs
$ *commands to type*  will be in bold
Occasionally I will use the symbols:

[...]

To signify that some of the content has been skipped, to shorten
long bits of output, or to skip down to a relevant bit
----


[TIP]
====
This icon signifies a tip, suggestion, or general note.
====

[WARNING]
====
This icon indicates a warning or caution.
====

TODO: this is a note to myself that there is something unfinished, or an idea
that I might want to incorporate later.  These are good things to send me
feedback on!  They should all be gone by the time the book is finished...


=== Contacting O'Reilly

If you'd like to get in touch with my beloved publisher with any questions
about this book, contact details follow:

++++
<simplelist>
<member>O’Reilly Media, Inc.</member>
<member>1005 Gravenstein Highway North</member>
<member>Sebastopol, CA 95472</member>
<member>800-998-9938 (in the United States or Canada)</member>
<member>707-829-0515 (international or local)</member>
<member>707-829-0104 (fax)</member>
</simplelist>
++++

You can also send email to pass:[<email>bookquestions@oreilly.com</email>].

You can find errata, examples, and additional information at
link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

For more information about books, courses, conferences, and news, see
O'Reilly's website at link:$$http://www.oreilly.com$$[].

Facebook: link:$$http://facebook.com/oreilly$$[]

Twitter: link:$$http://twitter.com/oreillymedia$$[]

YouTube: link:$$http://www.youtube.com/oreillymedia$$[]


