[[preface]]
Preface
-------

If you're reading this sentence, then this is an early release, unfinished 
draft of this book, so don't be surprised if you find it a little short!
I'm working on the rest of it.

With your help, I hope this can be a better book. So please, please, please
do get in touch with any comments, feedback and suggestions. You can reach
me directly via obeythetestinggoat@gmail.com.  

You can also check out the website at 
http://www.obeythetestinggoat.com[www.obeythetestinggoat.com], and
follow me on Twitter via https://www.twitter.com/hjwp[@hjwp]

I want to know about typos, about whether you think I'm going too fast or
too slow, what you like and don't like, everything.  I want to hear from you
if you're a beginner, and whether it's working for your from a learning
point-of-view. I want to hear from you if you've already done a lot of
testing -- maybe you think I'm doing it all wrong, maybe you think I'm
focusing on the wrong things, maybe you think I've missed something
important. I'm not claiming to be the world's foremost authority, so
get in touch and help me improve things.

Thanks in advance. I hope you enjoy the book!


PS - if you're reading the free version of the book and you're enjoying it,
you know, here's
http://www.anrdoezrs.net/click-7079286-11260198?url=http%3A%2F%2Fshop.oreilly.com%2Fproduct%2F0636920029533.do%3Fcmp%3Daf-code-book-product_cj_9781449367794_%7BPID%7D&cjsku=0636920029533[a
link from which you can buy the full thing], hint hint...


.Version history
[cols="1,10"]
|================
|0.1| First 4 chapters
|0.2| Adds chapters 5 and 6, many typo corrections, and incorporates lots of
other feedback.  Thanks to my editor Meghan Blanchette, Nicholas Tollervey,
Hansel Dunlop, Jeff Orr, Jason Wirth, Dave Pawson, Kevin De Baere, crainbf,
dsisson, Galeran, Michael Allan, James O'Donnell, Marek Turnovec, SoonerBourne,
julz and my mum!
|================

The bottom entry is the version you're reading now. This version history
applies to the paid-for Early Release e-book version (thanks again if you've
bought that!), not to the Chimera online version. 


Why I wrote a book about Test-Driven Development
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

'``Who are you, why are you writing this book, and why should I
read it?''' I hear you ask.

I'm still quite early on in my programming career.  They say that in any
discipline, you go from apprentice, to journeyman, and eventually, sometimes,
onto master.  I'd say that I'm, at best, a journeyman TDD programmer.  But I
was lucky enough, early on in my career, to fall in with a bunch of TDD
fanatics, and it made such a big impact on my programming that I'm burning to
share it with everyone. You might say I have the enthusiasm of a recent
convert, and the learning experience is still a recent memory for
me, so I hope I can still empathise with beginners.

When I first learned Python (from Mark Pilgrim's excellent <<dip,Dive Into
Python>>), I came across the concept of TDD, and thought ``yes
- I can definitely see the sense in that''.  Perhaps you've had a similar
reaction when you first heard about TDD?  It sounds like a really sensible
approach, a really good habit to get into - like regular flossing or
something.

Then came my first big project, and you can guess what happened - there was a
client, there were deadlines, there was lots to do, and any good intentions
about TDD went straight out of the window.

And, actually, it was fine.  I was fine.

At first.

At first I knew I didn't really need TDD because it was a small website, and I
could easily test whether things worked by just manually checking it out. Click
this link 'here', choose that drop-down item 'there', and 'this' should happen.
Easy. This whole writing tests thing sounded like it would have taken 'ages',
and besides, I fancied myself, from the full height of my 3 weeks of adult
coding experience, as being a pretty good programmer. I could handle it. Easy.

Then came the fearful goddess Complexity. She soon showed me the limits of my
experience. 

The project grew. Parts of the system started to depend on other parts. I did
my best to follow good principles like DRY (Don't Repeat Yourself), but that
just led to some pretty dangerous territory.  Soon I was playing with multiple
inheritance. Class hierarchies 8 levels deep. `eval` statements. 


I became scared of making changes to my code.  I was no longer sure what
depended on what, and what might happen if I changed this code 'over here', oh
gosh, I think that bit over there inherits from it -- no, it doesn't it's
overriden.  Oh but it depends on that class variable.  Right, well, as long as
I override the override it should be fine. I'll just check -- but checking was
getting much harder. There were lots of sections to the site now, and clicking
through them all manually was starting to get impractical.  Better to leave
well enough alone, forget refactoring, just make do. 

Soon I had a hideous, ugly mess of code. New development became painful.

Not too long after this, I was lucky enough to fall in with a bunch of
Extreme Programming (XP) fanatics at a company called Resolver Systems (now
PythonAnywhere).  They introduced me to rigorous TDD.

Although my previous experience had certainly opened my mind to the possible
benefits of automated testing, I still dragged my feet at every stage.  ``I
mean, testing in general might be a good idea, but 'really?'.  All these tests?
Some of them seem like a total waste of time...  What? Functional tests as
'well' as unit tests? Come on, that's overdoing it! And this TDD test / minimal
code change / test cycle? This is just silly! We don't need all these baby
steps! Come on, we can see what the right answer is, why don't we just skip to
the end?''

I've second-guessed every rule, I've suggested every shortcut, I've demanded
justifications for every seemingly pointless aspect of TDD, and I've come out
seeing the wisdom of it all. I've lost count of the number of times I've
thought ``thanks, tests'', as a functional test uncovers a regression we would
never have predicted, or a test saves me from making a really silly logic
error.  And psychologically, it's made development a much less stressful
process, and we produce code that we're pleased to work with.

So, let me tell you 'all' about it!



Aims of this book
~~~~~~~~~~~~~~~~~

My main aim is to impart a methodology -- a way of doing web development, which
I think makes for better web apps and happier developers. There's not much
point in a book that just covers material you could find by googling, so this
book isn't a guide to Python syntax, or a tutorial on web development 'per se'.
Instead, I hope to teach you how to use TDD to get more reliably to our shared,
holy goal: 'clean code that works'

With that said: I will constantly refer to a real practical example, by
building a web app from scratch using tools like Django, Selenium, jQuery,
and websockets. I'm not assuming any prior knowledge of any of these, so you
should come out of the other end of this book with a decent introduction to
those tools, as well as the discipline of TDD.

In Extreme Programming we always pair-program, so I've imagined writing this 
book as if I was pairing with my previous self, and having to explain how the
tools work, and answer questions about why we code in this particular way. So,
if I ever take a bit of a patronising tone, it's because I'm not all that
smart, and I have to be very patient with myself. And if I ever sound
defensive, it's because I'm the kind of annoying person that systematically
disagrees with whatever anyone else says, so sometimes it took a lot of
justifying to convince myself of anything.


Outline
~~~~~~~

I've split this book into three books (it's like a tree. Even if you're not
reading the paper version).

*Book 1* Dives straight into building a simple web app using TDD. We start
by writing a functional test (with Selenium), then we go through the basics
of Django  -- models, views, templates and the admin site -- with rigorous unit
testing at every stage. I also introduce the Testing Goat.

*Book 2* Covers intermediate level topics -- mocking, integrating external
components, and something that's inescapable in the world of web programming:
'JavaScript'. There may even be some hints of a single-page website.

*Book 3* Covers some more funky web development topics, and how TDD applies
to them:  REST, NoSQL databases, async and websockets, caching and continuous
integration.


[[pre-requisites]]
Some pre-requisites
~~~~~~~~~~~~~~~~~~~

Python and web programming
^^^^^^^^^^^^^^^^^^^^^^^^^^

I've written the book with beginners in mind, but if you're new to programming,
I'm assuming that you've already learned the basics of Python. So if you
haven't already, do run through a Python beginner's tutorial or get an
introductory book like <<dip,Dive Into Python>>  or <<lpthw,Learn Python The
Hard Way>>, or, just for fun, <<iwp,Invent Your Own Computer Games with
Python>>, all of which are excellent introductions.

If you're an experienced programmer but new to Python, you should get along
just fine.  Python is joyously simple to understand.

I'm using **Python version 2.7** for this book, and obviously you'll need
access to that. If you are thinking of using
http://www.pythonanywhere.com[PythonAnywhere] (the startup I work for), rather
than a locally installed Python, you should go and take a quick look at
<<appendix1,Appendix I>> before you get started.

I'm also assuming you have a basic grasp of how the web works - what HTML is,
what a POST request is.  If you're not sure about those, you'll need to find
a basic HTML tutorial. If you can figure out how to create an HTML page on your
PC and look at it in your browser, and what a form is and how it might work,
then you're probably OK.


Required software installations:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You should be able to follow on with this tutorial on Mac, Windows or Linux.
Aside from Python, you'll need:

* **Firefox** the web browser. A quick Google search will get you an installer
for whichever platform you're on.

* **Git** the version control system. This is available for any platform, 
https://www.github.com[GitHub] have some good installation instructions
if you need them.  Make sure the `git` executable is available from a command
shell.

* And **pip** the Python package management tool.  Just Google ``Python pip''
and you'll find installation instructions.

[[git-default-editor]]
[NOTE]
.Git's default editor
=====
I'll provide step-by-step instructions for Git, but it may be a good idea to
get a bit of configuration done now.  For example, when you do your first
commit, by default 'vi' will pop up, at which point you may have no idea what
to do with it. Well, much as 'vi' has two modes, you then have two choices. One
is to learn some minimal vi commands '(press `i` to go into insert mode,
type your text, presc `Esc` to go back to normal mode, then write the file and
quit with `:wq<Enter>`)'. You'll then have joined the great fraternity of
people who know this ancient, revered text editor.

Or you can point-blank refuse to be involved in such a ridiculous throwback to
the 1970s, and configure git to use an editor of your choice. Quit vi using
`<Esc>` followed by `:q!`, then change your git default editor. See the Git
documentation on 
http://git-scm.com/book/en/Customizing-Git-Git-Configuration[basic git
configuration]
=====


Required Python modules:
^^^^^^^^^^^^^^^^^^^^^^^^

Once you have 'pip' installed, it's trivial to install new Python modules.
We'll install some as we go, but there are a couple we'll need right from
the beginning, so you should install them right away:

* **Django** (`pip install --upgrade django`). This is our web framework.
You should make sure you have version 1.5 or later installed, and that you can
access the `django-admin.py` executable from a command-line.  The
https://docs.djangoproject.com/en/1.5/intro/install/[Django documentation] has
some installation instructions if you need help.

NOTE: on Windows, to get `django-admin.py` working from a command-line, you
need to get the main Python directory *and* its subfolder called Scripts onto
your PATH.  You can do this in the Control Panel's System section, or you can
use `powershell`. There are some instructions at https://python-guide.readthedocs.org/en/latest/starting/install/win.html[Python-Guide]
 


* **Selenium** (`pip install --upgrade selenium`), a browser 
automation tool which we'll use to drive what are called functional tests. Make
sure you have the absolute latest version installed.  Selenium is engaged in a
permanent arms race with the major browsers, trying to keep up with the latest
features. If you ever find Selenium misbehaving for some reason, the answer is
often that it's a new version of Firefox and you need to upgrade to the latest
Selenium...

.A note on IDEs
*******************************************************************************
If you've come from the world of Java or .NET, you may be keen to use an IDE
for your Python coding.  They have all sorts of useful tools, including VCS
integration, and there are some excellent ones out there for Python.  I used
one myself when I was starting out, and I found it very useful for my first 
couple of projects.

Can I suggest (and it's only a suggestion) that you 'don't' use an IDE, at
least for the duration of this tutorial? IDEs are much less necessary in the
Python world, and I've written this whole book with the assumption that you're
just using a basic text editor and a command-line.  Sometimes, that's all you
have, so it's always worth learning how to use the basic tools first and
understanding how they work. It'll be something you always have, even if you
decide to go back to your IDE and all its helpful tools, after you've finished
this book.
*******************************************************************************


Onto a little housekeeping...

=== Conventions Used in This Book

The following typographical conventions are used in this book:

_Italic_:: Indicates new terms, URLs, email addresses, filenames, and file
extensions.

+Constant width+:: Used for program listings, as well as within paragraphs to
refer to program elements such as variable or function names, databases, data
types, environment variables, statements, and keywords.

**`Constant width bold`**:: Shows commands or other text that should be typed
literally by the user.

_++Constant width italic++_:: Shows text that should be replaced with
user-supplied values or by values determined by context.

[subs="specialcharacters,quotes"]
----
# code listings and terminal output will be listed in constant width paragraphs
$ *commands to type*  will be in bold
Occasionally I will use the symbols:

[...]

To signify that some of the content has been skipped, to shorten
long bits of output, or to skip down to a relevant bit
----


[TIP]
====
This icon signifies a tip, suggestion, or general note.
====

[WARNING]
====
This icon indicates a warning or caution.
====

TODO: this is a note to myself that there is something unfinished, or an idea
that I might want to incorporate later.  These are good things to send me
feedback on!  They should all be gone by the time the book is finished...


=== Contacting O'Reilly

If you'd like to get in touch with my beloved publisher with any questions
about this book, contact details follow:

++++
<simplelist>
<member>O’Reilly Media, Inc.</member>
<member>1005 Gravenstein Highway North</member>
<member>Sebastopol, CA 95472</member>
<member>800-998-9938 (in the United States or Canada)</member>
<member>707-829-0515 (international or local)</member>
<member>707-829-0104 (fax)</member>
</simplelist>
++++

You can also send email to pass:[<email>bookquestions@oreilly.com</email>].

You can find errata, examples, and additional information at
link:$$http://www.oreilly.com/catalog/<catalog page>$$[].

For more information about books, courses, conferences, and news, see
O'Reilly's website at link:$$http://www.oreilly.com$$[].

Facebook: link:$$http://facebook.com/oreilly$$[]

Twitter: link:$$http://twitter.com/oreillymedia$$[]

YouTube: link:$$http://www.youtube.com/oreillymedia$$[]


